{"version":3,"file":"CategoryPage-Di-oEDKW.js","sources":["../../../src/pages/CategoryPage.jsx","../../../src/hooks/useCategory.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useProduct } from \"../hooks/useProduct.jsx\";\nimport useCategory from \"../hooks/useCategory\";\nimport ProductFilter from \"../components/product/ProductFilter.jsx\";\nimport ProductCard from \"../components/product/ProductCard.jsx\";\nimport LoadingSpinner from \"../components/ui/LoadingSpinner.jsx\";\nimport Seo from \"../components/Seo/seo\";\n\nfunction CategoryPage() {\n  const { slug } = useParams();\n  const {\n    getProductsByCategory,\n    getProductFilters,\n    contextLoading,\n    contextError,\n  } = useProduct();\n\n  const {\n    currentCategory,\n    loadCategoryByUrlKey,\n    getCategoryBreadcrumbs,\n    loading: categoryDetailsLoading,\n    error: categoryDetailsError,\n  } = useCategory();\n\n  const [displayedProducts, setDisplayedProducts] = useState([]);\n  const [categoryAggregations, setCategoryAggregations] = useState([]);\n  const [appliedFilters, setAppliedFilters] = useState({});\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const [childCategories, setChildCategories] = useState([]);\n  const [sortOption, setSortOption] = useState(\"position\");\n  const [sortDirection, setSortDirection] = useState(\"ASC\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(12);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch initial category data\n  useEffect(() => {\n    const fetchInitialCategoryData = async () => {\n      if (!slug) return;\n      \n      try {\n        setIsLoading(true);\n        const category = await loadCategoryByUrlKey(slug);\n        if (!category?.id) {\n          return;\n        }\n\n        const [filters, breadcrumbData] = await Promise.all([\n          getProductFilters(category.id),\n          getCategoryBreadcrumbs(category.id)\n        ]);\n\n        setCategoryAggregations(filters || []);\n        setBreadcrumbs(breadcrumbData || []);\n        setChildCategories(category.children_data || []);\n      } catch (err) {\n        console.error(\"Error fetching category data:\", err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialCategoryData();\n  }, [slug, loadCategoryByUrlKey, getProductFilters, getCategoryBreadcrumbs]);\n\n  // Reset state when slug changes\n  useEffect(() => {\n    setDisplayedProducts([]);\n    setCurrentPage(1);\n    setHasMore(true);\n    setAppliedFilters({});\n  }, [slug]);\n\n  // Memoized filter groups\n  const attributeFilterGroups = useMemo(() => {\n    return Object.entries(appliedFilters)\n      .filter(([, values]) => values.length > 0)\n      .map(([attributeCode, values]) => {\n        if (attributeCode === \"price\") {\n          if (values.length > 0) {\n            const priceValue = values[0];\n            const [from, to] = priceValue.split(\"_\");\n            const priceFilter = { field: \"price\" };\n            if (from && from !== \"*\") priceFilter.from = from;\n            if (to && to !== \"*\") priceFilter.to = to;\n            return { filters: [priceFilter] };\n          }\n          return null;\n        } else {\n          return {\n            filters: values.map((value) => ({\n              field: attributeCode,\n              value: value,\n              condition_type: \"in\",\n            })),\n          };\n        }\n      })\n      .filter((group) => group !== null);\n  }, [appliedFilters]);\n\n  // Fetch products when dependencies change\n  const fetchCategoryProducts = useCallback(async () => {\n    if (!currentCategory?.id) return;\n\n    try {\n      setIsLoading(true);\n      const searchCriteria = {\n        currentPage,\n        pageSize,\n        sortField: sortOption,\n        sortDirection,\n        filterGroups: attributeFilterGroups,\n      };\n\n      const data = await getProductsByCategory(currentCategory.id, searchCriteria);\n      \n      // Only update state if we got valid data\n      if (data?.items) {\n        setDisplayedProducts(prev => \n          currentPage === 1 ? data.items : [...prev, ...data.items]\n        );\n        setTotalProducts(data.total_count || 0);\n        setHasMore(currentPage < Math.ceil((data.total_count || 0) / pageSize));\n      }\n    } catch (err) {\n      console.error(\"Error fetching products:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    currentCategory,\n    currentPage,\n    pageSize,\n    sortOption,\n    sortDirection,\n    attributeFilterGroups,\n    getProductsByCategory,\n  ]);\n\n  // Trigger product fetch when dependencies change\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      fetchCategoryProducts();\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, [fetchCategoryProducts]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((attributeCode, newValues) => {\n    setAppliedFilters(prev => ({\n      ...prev,\n      [attributeCode]: newValues.length ? newValues : undefined\n    }));\n    setCurrentPage(1);\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((e) => {\n    const value = e.target.value;\n    if (value.includes(\"_\")) {\n      const [field, direction] = value.split(\"_\");\n      setSortOption(field);\n      setSortDirection(direction.toUpperCase());\n    } else {\n      setSortOption(value);\n      setSortDirection(\"ASC\");\n    }\n    setCurrentPage(1);\n  }, []);\n\n  // Handle page changes\n  const handlePageChange = useCallback((newPage) => {\n    setCurrentPage(newPage);\n    window.scrollTo(0, 0);\n  }, []);\n\n  // Loading and error states\n  const isLoadingInitial = !currentCategory && (categoryDetailsLoading || isLoading);\n  const displayError = contextError || categoryDetailsError;\n\n  if (isLoadingInitial) {\n    return <LoadingSpinner />;\n  }\n\n  if (displayError && !currentCategory) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n          <p>{displayError.message || \"An error occurred loading category details.\"}</p>\n          <Link to=\"/\" className=\"text-indigo-600 hover:underline mt-2 inline-block\">\n            Return to homepage\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentCategory && !isLoadingInitial) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\">\n          <p>Category not found.</p>\n          <Link to=\"/\" className=\"text-indigo-600 hover:underline mt-2 inline-block\">\n            Return to homepage\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const totalPages = Math.ceil(totalProducts / pageSize);\n\n  return (\n    <>\n      <Seo\n        title={currentCategory?.name || \"Category Products\"}\n        description={currentCategory?.description || \"Browse products in this category.\"}\n        keywords={currentCategory?.meta_keywords || \"\"}\n        ogTitle={currentCategory?.name || \"Category Products\"}\n        ogDescription={currentCategory?.description || \"Browse products in this category.\"}\n        ogImage={currentCategory?.image || \"\"}\n        ogUrl={`${window.location.origin}${location.pathname}`}\n      />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumbs, category header, and subcategories remain the same */}\n        {/* ... */}\n\n        <div className=\"flex flex-col md:flex-row gap-8\">\n          <aside className=\"w-full md:w-1/4\">\n            {categoryAggregations.length > 0 && (\n              <ProductFilter\n                filters={categoryAggregations}\n                appliedFilters={appliedFilters}\n                onFilterChange={handleFilterChange}\n              />\n            )}\n          </aside>\n\n          <main className=\"w-full md:w-3/4\">\n            {/* Sort and product count header */}\n            {/* ... */}\n\n            {/* Product Grid */}\n            {isLoading && displayedProducts.length === 0 ? (\n              <div className=\"flex justify-center items-center h-64\">\n                <LoadingSpinner />\n              </div>\n            ) : displayError && displayedProducts.length === 0 ? (\n              <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n                <p>{displayError.message || \"Could not load products.\"}</p>\n              </div>\n            ) : displayedProducts.length > 0 ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {displayedProducts.map((product, index) => (\n                  <ProductCard\n                    key={product.id || `product-${index}`}\n                    product={product}\n                    isLCPCandidate={index === 0 && currentPage === 1}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"bg-gray-100 p-8 text-center rounded-lg\">\n                <p className=\"text-gray-600\">\n                  No products found matching your criteria.\n                </p>\n              </div>\n            )}\n\n            {/* Pagination and loading indicators */}\n            {isLoading && displayedProducts.length > 0 && (\n              <div className=\"flex justify-center my-8\">\n                <LoadingSpinner />\n              </div>\n            )}\n\n            {!isLoading && !hasMore && displayedProducts.length > 0 && (\n              <p className=\"text-center text-gray-500 my-8\">\n                You've reached the end of the results.\n              </p>\n            )}\n\n            {totalPages > 1 && (\n              <div className=\"mt-8 flex justify-center\">\n                {/* Pagination controls */}\n                {/* ... */}\n              </div>\n            )}\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default CategoryPage;","import { useState, useCallback, useRef } from \"react\";\nimport * as categoryApi from \"../api/category\";\n\n/**\n * Custom hook for working with categories\n */\nexport const useCategory = () => {\n  const [categories, setCategories] = useState([]);\n  const [categoryTree, setCategoryTree] = useState(null); \n  const [error, setError] = useState(null);\n  const [currentCategory, setCurrentCategory] = useState(null);\n  const [categoryProducts, setCategoryProducts] = useState({\n    items: [],\n    total_count: 0,\n  });\n  const [productFilters, setProductFilters] = useState([]);\n  const [cachedCategoryDetails, setCachedCategoryDetails] = useState({}); // Cache for category details by URL key\n  const [cachedBreadcrumbs, setCachedBreadcrumbs] = useState({}); // Cache for breadcrumbs by category ID\n\n\n  // Use refs to store the latest state values without causing re-renders\n  const stateRef = useRef({\n    categories,\n    categoryTree,\n   \n    error,\n    currentCategory,\n    categoryProducts,\n    productFilters,\n    cachedCategoryDetails, // Add to ref\n    cachedBreadcrumbs,   // Add to ref\n  });\n\n  // Update refs when state changes\n  stateRef.current = {\n    categories,\n    categoryTree, \n    error,\n    currentCategory,\n    categoryProducts,\n    productFilters,\n    cachedCategoryDetails, // Update in ref\n    cachedBreadcrumbs,   // Update in ref\n  };\n\n  /**\n   * Load all categories\n   */\n  const loadCategories = useCallback(async () => {\n   \n    setError(null);\n\n    try {\n      const data = await categoryApi.getAllCategories();\n      const items = data.items || [];\n      setCategories(items);\n      return items;\n    } catch (err) {\n      setError(err.message || \"Failed to load categories\");\n      return [];\n    } finally {\n     \n    }\n  }, []); // Empty dependency array to ensure stable reference\n\n  /**\n   * Load category tree\n   * @param {number} rootCategoryId - Root category ID\n   */\n  const loadCategoryTree = useCallback(async (rootCategoryId = 2) => {\n    \n    setError(null);\n\n    try {\n      const data = await categoryApi.getCategoryTree(rootCategoryId);\n      setCategoryTree(data);\n      return data;\n    } catch (err) {\n      setError(err.message || \"Failed to load category tree\");\n      return null;\n    } finally {\n     \n    }\n  }, []);\n\n  /**\n   * Load category by ID\n   * @param {number} categoryId - Category ID\n   */\n  const loadCategoryById = useCallback(async (categoryId) => {\n  \n    setError(null);\n\n    try {\n      const data = await categoryApi.getCategoryById(categoryId);\n      setCurrentCategory(data);\n      return data;\n    } catch (err) {\n      setError(err.message || `Failed to load category ${categoryId}`);\n      return null;\n    } finally {\n     \n    }\n  }, []);\n\n  /**\n   * Load category by URL key/slug\n   * @param {string} urlKey - Category URL key or slug\n   */\n  const loadCategoryByUrlKey = useCallback(async (urlKey) => {\n  \n    setError(null);\n\n    if (stateRef.current.cachedCategoryDetails[urlKey]) {\n      const cachedData = stateRef.current.cachedCategoryDetails[urlKey];\n      setCurrentCategory(cachedData);\n    \n      return cachedData;\n    }\n\n    try {\n      const data = await categoryApi.getCategoryByUrlKey(urlKey);\n      if (data) {\n        setCachedCategoryDetails(prev => ({ ...prev, [urlKey]: data }));\n        setCurrentCategory(data);\n      } else {\n        // If API returns null/undefined (e.g. category not found),\n        // still set currentCategory to null to reflect this.\n        setCurrentCategory(null);\n      }\n      return data;\n    } catch (err) {\n      setError(err.message || `Failed to load category ${urlKey}`);\n      setCurrentCategory(null); // Ensure currentCategory is reset on error\n      return null;\n    } finally {\n    \n    }\n  }, [setCachedCategoryDetails, setCurrentCategory,, setError]); // Dependencies updated\n\n  /**\n   * Load products for a category\n   * @param {number|string} categoryIdentifier - Category ID or URL key\n   * @param {Object} options - Search options\n   */\n  const loadCategoryProducts = useCallback(\n    async (categoryIdentifier, options = {}) => {\n     \n      setError(null);\n\n      try {\n        let data;\n\n        if (typeof categoryIdentifier === \"number\") {\n          data = await categoryApi.getProductsByCategory(\n            categoryIdentifier,\n            options\n          );\n        } else {\n          data = await categoryApi.getProductsByCategoryUrlKey(\n            categoryIdentifier,\n            options\n          );\n        }\n\n        setCategoryProducts(data);\n        return data;\n      } catch (err) {\n        setError(\n          err.message ||\n            `Failed to load products for category ${categoryIdentifier}`\n        );\n        return { items: [], total_count: 0 };\n      } finally {\n        \n      }\n    },\n    []\n  );\n\n  /**\n   * Load child categories\n   * @param {number} parentId - Parent category ID\n   */\n  const loadChildCategories = useCallback(async (parentId) => {\n    \n    setError(null);\n\n    try {\n      const data = await categoryApi.getChildCategories(parentId);\n      return data.items || [];\n    } catch (err) {\n      setError(\n        err.message || `Failed to load child categories for ${parentId}`\n      );\n      return [];\n    } finally {\n      \n    }\n  }, []);\n\n  /**\n   * Load category filters\n   * @param {number} categoryId - Category ID\n   */\n  const loadCategoryFilters = useCallback(async (categoryId) => {\n   \n    setError(null);\n\n    try {\n      const data = await categoryApi.getCategoryFilters(categoryId);\n      setProductFilters(data);\n      return data;\n    } catch (err) {\n      setError(\n        err.message || `Failed to load filters for category ${categoryId}`\n      );\n      return [];\n    } finally {\n   \n    }\n  }, []);\n\n  /**\n   * Load featured categories\n   * @param {number} limit - Maximum number of categories\n   */\n  const loadFeaturedCategories = useCallback(async (limit = 10) => {\n    \n    setError(null);\n\n    try {\n      const data = await categoryApi.getFeaturedCategories(limit);\n      return data.items || [];\n    } catch (err) {\n      setError(err.message || \"Failed to load featured categories\");\n      return [];\n    } finally {\n     \n    }\n  }, []);\n\n  /**\n   * Search categories\n   * @param {string} searchTerm - Search term\n   * @param {number} limit - Maximum number of results\n   */\n  const searchCategoriesByName = useCallback(async (searchTerm, limit = 20) => {\n  \n    setError(null);\n\n    try {\n      const data = await categoryApi.searchCategories(searchTerm, limit);\n      return data.items || [];\n    } catch (err) {\n      setError(\n        err.message || `Failed to search categories for \"${searchTerm}\"`\n      );\n      return [];\n    } finally {\n      \n    }\n  }, []);\n\n  /**\n   * Get breadcrumbs for a category\n   * @param {number} categoryId - Category ID\n   */\n  const getCategoryBreadcrumbs = useCallback(async (categoryId) => {\n  setError(null);\n\n  // Fix: Remove the incorrect curteRef reference\n  if (stateRef.current.cachedBreadcrumbs[categoryId]) {     \n    return stateRef.current.cachedBreadcrumbs[categoryId];\n  }\n\n  try {\n    const pathCategories = await categoryApi.getCategoryPath(categoryId);\n    const breadcrumbsData = pathCategories.map((cat) => ({\n      id: cat.id,\n      name: cat.name,\n      url: `/category/${cat.url_key || cat.id}`,\n    }));\n    if (breadcrumbsData.length > 0) { // Only cache if we got valid breadcrumbs\n      setCachedBreadcrumbs(prev => ({ ...prev, [categoryId]: breadcrumbsData }));\n    }\n    return breadcrumbsData;\n  } catch (err) {\n    setError(\n      err.message || `Failed to get breadcrumbs for category ${categoryId}`\n    );\n    return [];\n  } finally {\n        }\n  }, [setCachedBreadcrumbs, setError]); // Dependencies updated\n\n  // Clear error utility function\n  const clearError = useCallback(() => setError(null), []);\n\n  return {\n    // State\n    categories,\n    categoryTree,   \n    error,\n    currentCategory,\n    categoryProducts,\n    productFilters,\n    // Expose caches if needed for debugging or direct manipulation (optional)\n    // cachedCategoryDetails,\n    // cachedBreadcrumbs,\n\n    // Methods\n    loadCategories,\n    loadCategoryTree,\n    loadCategoryById,\n    loadCategoryByUrlKey,\n    loadCategoryProducts,\n    loadChildCategories,\n    loadCategoryFilters,\n    loadFeaturedCategories,\n    searchCategoriesByName,\n    getCategoryBreadcrumbs,\n\n    // Utilities\n    clearError,\n  };\n};\n\n// Also keep the default export for backward compatibility\nexport default useCategory;\n"],"names":["CategoryPage","slug","useParams","getProductsByCategory","getProductFilters","contextError","useProduct","currentCategory","loadCategoryByUrlKey","getCategoryBreadcrumbs","loading","categoryDetailsLoading","error","categoryDetailsError","categories","setCategories","useState","categoryTree","setCategoryTree","setError","setCurrentCategory","categoryProducts","setCategoryProducts","items","total_count","productFilters","setProductFilters","cachedCategoryDetails","setCachedCategoryDetails","cachedBreadcrumbs","setCachedBreadcrumbs","stateRef","useRef","current","loadCategories","useCallback","async","categoryApi.getAllCategories","err","message","loadCategoryTree","rootCategoryId","data","categoryApi.getCategoryTree","loadCategoryById","categoryId","categoryApi.getCategoryById","urlKey","cachedData","categoryApi.getCategoryByUrlKey","prev","loadCategoryProducts","categoryIdentifier","options","categoryApi.getProductsByCategory","categoryApi.getProductsByCategoryUrlKey","loadChildCategories","parentId","categoryApi.getChildCategories","loadCategoryFilters","categoryApi.getCategoryFilters","loadFeaturedCategories","limit","categoryApi.getFeaturedCategories","searchCategoriesByName","searchTerm","categoryApi.searchCategories","breadcrumbsData","categoryApi.getCategoryPath","map","cat","id","name","url","url_key","length","clearError","useCategory","displayedProducts","setDisplayedProducts","categoryAggregations","setCategoryAggregations","appliedFilters","setAppliedFilters","breadcrumbs","setBreadcrumbs","childCategories","setChildCategories","sortOption","setSortOption","sortDirection","setSortDirection","currentPage","setCurrentPage","pageSize","totalProducts","setTotalProducts","hasMore","setHasMore","isLoading","setIsLoading","useEffect","category","filters","breadcrumbData","Promise","all","children_data","fetchInitialCategoryData","attributeFilterGroups","useMemo","Object","entries","filter","values","attributeCode","priceValue","from","to","split","priceFilter","field","value","condition_type","group","fetchCategoryProducts","searchCriteria","sortField","filterGroups","Math","ceil","timer","setTimeout","clearTimeout","handleFilterChange","newValues","reactExports","e","target","includes","direction","toUpperCase","newPage","window","scrollTo","isLoadingInitial","displayError","LoadingSpinner","className","children","jsxs","jsx","Link","totalPages","jsxRuntimeExports","Fragment","Seo","title","description","keywords","meta_keywords","ogTitle","ogDescription","ogImage","image","ogUrl","location","origin","pathname","ProductFilter","onFilterChange","product","index","ProductCard","isLCPCandidate"],"mappings":"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"}