{"version":3,"mappings":"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","names":["cache","pendingRequests","DEFAULT_CACHE_TIME","getCachedData","key","fetcher","options","cacheTime","expiry","Date","now","Promise","resolve","data","promise","then","catch","error","apolloClient","ApolloClient","link","createHttpLink","uri","credentials","InMemoryCache","typePolicies","Query","fields","products","merge","existing","items","incoming","defaultOptions","watchQuery","fetchPolicy","CACHE_KEYS","rootId","id","parentId","limit","JSON","stringify","CATEGORY_FRAGMENT","gql","PRODUCT_FRAGMENT","getAllCategories","async","query","processedCategories","processCategories","categoryList","parentPath","result","category","children","length","push","categoryObj","category_id","name","url_key","level","parent_id","path","split","slice","String","categories","original","getCategoryTree","rootCategoryId","variables","processTree","processed","children_data","map","child","getCategoryById","categoryId","Error","is_active","children_count","meta_title","meta_keywords","meta_description","image","description","getCategoryByUrlKey","urlKey","getProductsByCategory","pageSize","currentPage","sortField","sortDirection","sortInput","toLowerCase","sort","total_count","search_criteria","filter_groups","filters","field","value","condition_type","page_size","current_page","sort_orders","direction","page_info","getProductsByCategoryUrlKey","getChildCategories","getCategoryPath","breadcrumbs","pathCategories","crumb","category_name","category_url_key","category_level","getFeaturedCategories","filter","getCategoryFilters","layer_filter","aggregations","searchCategories","searchTerm","filteredCategories","CategoryContext","createContext","CategoryProvider","categoryTree","setCategoryTree","useState","loading","setLoading","setError","initialized","setInitialized","currentCategory","setCurrentCategory","loadCategoryTree","useCallback","err","loadCategoryByUrlKey","found","newPath","getSubcategories","hasChildren","flattenCategories","forEach","clearError","jsx","Provider","useCategory","context","useContext","Loader","jsxRuntimeExports","style","width","height","zIndex","className","jsxs","DesktopCategoryItem","memo","item","parentSlug","activeLevels","handleMouseEnter","handleMouseLeave","getChildren","subcategories","subchildren","subsubchildren","hasChild","slugPath","slug","itemRef","useRef","positionClass","setPositionClass","useEffect","current","rect","getBoundingClientRect","windowWidth","window","innerWidth","right","ref","onMouseEnter","onMouseLeave","Link","to","FiChevronRight","MobileCategoryItem","expandedCategories","toggleCategory","setMobileMenuOpen","itemSlug","hasChildItems","isExpanded","navigate","useNavigate","onClick","FiMinus","size","FiPlus","Navbar$1","React","transformedCategories","setTransformedCategories","mobileMenuOpen","setExpandedCategories","setActiveLevels","navRef","scrolled","setScrolled","handleScroll","scrollY","addEventListener","removeEventListener","transformCategories","transformed","getChildKey","repeat","handleClickOutside","event","contains","target","document","prev","newLevels","Object","keys","parseInt","toggleMobileMenu","newExpanded","k","startsWith","FiX","FiMenu","cat","_a","subcat","AUTH_TOKEN_KEY","USER_INFO_KEY","CART_SESSION_KEY","GUEST_CART_ID_KEY","GraphQLBASE_URL","replace","GraphQLApi","axios","create","baseURL","headers","interceptors","request","use","config","currentToken","authService","getToken","reject","rawMagentoApiUrl","cleanedMagentoApiUrl","protocolSeparator","protocolEndIndex","indexOf","substring","BASE_URL","magentoApi","createAuthenticatedApi","token","Authorization","isAuthenticated","this","localStorage","getItem","setToken","setItem","defaults","common","getUserInfo","userInfo","parse","setUserInfo","user","login","username","password","response","post","fetchAndStoreUserInfo","refreshToken","email","userData","getCurrentCustomer","register","customerData","formattedData","customer","firstname","firstName","lastname","lastName","store_id","website_id","get","logout","callServer","clear","sessionStorage","removeItem","requestPasswordReset","put","template","websiteId","resetPassword","resetToken","newPassword","updateCustomerInfo","changePassword","currentPassword","setupAuthHeader","status","originalRequest","_retry","newToken","refreshError","globalCartData","createCart","isLoggedIn","api","createCartMutation","cartId","createEmptyCart","createActiveCart","errors","message","getOrCreateCartId","getCart","customerCartQuery","customerCart","_c","_b","some","e","includes","guestCartQuery","cart","storedCart","storedGuestCart","applyCoupon","couponCode","applyCouponMutation","updatedCart","applyCouponToCart","success","removeCoupon","removeCouponMutation","removeCouponFromCart","AuthContext","AuthProvider","currentUser","setCurrentUser","authApi.isAuthenticated","authApi.getCurrentCustomer","loadUser","authApi.login","authApi.register","authApi.requestPasswordReset","authApi.resetPassword","updateProfile","updatedUser","authApi.updateCustomerInfo","authApi.changePassword","updateName","updateEmail","updatePassword","useAuth","GRAPHQL_URL","getWishlistItems","wishlist","_id","product","wishlistItemId","sku","price","regularPrice","amount","images","url","stock_status","removeFromWishlistBySku","productId","userErrors","removeProductsFromWishlist","user_errors","WishlistContext","useWishlist","WishlistProvider","wishlistItems","setWishlistItems","fetchWishlistItems","fetchItems","toast","addItemToWishlist","info","addProductsToWishlist","addToWishlist","y","removeItemFromWishlist","wishlistResponse","wishlistItem","find","removeFromWishlist","isInWishlist","refreshWishlist","Loginforms$1","setEmail","setPassword","setErrors","setResetPassword","location","useLocation","fetchCartData","mergeWithUserCart","useCart","pathname","onSubmit","preventDefault","newErrors","trim","test","validateForm","all","Swal","fire","icon","title","text","timer","showConfirmButton","from","state","syncError","errorMessage","htmlFor","type","onChange","placeholder","disabled","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","CartContext","CartProvider","setCart","cartItems","setCartItems","updating","setUpdating","guestCartId","setGuestCartId","currentCartId","cartDataResponse","apiGetCart","apiCreateCart","formattedItems","gqlCartData","Array","isArray","prices","itemPrice","displayPrice","row_total","quantity","qty","small_image","item_id","product_id","localCartItems","parsedItems","parseError","addItemToCart","productDetails","productInput","quantityInput","addToCartMutation","addProductsToCart","userMessage","apiAddToCart","cartItemId","cartIdForApi","itemId","isNaN","removeFromCartMutation","apiRemoveFromCart","refreshInterval","setInterval","clearInterval","updateItemQuantity","updateCartItemMutation","updateCartItems","apiUpdateCartItem","calculateSubtotal","reduce","total","getCartItemCount","count","isInCart","clearCart","guestCartItemsString","guestItems","addError","fetchErr","Header$1","searchOpen","setSearchOpen","setSearchTerm","isSearching","setIsSearching","searchInputRef","focus","handleSearchSubmit","encodeURIComponent","handleSearchInputChange","autoFocus","Navbar","Footer$1","href","rel","LoadingSpinner","color","sizeClasses","small","medium","large","colorClasses","indigo","blue","red","green","gray","spinnerSize","spinnerColor","ORDER_FRAGMENT","formatPrice","currencyCode","locale","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","DateTimeFormat","year","month","day","Dashboard$1","useOutletContext","recentOrders","setRecentOrders","orders","getRecentOrders","auth_error","fetchRecentOrders","renderAddress","address","street","join","city","region","postcode","country","country_id","phone","telephone","Fragment","getStatusStyle","statusLower","addresses","addr","default_billing","default_shipping","reload","scope","order","order_number","created_at","shipping_address","grand_total","toFixed","entity_id","Math","random","toString","Orders$1","setOrders","setCurrentPage","totalPages","setTotalPages","setFilter","_d","getAllOrders","ceil","fetchOrders","handlePageChange","page","scrollTo","getStatusClass","a","b","_","i","OrderDetail$1","orderId","useParams","setOrder","orderData","getOrderById","fetchOrderDetails","getShippingAddress","extension_attributes","shipping_assignments","shipping","billing_address","payment_methods","additional_data","index","shipping_method","src","alt","label","product_sale_price","quantity_ordered","subtotal","total_shipping","_f","_e","total_tax","_h","_g","discounts","printWindow","open","alert","shippingAddress","printContent","increment_id","payment","method","shipping_description","option","qty_ordered","discount_amount","abs","shipping_amount","tax_amount","write","close","onload","print","printOrder","API_BASE_URL","getAuthHeaders","handleApiResponse","ok","errorData","json","fetch","getAddresses","prepareAddressData","addressData","prepared","line","region_input","region_id","customerId","addAddress","customerResponse","preparedAddress","updatedCustomer","updateResponse","body","updateAddress","addressId","updatedAddresses","deleteAddress","addressToDelete","fetchRegionsByCountry","countryId","available_regions","AddressForm$1","initialData","onSuccess","onCancel","isEditing","customerdata","formData","setFormData","formInitialized","setFormInitialized","countries","setCountries","setRegion","fetchCountries","fetchCountriesData","max","handleChange","checked","match","newStreet","dataToSubmit","readOnly","required","changeCountry","full_name_english","ErrorBoundary","Component","constructor","props","super","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","render","AccountAddresses$1","setAddresses","showAddForm","setShowAddForm","editingAddress","setEditingAddress","loadAddresses","handleAddNew","handleSetDefault","isTargetAddress","newDefaultShipping","newDefaultBilling","setDefaultAddress","AddressForm","handleEdit","confirm","handleDelete","Myaccount$1","editName","setEditName","editEmail","setEditEmail","showPasswordForm","setShowPasswordForm","newFirstName","setNewFirstName","newLastName","setNewLastName","newEmail","setNewEmail","setCurrentPassword","setNewPassword","confirmPassword","setConfirmPassword","nameUpdateStatus","setNameUpdateStatus","emailUpdateStatus","setEmailUpdateStatus","passwordUpdateStatus","setPasswordUpdateStatus","FiAlertCircle","FiUser","FiEdit","setTimeout","FiSave","FiMail","FiLock","RequestPasswordResetForm","setMessage","HomePage","lazy","import","__VITE_PRELOAD__","Login","AccountPage","ProductDetailPage","FeaturedProducts","CategoryProductListing","Cart","Checkout","SearchResults","WishlistPage","Page404","__vitePreload","Faqs","ShippingReturns","PrivacyPolicyPage","ContactPage","AccountReviews","ProtectedRoute","Navigate","AppRoutes","Suspense","fallback","Routes","Route","element","Dashboard","Orders","OrderDetail","AccountAddresses","Myaccount","PRODUCT_CACHE_KEYS","criteria","code","CACHE_TIMES","PRODUCT_LIST","PRODUCT_DETAIL","PRODUCT_ATTRIBUTES","PRODUCT_REVIEWS","PRODUCT_STOCK","GLOBAL_PRODUCT_AGGREGATIONS","getCachedProductData","cacheType","PRODUCT_BASIC_FRAGMENT","PRODUCT_DETAIL_FRAGMENT","productApi","getProducts","searchCriteria","filterGroups","resolvedSortField","resolvedSortDirection","group","filterItem","toUpperCase","search","total_pages","getProductById","getProductBySku","getProductByUrlKey","searchProducts","cacheKey","gqlFilter","search_term","getRelatedProducts","related_products","getCrossSellProducts","crosssell_products","getUpSellProducts","upsell_products","getProductReviews","reviews","submitProductReview","reviewData","mutate","mutation","nickname","summary","ratings","rating","value_id","createProductReview","review","getProductAttributes","attributeCode","customAttributeMetadata","normalizedSortDirection","additionalFilters","combinedFilter","eq","getProductFilters","getGlobalProductAggregations","getProductStockStatus","PRODUCT_STOCK_QUERY","is_in_stock","quantity_and_stock_status","only_x_left_in_stock","ProductContext","useProducts","ProductProvider","allProducts","setAllProducts","featuredProducts","setFeaturedProducts","newProducts","setNewProducts","bestSellingProducts","setBestSellingProducts","productsByCategory","setProductsByCategory","setProductDetails","searchResults","setSearchResults","productFilters","setProductFilters","globalProductAggregations","setGlobalProductAggregations","lastFetched","setLastFetched","fetchInitialData","otherCriteria","cacheKeyParts","searchQuery","otherOptions","apiOptions","results","fetchGlobalProductAggregations","refreshAllProducts","bestSelling","getBestSellingProducts","contextValue","useMemo","AddressContext","AddressProvider","fetchAddresses","newAddress","updatedAddr","apiDeleteAddress","useAddress","createRoot","getElementById","StrictMode","BrowserRouter","basename","Header","Footer","ToastContainer"],"ignoreList":[],"sources":["../../../src/api/cacheUtils.js","../../../src/api/apolloClient.jsx","../../../src/api/category.jsx","../../../src/context/CategoryContext.jsx","../../../src/utils/Loader.jsx","../../../src/components/layouts/Navbar.jsx","../../../src/constants/storageKeys.jsx","../../../src/api/auth.jsx","../../../src/api/cart.jsx","../../../src/hooks/useAuth.jsx","../../../src/api/wishlist.jsx","../../../src/context/WishlistContext.jsx","../../../src/components/forms/Loginforms.jsx","../../../src/hooks/useCart.jsx","../../../src/components/layouts/Header.jsx","../../../src/components/layouts/Footer.jsx","../../../src/components/ui/LoadingSpinner.jsx","../../../src/api/orders.js","../../../src/utils/formatters.js","../../../src/components/account/Dashboard.jsx","../../../src/components/account/Orders.jsx","../../../src/components/account/OrderDetail.jsx","../../../src/utils/PrintOrder.js","../../../src/api/addressApi.js","../../../src/components/account/AddressForm.jsx","../../../src/components/ErrorBoundary.jsx","../../../src/components/account/AccountAddresses.jsx","../../../src/components/account/Myaccount.jsx","../../../src/components/forms/RequestPasswordResetForm.jsx","../../../src/routes/AppRoutes.jsx","../../../src/api/productCacheUtils.js","../../../src/api/product.jsx","../../../src/context/ProductContext.jsx","../../../src/context/AddressContext.jsx","../../../src/main.jsx"],"sourcesContent":["/**\n * Simple in-memory cache utility for API requests\n * Supports promise sharing to prevent duplicate in-flight requests\n */\n\n// Cache storage for completed requests\nconst cache = {};\n\n// In-flight requests storage (promises that are still resolving)\nconst pendingRequests = {};\n\n// Default cache expiration time (5 minutes)\nconst DEFAULT_CACHE_TIME = 5 * 60 * 1000;\n\n/**\n * Get data from cache or execute the fetcher function\n * \n * @param {string} key - Unique cache key\n * @param {Function} fetcher - Function that returns a promise with the data\n * @param {Object} options - Cache options\n * @param {number} options.cacheTime - Time in milliseconds to keep the cache valid\n * @returns {Promise} - Promise that resolves with the data\n */\nexport const getCachedData = (key, fetcher, options = {}) => {\n  const { cacheTime = DEFAULT_CACHE_TIME } = options;\n  \n  // Check if we already have valid cached data\n  if (cache[key] && cache[key].expiry > Date.now()) {\n    return Promise.resolve(cache[key].data);\n  }\n  \n  // Check if we have a pending request for this key\n  if (pendingRequests[key]) {   \n    return pendingRequests[key];\n  }\n    \n  // Store the promise in pendingRequests\n  const promise = fetcher().then(data => {\n    // Store the result in cache\n    cache[key] = {\n      data,\n      expiry: Date.now() + cacheTime\n    };\n    \n    // Remove from pending requests\n    delete pendingRequests[key];\n    \n    return data;\n  }).catch(error => {\n    // Remove from pending requests on error\n    delete pendingRequests[key];\n    throw error;\n  });\n  \n  pendingRequests[key] = promise;\n  return promise;\n};\n\n/**\n * Invalidate a specific cache entry\n * \n * @param {string} key - Cache key to invalidate\n */\nexport const invalidateCache = (key) => {\n  if (cache[key]) {\n    delete cache[key];  \n  }\n};\n\n/**\n * Clear all cache entries\n */\nexport const clearCache = () => {\n  Object.keys(cache).forEach(key => {\n    delete cache[key];\n  });\n};\n\nexport default {\n  getCachedData,\n  invalidateCache,\n  clearCache\n};","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\n\n// Base URL for Magento GraphQL API\nconst BASE_URL = `${import.meta.env.VITE_BASE_URL}/graphql`;\n\n// Create the HTTP link for public API access\nconst httpLink = createHttpLink({\n  uri: BASE_URL,\n  credentials: 'same-origin', // Include cookies for session-based auth if needed\n});\n\n// Create the Apollo Client\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          products: {\n            // Merge function for products query to handle pagination\n            merge(existing = { items: [] }, incoming) {\n              return incoming;\n            }\n          }\n        }\n      }\n    }\n  }),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});\n\n// Function to reset the Apollo Client cache\nexport const resetApolloCache = () => {\n  return apolloClient.resetStore();\n};\n\nexport default apolloClient;\n","import { getCachedData, invalidateCache } from './cacheUtils';\nimport { gql } from '@apollo/client';\nimport { apolloClient } from './apolloClient';\n\n// Cache keys for category-related data\nconst CACHE_KEYS = {\n  ALL_CATEGORIES: 'all-categories',\n  CATEGORY_TREE: (rootId) => `category-tree-${rootId}`,\n  CATEGORY_BY_ID: (id) => `category-${id}`,\n  CATEGORY_CHILDREN: (parentId) => `category-children-${parentId}`,\n  CATEGORY_ATTRIBUTES: 'category-attributes',\n  FEATURED_CATEGORIES: (limit) => `featured-categories-${limit}`,\n  CATEGORY_FILTERS: (id) => `category-filters-${id}`,\n  PRODUCTS_BY_CATEGORY: (id, options) => `products-category-${id}-${JSON.stringify(options)}`,\n};\n\n// GraphQL fragments for reuse - using only publicly accessible fields\nconst CATEGORY_FRAGMENT = gql`\n  fragment CategoryFields on CategoryTree {\n    id\n    name\n    url_key\n    level\n    path\n    children_count\n    image\n    description\n    meta_title\n    meta_keywords\n    meta_description\n  }\n`;\n\nconst PRODUCT_FRAGMENT = gql`\n  fragment ProductFields on ProductInterface {\n    id\n    sku\n    name\n    url_key\n    price_range {\n      minimum_price {\n        regular_price {\n          value\n          currency\n        }\n        final_price {\n          value\n          currency\n        }\n        discount {\n          amount_off\n          percent_off\n        }\n      }\n    }\n    image {\n      url\n      label\n    }\n    small_image {\n      url\n      label\n    }\n    thumbnail {\n      url\n      label\n    }\n    short_description {\n      html\n    }\n  }\n`;\n\n/**\n * Get all categories with URL keys\n * @returns {Promise} - Returns all categories with URL keys\n */\nexport const getAllCategories = async () => {\n  return getCachedData(\n    CACHE_KEYS.ALL_CATEGORIES,\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetAllCategories {\n              categories {\n                items {\n                  id\n                  name\n                  url_key\n                  level\n                  path\n                  children {\n                    id\n                    name\n                    url_key\n                    level\n                    path\n                    children {\n                      id\n                      name\n                      url_key\n                      level\n                      path\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          fetchPolicy: 'network-only'\n        });\n\n        // Process the category data to match the expected format\n        const processedCategories = [];\n        \n        const processCategories = (categoryList, parentPath = '') => {\n          const result = [];\n          \n          if (!categoryList) return result;\n          \n          for (const category of categoryList) {\n            // Skip root categories (usually ID 1 and 2)\n            if (category.id <= 2) {\n              if (category.children && category.children.length > 0) {\n                const children = processCategories(category.children);\n                processedCategories.push(...children);\n              }\n              continue;\n            }\n            \n            // Create a structured category object\n            const categoryObj = {\n              category_id: category.id,\n              name: category.name,\n              url_key: category.url_key || '',\n              level: category.level,\n              parent_id: category.path ? category.path.split('/').slice(-2, -1)[0] : null,\n              path: parentPath ? `${parentPath}/${category.url_key || category.id}` : (category.url_key || String(category.id)),\n              children: []\n            };\n            \n            // Process children if any\n            if (category.children && category.children.length > 0) {\n              categoryObj.children = processCategories(\n                category.children, \n                categoryObj.path\n              );\n            }\n            \n            // Add to result array\n            result.push(categoryObj);\n            processedCategories.push(categoryObj);\n          }\n          \n          return result;\n        };\n        \n        // Start processing from the root children\n        if (data.categories && data.categories.items && data.categories.items.length > 0) {\n          processCategories(data.categories.items);\n        }\n        \n        // Return both the original response and the processed categories\n        return {\n          original: data.categories.items,\n          items: processedCategories\n        };\n        \n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Get category tree (hierarchical structure)\n * @param {number} rootCategoryId - Root category ID (default is 2 for most Magento stores)\n * @returns {Promise} - Returns category tree\n */\nexport const getCategoryTree = async (rootCategoryId = 2) => {\n  return getCachedData(\n    CACHE_KEYS.CATEGORY_TREE(rootCategoryId),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetCategoryTree($id: String!) {\n              categories(filters: { ids: { eq: $id } }) {\n                items {\n                  id\n                  name\n                  url_key\n                  level\n                  path\n                  children {\n                    id\n                    name\n                    url_key\n                    level\n                    path\n                    children {\n                      id\n                      name\n                      url_key\n                      level\n                      path\n                      children {\n                        id\n                        name\n                        url_key\n                        level\n                        path\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: { id: String(rootCategoryId) },\n          fetchPolicy: 'network-only'\n        });\n        \n        // Process the category tree to ensure consistent format\n        const processTree = (category) => {\n          if (!category) return null;\n          \n          const processed = {\n            category_id: category.id,\n            id: category.id,\n            name: category.name,\n            url_key: category.url_key || '',\n            level: category.level,\n            path: category.path,\n            children_data: []\n          };\n          \n          if (category.children && category.children.length > 0) {\n            processed.children_data = category.children.map(child => processTree(child));\n          }\n          \n          return processed;\n        };\n        \n        if (!data.categories || !data.categories.items || data.categories.items.length === 0) {\n          return null;\n        }\n        \n        return processTree(data.categories.items[0]);\n      } catch (error) {\n        console.error('Error fetching category tree:', error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Get category by ID\n * @param {number} categoryId - Category ID\n * @returns {Promise} - Returns category details\n */\nexport const getCategoryById = async (categoryId) => {\n  return getCachedData(\n    CACHE_KEYS.CATEGORY_BY_ID(categoryId),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetCategoryById($id: String!) {\n              categories(filters: { ids: { eq: $id } }) {\n                items {\n                  ...CategoryFields\n                }\n              }\n            }\n            ${CATEGORY_FRAGMENT}\n          `,\n          variables: { id: String(categoryId) },\n          fetchPolicy: 'network-only'\n        });\n        \n        if (!data.categories || !data.categories.items || data.categories.items.length === 0) {\n          throw new Error(`Category with ID ${categoryId} not found`);\n        }\n        \n        // Convert GraphQL response to match REST API format\n        const category = data.categories.items[0];\n        return {\n          id: category.id,\n          parent_id: category.path ? category.path.split('/').slice(-2, -1)[0] : null,\n          name: category.name,\n          is_active: true, // Assuming active since it was returned\n          level: category.level,\n          path: category.path,\n          url_key: category.url_key,\n          children_count: category.children_count || 0,\n          meta_title: category.meta_title,\n          meta_keywords: category.meta_keywords,\n          meta_description: category.meta_description,\n          image: category.image,\n          description: category.description\n        };\n      } catch (error) {\n        console.error(`Error fetching category ${categoryId}:`, error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Get category by URL key/slug\n * @param {string} urlKey - Category URL key or slug\n * @returns {Promise} - Returns category details\n */\nexport const getCategoryByUrlKey = async (urlKey) => {\n  // This function doesn't use caching since URL keys might be used in navigation\n  // and we want to ensure fresh data\n  try {\n    const { data } = await apolloClient.query({\n      query: gql`\n        query GetCategoryByUrlKey($urlKey: String!) {\n          categories(filters: { url_key: { eq: $urlKey } }) {\n            items {\n              ...CategoryFields\n            }\n          }\n        }\n        ${CATEGORY_FRAGMENT}\n      `,\n      variables: { urlKey },\n      fetchPolicy: 'network-only'\n    });\n    \n    if (!data.categories || !data.categories.items || data.categories.items.length === 0) {\n      throw new Error(`Category with URL key \"${urlKey}\" not found`);\n    }\n    \n    const category = data.categories.items[0];\n    return {\n      category_id: category.id,\n      id: category.id,\n      name: category.name,\n      url_key: category.url_key,\n      level: category.level,\n      parent_id: category.path ? category.path.split('/').slice(-2, -1)[0] : null,\n      path: category.path,\n      image: category.image,\n      description: category.description,\n      meta_title: category.meta_title,\n      meta_keywords: category.meta_keywords,\n      meta_description: category.meta_description,\n      children_count: category.children_count || 0,\n      children: []\n    };\n  } catch (error) {\n    console.error(`Error fetching category by URL key ${urlKey}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get products by category ID\n * @param {number} categoryId - Category ID\n * @param {Object} options - Search criteria options\n * @param {number} options.pageSize - Number of products per page\n * @param {number} options.currentPage - Current page number\n * @param {string} options.sortField - Field to sort by\n * @param {string} options.sortDirection - Sort direction (ASC or DESC)\n * @returns {Promise} - Returns products in the category\n */\nexport const getProductsByCategory = async (categoryId, options = {}) => {\n  return getCachedData(\n    CACHE_KEYS.PRODUCTS_BY_CATEGORY(categoryId, options),\n    async () => {\n      try {\n        const {\n          pageSize = 20,\n          currentPage = 1,\n          sortField = 'position',\n          sortDirection = 'ASC'\n        } = options;\n        \n        // Build sort input\n        const sortInput = {};\n        sortInput[sortField] = sortDirection.toLowerCase();\n        \n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductsByCategory(\n              $categoryId: String!\n              $pageSize: Int!\n              $currentPage: Int!\n              $sort: ProductAttributeSortInput\n            ) {\n              products(\n                filter: { category_id: { eq: $categoryId } }\n                pageSize: $pageSize\n                currentPage: $currentPage\n                sort: $sort\n              ) {\n                total_count\n                items {\n                  ...ProductFields\n                }\n                page_info {\n                  page_size\n                  current_page\n                  total_pages\n                }\n              }\n            }\n            ${PRODUCT_FRAGMENT}\n          `,\n          variables: {\n            categoryId: String(categoryId),\n            pageSize,\n            currentPage,\n            sort: sortInput\n          },\n          fetchPolicy: 'network-only'\n        });\n        \n        // Convert GraphQL response to match REST API format\n        return {\n          items: data.products.items,\n          total_count: data.products.total_count,\n          search_criteria: {\n            filter_groups: [\n              {\n                filters: [\n                  {\n                    field: 'category_id',\n                    value: String(categoryId),\n                    condition_type: 'eq'\n                  }\n                ]\n              }\n            ],\n            page_size: pageSize,\n            current_page: currentPage,\n            sort_orders: [\n              {\n                field: sortField,\n                direction: sortDirection\n              }\n            ]\n          },\n          page_info: data.products.page_info\n        };\n      } catch (error) {\n        console.error(`Error fetching products for category ${categoryId}:`, error);\n        throw error;\n      }\n    },\n    { cacheTime: 5 * 60 * 1000 } // 5 minutes cache for products (shorter than categories)\n  );\n};\n\n/**\n * Get products by category URL key/slug\n * @param {string} urlKey - Category URL key or slug\n * @param {Object} options - Search criteria options\n * @returns {Promise} - Returns products in the category\n */\nexport const getProductsByCategoryUrlKey = async (urlKey, options = {}) => {\n  try {\n    const category = await getCategoryByUrlKey(urlKey);\n    if (!category || !category.category_id) {\n      throw new Error(`Invalid category with URL key \"${urlKey}\"`);\n    }\n    return getProductsByCategory(category.category_id, options);\n  } catch (error) {\n    console.error(`Error fetching products for category URL key ${urlKey}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get category attributes\n * @returns {Promise} - Returns category attributes\n */\nexport const getCategoryAttributes = async () => {\n  // For public API, we'll return a simplified set of attributes\n  // since customAttributeMetadata might require authentication\n  return {\n    items: [\n      { attribute_code: \"url_key\", entity_type: \"catalog_category\" },\n      { attribute_code: \"description\", entity_type: \"catalog_category\" },\n      { attribute_code: \"image\", entity_type: \"catalog_category\" },\n      { attribute_code: \"meta_title\", entity_type: \"catalog_category\" },\n      { attribute_code: \"meta_keywords\", entity_type: \"catalog_category\" },\n      { attribute_code: \"meta_description\", entity_type: \"catalog_category\" }\n    ]\n  };\n};\n\n/**\n * Get child categories of a parent category\n * @param {number} parentId - Parent category ID\n * @returns {Promise} - Returns child categories\n */\nexport const getChildCategories = async (parentId) => {\n  return getCachedData(\n    CACHE_KEYS.CATEGORY_CHILDREN(parentId),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetChildCategories($parentId: String!) {\n              categories(filters: { parent_id: { eq: $parentId } }) {\n                items {\n                  ...CategoryFields\n                }\n              }\n            }\n            ${CATEGORY_FRAGMENT}\n          `,\n          variables: { parentId: String(parentId) },\n          fetchPolicy: 'network-only'\n        });\n        \n        if (!data.categories || !data.categories.items) {\n          return { items: [] };\n        }\n        \n        // Convert GraphQL response to match REST API format\n        return {\n          items: data.categories.items.map(child => ({\n            id: child.id,\n            parent_id: parentId,\n            name: child.name,\n            is_active: true,\n            level: child.level,\n            path: child.path,\n            url_key: child.url_key,\n            children_count: child.children_count || 0,\n            image: child.image,\n            description: child.description\n          }))\n        };\n      } catch (error) {\n        console.error(`Error fetching child categories for parent ${parentId}:`, error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Get category path (breadcrumbs)\n * @param {number} categoryId - Category ID\n * @returns {Promise} - Returns category path\n */\nexport const getCategoryPath = async (categoryId) => {\n  try {\n    const { data } = await apolloClient.query({\n      query: gql`\n        query GetCategoryPath($categoryId: String!) {\n          categories(filters: { ids: { eq: $categoryId } }) {\n            items {\n              id\n              name\n              url_key\n              level\n              path\n              breadcrumbs {\n                category_id\n                category_name\n                category_url_key\n                category_level\n              }\n            }\n          }\n        }\n      `,\n      variables: { categoryId: String(categoryId) },\n      fetchPolicy: 'network-only'\n    });\n    \n    if (!data.categories || !data.categories.items || data.categories.items.length === 0) {\n      throw new Error(`Category with ID ${categoryId} not found`);\n    }\n    \n    const category = data.categories.items[0];\n    \n    if (!category.breadcrumbs || category.breadcrumbs.length === 0) {\n      return [{\n        id: category.id,\n        name: category.name,\n        url_key: category.url_key,\n        level: category.level\n      }];\n    }\n    \n    // GraphQL already provides breadcrumbs, so we can use them directly\n    const pathCategories = category.breadcrumbs.map(crumb => ({\n      id: crumb.category_id,\n      name: crumb.category_name,\n      url_key: crumb.category_url_key,\n      level: crumb.category_level\n    }));\n    \n    // Add the current category to the end\n    pathCategories.push({\n      id: category.id,\n      name: category.name,\n      url_key: category.url_key,\n      level: category.level\n    });\n    \n    return pathCategories;\n  } catch (error) {\n    console.error(`Error fetching category path for ${categoryId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get featured categories\n * @param {number} limit - Maximum number of categories to return\n * @returns {Promise} - Returns featured categories\n */\nexport const getFeaturedCategories = async (limit = 10) => {\n  return getCachedData(\n    CACHE_KEYS.FEATURED_CATEGORIES(limit),\n    async () => {\n      try {\n        // For public API, we'll get categories with images as \"featured\"\n        // since is_anchor filter might not be available without admin access\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetFeaturedCategories {\n              categories(filters: { level: { gt: \"1\" } }) {\n                items {\n                  id\n                  name\n                  url_key\n                  level\n                  path\n                  image\n                  children_count\n                  description\n                }\n              }\n            }\n          `,\n          fetchPolicy: 'network-only'\n        });\n        \n        if (!data.categories || !data.categories.items) {\n          return { items: [] };\n        }\n        \n        // Filter to categories with images and limit the results\n        const featuredCategories = data.categories.items\n          .filter(category => category.image)\n          .slice(0, limit);\n        \n        // Convert GraphQL response to match REST API format\n        return {\n          items: featuredCategories.map(category => ({\n            id: category.id,\n            name: category.name,\n            url_key: category.url_key,\n            level: category.level,\n            path: category.path,\n            image: category.image,\n            children_count: category.children_count || 0,\n            description: category.description\n          }))\n        };\n      } catch (error) {\n        console.error('Error fetching featured categories:', error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Get category filters (available filters for products in a category)\n * @param {number} categoryId - Category ID\n * @returns {Promise} - Returns available filters\n */\nexport const getCategoryFilters = async (categoryId) => {\n  return getCachedData(\n    CACHE_KEYS.CATEGORY_FILTERS(categoryId),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetCategoryFilters($categoryId: String!) {\n              products(filter: { category_id: { eq: $categoryId } }) {\n                aggregations {\n                  attribute_code\n                  count\n                  label\n                  options {\n                    count\n                    label\n                    value\n                  }\n                }\n              }\n            }\n          `,\n          variables: { categoryId: String(categoryId) },\n          fetchPolicy: 'network-only'\n        });\n        \n        return {\n          layer_filter: data.products.aggregations\n        };\n      } catch (error) {\n        console.error(`Error fetching filters for category ${categoryId}:`, error);\n        throw error;\n      }\n    },\n    { cacheTime: 10 * 60 * 1000 } // 10 minutes cache\n  );\n};\n\n/**\n * Search categories by name\n * @param {string} searchTerm - Search term\n * @param {number} limit - Maximum number of results\n * @returns {Promise} - Returns matching categories\n */\nexport const searchCategories = async (searchTerm, limit = 20) => {\n  // Don't cache search results as they're typically one-time operations\n  try {\n    const { data } = await apolloClient.query({\n      query: gql`\n        query SearchCategories($searchTerm: String!) {\n          categories(filters: { name: { match: $searchTerm } }) {\n            items {\n              id\n              name\n              url_key\n              level\n              path\n              children_count\n              image\n              description\n            }\n          }\n        }\n      `,\n      variables: { searchTerm },\n      fetchPolicy: 'network-only'\n    });\n    \n    if (!data.categories || !data.categories.items) {\n      return { items: [] };\n    }\n    \n    // Filter out root categories (usually ID 1 and 2)\n    const filteredCategories = data.categories.items.filter(category => \n      category.id > 2 && category.level > 1\n    );\n    \n    // Limit the results to the requested number\n    const limitedCategories = filteredCategories.slice(0, limit);\n    \n    // Convert GraphQL response to match REST API format\n    return {\n      items: limitedCategories.map(category => ({\n        id: category.id,\n        name: category.name,\n        url_key: category.url_key,\n        level: category.level,\n        path: category.path,\n        children_count: category.children_count || 0,\n        image: category.image,\n        description: category.description\n      }))\n    };\n  } catch (error) {\n    console.error(`Error searching categories for \"${searchTerm}\":`, error);\n    throw error;\n  }\n};\n\n/**\n * Invalidate category cache\n * @param {string|null} categoryId - Category ID (null to invalidate all category caches)\n */\nexport const invalidateCategoryCache = (categoryId = null) => {\n  if (categoryId) {\n    // Invalidate specific category caches\n    invalidateCache(CACHE_KEYS.CATEGORY_BY_ID(categoryId));\n    invalidateCache(CACHE_KEYS.CATEGORY_CHILDREN(categoryId));\n    invalidateCache(CACHE_KEYS.CATEGORY_FILTERS(categoryId));\n    invalidateCache(CACHE_KEYS.PRODUCTS_BY_CATEGORY(categoryId, {}));\n  } else {\n    // Invalidate all category caches\n    invalidateCache(CACHE_KEYS.ALL_CATEGORIES);\n    invalidateCache(new RegExp(`^category-`));\n    invalidateCache(new RegExp(`^products-category-`));\n  }\n};\n\nconst categoryService = {\n  getAllCategories,\n  getCategoryTree,\n  getCategoryById,\n  getCategoryByUrlKey,\n  getProductsByCategory,\n  getProductsByCategoryUrlKey,\n  getCategoryAttributes,\n  getChildCategories,\n  getCategoryPath,\n  getFeaturedCategories,\n  getCategoryFilters,\n  searchCategories,\n  invalidateCategoryCache\n};\n\nexport default categoryService;\n","import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { getCategoryTree, getCategoryByUrlKey } from '../api/category';\n\n// Create context\nconst CategoryContext = createContext(null);\n\n// Provider component\nexport const CategoryProvider = ({ children }) => {\n  const [categoryTree, setCategoryTree] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n  const [currentCategory, setCurrentCategory] = useState(null);\n\n  // Load category tree\n  const loadCategoryTree = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await getCategoryTree();\n      \n      // With GraphQL, getCategoryTree now returns a single object with the tree structure\n      // instead of an array of categories\n      if (!data) {\n        throw new Error('Could not load category tree');\n      }\n      \n      setCategoryTree(data);\n      setInitialized(true);\n      setLoading(false);\n      return data;\n    } catch (err) {\n      console.error('Error loading category tree:', err);\n      setError('Failed to load categories. Please try again later.');\n      setLoading(false);\n      return null;\n    }\n  }, []);\n\n  // Load category by URL key\n  const loadCategoryByUrlKey = useCallback(async (urlKey) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const category = await getCategoryByUrlKey(urlKey);\n      \n      setCurrentCategory(category);\n      setLoading(false);\n      return category;\n    } catch (err) {\n      console.error('Error loading category by URL key:', err);\n      setError('Failed to load category. Please try again later.');\n      setLoading(false);\n      return null;\n    }\n  }, []);\n\n  // Get category by ID from the tree\n  const getCategoryById = useCallback((id, category = categoryTree) => {\n    if (!category) return null;\n    \n    // Check if the current category matches\n    if (category.id === id || category.category_id === id) {\n      return category;\n    }\n    \n    // Check in children_data (GraphQL structure) or children (old structure)\n    const children = category.children_data || category.children || [];\n    \n    for (const child of children) {\n      const found = getCategoryById(id, child);\n      if (found) return found;\n    }\n    \n    return null;\n  }, [categoryTree]);\n\n  // Get category path (breadcrumbs)\n  const getCategoryPath = useCallback((urlKey, category = categoryTree, path = []) => {\n    if (!category) return [];\n    \n    const newPath = [...path, category];\n    \n    if (category.url_key === urlKey) {\n      return newPath;\n    }\n    \n    // Check in children_data (GraphQL structure) or children (old structure)\n    const children = category.children_data || category.children || [];\n    \n    for (const child of children) {\n      const found = getCategoryPath(urlKey, child, newPath);\n      if (found.length > 0) return found;\n    }\n    \n    return [];\n  }, [categoryTree]);\n\n  // Get subcategories for a given category\n  const getSubcategories = useCallback((categoryId) => {\n    const category = getCategoryById(categoryId);\n    if (!category) return [];\n    \n    // Return children_data (GraphQL structure) or children (old structure)\n    return category.children_data || category.children || [];\n  }, [getCategoryById]);\n\n  // Check if category has children\n  const hasChildren = useCallback((categoryId) => {\n    const category = getCategoryById(categoryId);\n    if (!category) return false;\n    \n    // Check children_count or length of children_data/children\n    if (category.children_count !== undefined) {\n      return category.children_count > 0;\n    }\n    \n    const children = category.children_data || category.children || [];\n    return children.length > 0;\n  }, [getCategoryById]);\n\n  // Get all categories as a flat list\n  const getAllCategories = useCallback(() => {\n    if (!categoryTree) return [];\n    \n    const flattenCategories = (category, result = []) => {\n      if (!category) return result;\n      \n      // Add current category to result\n      result.push(category);\n      \n      // Process children\n      const children = category.children_data || category.children || [];\n      children.forEach(child => flattenCategories(child, result));\n      \n      return result;\n    };\n    \n    return flattenCategories(categoryTree);\n  }, [categoryTree]);\n\n  // Clear error utility function\n  const clearError = useCallback(() => setError(null), []);\n\n  // Context value\n  const value = {\n    categoryTree,\n    loading,\n    error,\n    initialized,\n    currentCategory,\n    loadCategoryTree,\n    loadCategoryByUrlKey,\n    getCategoryById,\n    getCategoryPath,\n    getSubcategories,\n    hasChildren,\n    getAllCategories,\n    clearError\n  };\n\n  return (\n    <CategoryContext.Provider value={value}>\n      {children}\n    </CategoryContext.Provider>\n  );\n};\n\n// Custom hook to use the category context\nexport const useCategory = () => {\n  const context = useContext(CategoryContext);\n  if (!context) {\n    throw new Error('useCategory must be used within a CategoryProvider');\n  }\n  return context;\n};\n\n// Add this export to fix the import error\nexport const useCategoryContext = useCategory;\n\nexport default CategoryContext;\n","import React from \"react\";\n\nfunction Loader() {\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", zIndex: 999 }}>\n      <div\n        className=\"fixed inset-0 z-50 flex items-center justify-center bg-white bg-opacity-80 backdrop-blur-sm\"\n      >\n        <div className=\"flex flex-col items-center\">\n          <div className=\"animate-spin rounded-full h-14 w-14 border-4 border-t-indigo-600 border-b-indigo-600 border-transparent\"></div>\n          <span className=\"mt-4 text-base font-semibold text-gray-700 tracking-wide\">\n            Loading...\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React, { useState, useEffect, useRef, useCallback, memo } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useCategory } from \"../../context/CategoryContext\";\nimport Loader from \"../../utils/Loader\";\nimport { FiChevronRight, FiMenu, FiX, FiPlus, FiMinus } from \"react-icons/fi\";\n\n// Memoized category item component for desktop view\nconst DesktopCategoryItem = memo(({ \n  item, \n  level, \n  parentSlug, \n  activeLevels, \n  handleMouseEnter, \n  handleMouseLeave \n}) => {\n  const getChildren = (item, level) => {\n    if (level === 1) return item.subcategories || [];\n    if (level === 2) return item.children || [];\n    if (level === 3) return item.subchildren || [];\n    if (level === 4) return item.subsubchildren || [];\n    return [];\n  };\n  \n  const hasChild = getChildren(item, level).length > 0;\n  const slugPath = `${item.slug}`;\n  const itemRef = useRef(null);\n  \n  // Calculate position for submenus to prevent overflow\n  const [positionClass, setPositionClass] = useState(\"left-full ml-1\");\n  \n  useEffect(() => {\n    if (itemRef.current && hasChild && activeLevels[level] === item.id) {\n      const rect = itemRef.current.getBoundingClientRect();\n      const windowWidth = window.innerWidth;\n      \n      // If menu would overflow on the right, show it on the left instead\n      if (rect.right + 200 > windowWidth) {\n        setPositionClass(\"right-full mr-1\");\n      } else {\n        setPositionClass(\"left-full ml-1\");\n      }\n    }\n  }, [activeLevels, level, item.id, hasChild]);\n\n  return (\n    <li\n      className=\"group relative\"\n      ref={itemRef}\n      onMouseEnter={() => handleMouseEnter(level, item.id)}\n      onMouseLeave={() => handleMouseLeave(level)}\n    >\n      <Link\n        to={`/category/${slugPath}`}\n        className={`flex items-center justify-between px-4 py-2 text-sm ${\n          level === 1 \n            ? \"font-medium text-gray-800 hover:text-indigo-600\" \n            : \"text-gray-700 hover:bg-indigo-50\"\n        } rounded-md transition-colors duration-200`}\n      >\n        {item.name}\n        {hasChild && (\n          <FiChevronRight className=\"ml-2 text-gray-400 group-hover:text-indigo-500 text-xs\" />\n        )}\n      </Link>\n\n      {/* Submenu */}\n      {hasChild && activeLevels[level] === item.id && (\n        <div className={`absolute top-0 ${positionClass} z-50 animate-fadeIn`}>\n          <ul className=\"bg-white shadow-xl rounded-lg py-2 px-1 min-w-[200px] border border-gray-100\">\n            {getChildren(item, level).map((child) => (\n              <DesktopCategoryItem\n                key={child.id}\n                item={child}\n                level={level + 1}\n                parentSlug={slugPath}\n                activeLevels={activeLevels}\n                handleMouseEnter={handleMouseEnter}\n                handleMouseLeave={handleMouseLeave}\n              />\n            ))}\n          </ul>\n        </div>\n      )}\n    </li>\n  );\n});\n\n// Memoized category item component for mobile view\nconst MobileCategoryItem = memo(({ \n  item, \n  level, \n  parentSlug, \n  expandedCategories, \n  toggleCategory,\n  setMobileMenuOpen\n}) => {\n  const getChildren = (item, level) => {\n    if (level === 1) return item.subcategories || [];\n    if (level === 2) return item.children || [];\n    if (level === 3) return item.subchildren || [];\n    if (level === 4) return item.subsubchildren || [];\n    return [];\n  };\n\n  const itemSlug = `${item.slug}`;\n  const children = getChildren(item, level);\n  const hasChildItems = children && children.length > 0;\n  const isExpanded = expandedCategories[`${level}-${item.id}`];\n  const navigate = useNavigate();\n\n  const handleItemClick = () => {\n    navigate(`/category/${itemSlug}`);\n    setMobileMenuOpen(false);\n   \n  };\n\n  return (\n    <li className=\"border-b border-gray-100 last:border-b-0\">\n      <div className=\"flex items-center justify-between py-3\">\n        <button\n          onClick={handleItemClick}\n          className={`flex-1 text-left ${\n            level === 1 ? \"font-medium text-gray-800\" : \"text-gray-700  sdasasa\"\n          }`}\n        >\n          {item.name}\n        </button>\n        {hasChildItems && (\n          <button\n            className=\"p-2 text-gray-500 hover:text-indigo-600 focus:outline-none transition-colors\"\n            onClick={() => toggleCategory(item.id, level)}\n          >\n            {isExpanded ? <FiMinus size={16} /> : <FiPlus size={16} />}\n          </button>\n        )}\n      </div>\n\n      {hasChildItems && isExpanded && (\n        <div className=\"ml-4 mb-1\">\n          <ul className={`${level > 1 ? \"border-l-2 border-gray-200 pl-4\" : \"\"}`}>\n            {children.map((child) => (\n              <MobileCategoryItem\n                key={child.id}\n                item={child}\n                level={level + 1}\n                parentSlug={itemSlug}\n                expandedCategories={expandedCategories}\n                toggleCategory={toggleCategory}\n                setMobileMenuOpen={setMobileMenuOpen}\n              />\n            ))}\n          </ul>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst Navbar = () => {\n  const [transformedCategories, setTransformedCategories] = useState([]);\n  const { \n    categoryTree, \n    loading, \n    error, \n    initialized,\n    loadCategoryTree \n  } = useCategory();\n  \n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const [activeLevels, setActiveLevels] = useState({});\n  const navRef = useRef(null);\n  const [scrolled, setScrolled] = useState(false);\n  \n  // Track scroll position for shadow effect\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 10);\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  \n  // Transform categories into the required structure\n  const transformCategories = useCallback((categories, level = 1) => {\n    if (!categories) return [];\n    \n    return categories.map((category) => {\n      const transformed = {\n        id: category.id,\n        name: category.name,\n        slug: category.url_key,\n      };\n      const children = category.children_data;\n      if (children && children.length > 0) {\n        const childKey = getChildKey(level);\n        transformed[childKey] = transformCategories(children, level + 1);\n      }\n      return transformed;\n    });\n  }, []);\n  \n  const getChildKey = useCallback((level) => {\n    if (level === 1) return \"subcategories\";\n    if (level === 2) return \"children\";\n    return \"sub\" + \"sub\".repeat(level - 3) + \"children\";\n  }, []);\n\n  useEffect(() => {\n    if (!initialized) {\n      loadCategoryTree();\n    }\n  }, [initialized, loadCategoryTree]);\n\n  useEffect(() => {\n    if (categoryTree && categoryTree.children_data) {\n      const transformed = transformCategories(categoryTree.children_data);\n      setTransformedCategories(transformed);\n    }\n  }, [categoryTree, transformCategories]);\n\n  // Handle click outside to close dropdowns\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (navRef.current && !navRef.current.contains(event.target)) {\n        setActiveLevels({});\n        if (window.innerWidth < 768) {\n          setMobileMenuOpen(false);\n        }\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  // Desktop handlers\n  const handleMouseEnter = useCallback((level, id) => {\n    if (window.innerWidth >= 768) {\n      setActiveLevels((prev) => ({\n        ...prev,\n        [level]: id,\n      }));\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback((level) => {\n    if (window.innerWidth >= 768) {\n      setActiveLevels((prev) => {\n        const newLevels = { ...prev };\n        Object.keys(newLevels)\n          .filter((key) => parseInt(key) >= level)\n          .forEach((key) => delete newLevels[key]);\n        return newLevels;\n      });\n    }\n  }, []);\n\n  // Mobile handlers\n  const toggleMobileMenu = useCallback(() => {\n    setMobileMenuOpen(prev => !prev);\n    setExpandedCategories({});\n  }, []);\n\n  const toggleCategory = useCallback((id, level) => {\n    setExpandedCategories((prev) => {\n      const key = `${level}-${id}`;\n      const newExpanded = { ...prev };\n      \n      if (newExpanded[key]) {\n        // Collapse this category and all its children\n        delete newExpanded[key];\n        Object.keys(newExpanded).forEach(k => {\n          if (k.startsWith(`${level + 1}-`)) delete newExpanded[k];\n        });\n      } else {\n        // Expand this category and collapse siblings\n        newExpanded[key] = true;\n        Object.keys(newExpanded).forEach(k => {\n          if (k.startsWith(`${level}-`) && k !== key) delete newExpanded[k];\n        });\n      }\n      \n      return newExpanded;\n    });\n  }, []);\n\n  return (\n    <nav \n      ref={navRef}\n      className={`sticky top-0 z-50 bg-white ${\n        scrolled ? \"shadow-md\" : \"shadow-sm\"\n      } transition-shadow duration-300`}\n    >\n      <div className=\"container mx-auto px-4\">\n        {/* Mobile menu header */}\n        <div className=\"md:hidden flex justify-between items-center py-3\">\n          <button\n            className=\"text-gray-700 hover:text-indigo-600 focus:outline-none transition-colors\"\n            onClick={toggleMobileMenu}\n            aria-label={mobileMenuOpen ? \"Close menu\" : \"Open menu\"}\n          >\n            {mobileMenuOpen ? <FiX size={24} /> : <FiMenu size={24} />}\n          </button>\n          <span className=\"font-semibold text-lg text-gray-800\">Categories</span>\n          <div className=\"w-6\"></div>\n        </div>\n\n        {/* Loading state */}\n        {loading && (\n          <div className=\"py-4 flex justify-center\">\n            <Loader size=\"md\" />\n          </div>\n        )}\n\n        {/* Error state */}\n        {error && (\n          <div className=\"text-center py-4 text-red-600 bg-red-50 rounded-lg\">\n            Failed to load categories. Please try again.\n          </div>\n        )}\n\n        {/* Mobile menu */}\n        {!loading && !error && mobileMenuOpen && (\n          <div className=\"md:hidden bg-white rounded-lg shadow-inner max-h-[calc(100vh-120px)] overflow-y-auto overscroll-contain\">\n            <ul className=\"p-3\">\n              {transformedCategories.map((item) => (\n                <MobileCategoryItem\n                  key={item.id}\n                  item={item}\n                  level={1}\n                  parentSlug=\"\"\n                  expandedCategories={expandedCategories}\n                  toggleCategory={toggleCategory}\n                  setMobileMenuOpen={setMobileMenuOpen}\n                />\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* Desktop menu */}\n        {!loading && !error && (\n          <ul className=\"hidden md:flex justify-center space-x-1\">\n            {transformedCategories.map((cat) => (\n              <li\n                key={cat.id}\n                className=\"relative\"\n                onMouseEnter={() => handleMouseEnter(1, cat.id)}\n                onMouseLeave={() => handleMouseLeave(1)}\n              >\n                <Link\n                  to={`/category/${cat.slug || cat.id}`}\n                  className={`block px-5 py-4 font-medium text-gray-800 hover:text-indigo-600 ${\n                    activeLevels[1] === cat.id ? \"text-indigo-600\" : \"\"\n                  } transition-colors duration-200`}\n                >\n                  {cat.name}\n                </Link>\n\n                {cat.subcategories?.length > 0 && activeLevels[1] === cat.id && (\n                  <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 z-50\">\n                    <ul className=\"bg-white shadow-xl rounded-lg py-2 px-1 min-w-[200px] border border-gray-100 animate-fadeIn\">\n                      {cat.subcategories.map((subcat) => (\n                        <DesktopCategoryItem\n                          key={subcat.id}\n                          item={subcat}\n                          level={2}\n                          parentSlug={cat.slug || cat.id}\n                          activeLevels={activeLevels}\n                          handleMouseEnter={handleMouseEnter}\n                          handleMouseLeave={handleMouseLeave}\n                        />\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default React.memo(Navbar);","export const AUTH_TOKEN_KEY = \"magentoCustomerToken\";\nexport const USER_INFO_KEY = \"magentoUserInfo\";\nexport const CART_KEY = \"ecommerce_cart\";\n// export const ADMIN_TOKEN_KEY = \"magentoAdminToken\";\nexport const MAGENTO_GUEST_CART_ID = \"magento_guest_cart_id\";\nexport const CART_SESSION_KEY = \"ecommerce_session_cart\";\nexport const GUEST_CART_ID_KEY = \"magento_guest_cart_id\";\n","import axios from \"axios\";\nimport {\n  AUTH_TOKEN_KEY,\n  USER_INFO_KEY,\n  CART_KEY,\n  MAGENTO_GUEST_CART_ID,\n} from \"../constants/storageKeys\";\nimport { invalidateCache } from \"./cacheUtils\";\n\n\n// Create an axios instance with default config for Magento API\nconst VITE_BASE_URL_FOR_GRAPHQL = (import.meta.env.VITE_BASE_URL || '').replace(/\\/$/, ''); // Remove trailing slash if any\nconst GraphQLBASE_URL = `${VITE_BASE_URL_FOR_GRAPHQL}/graphql`; // Append /graphql. Ensures correct endpoint.\nconst GraphQLApi = axios.create({\n  baseURL: GraphQLBASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Add request interceptor to GraphQLApi to include auth token\nGraphQLApi.interceptors.request.use(\n  (config) => {\n    const currentToken = authService.getToken();\n    if (currentToken) {\n      config.headers[\"Authorization\"] = `Bearer ${currentToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Create an axios instance with default config for Magento API\n// Clean up VITE_MAGENTO_API_URL to remove any accidental double slashes in the path\nconst rawMagentoApiUrl = import.meta.env.VITE_MAGENTO_API_URL || '';\nlet cleanedMagentoApiUrl = rawMagentoApiUrl;\nconst protocolSeparator = '://';\nconst protocolEndIndex = rawMagentoApiUrl.indexOf(protocolSeparator);\n\nif (protocolEndIndex > -1) {\n    const protocol = rawMagentoApiUrl.substring(0, protocolEndIndex + protocolSeparator.length);\n    const pathPart = rawMagentoApiUrl.substring(protocolEndIndex + protocolSeparator.length);\n    // Replace multiple slashes with a single slash in the path part\n    cleanedMagentoApiUrl = protocol + pathPart.replace(/\\/\\/+/g, '/');\n} else {\n    // Fallback for URLs without a protocol (less likely for full base URLs)\n    cleanedMagentoApiUrl = rawMagentoApiUrl.replace(/\\/\\/+/g, '/');\n}\nconst BASE_URL = cleanedMagentoApiUrl;\nconst magentoApi = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// For public endpoints that don't require customer authentication\nexport const publicApi = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Cache keys for authentication-related data\nexport const AUTH_CACHE_KEYS = {\n  USER_INFO: \"user-info\",\n};\n\n/**\n * Authentication service for managing user sessions with Magento\n */\nclass AuthService {\n  /**\n   * Create authenticated API instance\n   * @param {string} token - Authentication token\n   * @returns {Object} - Axios instance with auth headers\n   */\n  createAuthenticatedApi(token) {\n    return axios.create({\n      baseURL: BASE_URL,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean} True if user is authenticated\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  /**\n   * Get the authentication token\n   * @returns {string|null} The authentication token or null\n   */\n  getToken() {\n    return localStorage.getItem(AUTH_TOKEN_KEY);\n  }\n\n  /**\n   * Set the authentication token\n   * @param {string} token - The authentication token\n   */\n  setToken(token) {\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    magentoApi.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  /**\n   * Get the current user information\n   * @returns {Object|null} User information or null\n   */\n  getUserInfo() {\n    const userInfo = localStorage.getItem(USER_INFO_KEY);\n    return userInfo ? JSON.parse(userInfo) : null;\n  }\n\n  /**\n   * Set user information in storage\n   * @param {Object} user - User information object\n   */\n  setUserInfo(user) {\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(user));\n  }\n\n  /**\n   * Login user with email and password\n   * @param {string} username - Customer email\n   * @param {string} password - Customer password\n   * @returns {Promise<string>} - Returns token on success\n   */\n  async login(username, password) {\n    try {\n      const response = await magentoApi.post(\"/integration/customer/token\", {\n        username,\n        password,\n      });\n\n      // Store the token in localStorage\n      if (response.data) {\n        this.setToken(response.data);\n\n        // Fetch and store user info\n        await this.fetchAndStoreUserInfo();\n      }\n\n      return response.data;\n    } catch (error) {\n      console.error(\"Login error:\", error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh the authentication token\n   * @returns {Promise<string|null>} - Returns new token or null if refresh fails\n   */\n  async refreshToken() {\n    try {\n      // Get stored user credentials if available\n      const userInfo = this.getUserInfo();\n      \n      if (!userInfo || !userInfo.email) {\n        console.warn(\"Cannot refresh token: No user information available\");\n        return null;\n      }\n      \n      // Currently, we don't have a direct way to refresh customer tokens in Magento\n      // We would need to implement a custom endpoint or use a different approach\n      console.warn(\"Token refresh not implemented for customer tokens\");\n      return null;\n      \n    } catch (error) {\n      console.error(\"Token refresh error:\", error.response?.data || error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Fetch current user info and store it\n   */\n  async fetchAndStoreUserInfo() {\n    try {\n      const userData = await this.getCurrentCustomer();\n      this.setUserInfo(userData);\n      return userData;\n    } catch (error) {\n      console.error(\"Error fetching user info:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new customer in Magento\n   * @param {Object} customerData - Customer registration data\n   * @returns {Promise} - Returns customer data on success\n   */\n  async register(customerData) {\n    try {\n      // Format the customer data according to Magento API requirements\n      const formattedData = {\n        customer: {\n          email: customerData.email,\n          firstname: customerData.firstName,\n          lastname: customerData.lastName,\n          store_id: 1, // Default store view\n          website_id: 1, // Default website\n        },\n        password: customerData.password,\n      };\n\n      const response = await magentoApi.post(\"/customers\", formattedData);\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Registration error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get current customer information\n   * @returns {Promise} - Returns customer data\n   */\n  async getCurrentCustomer() {\n    try {\n      const token = this.getToken();\n\n      if (!token) {\n        throw new Error(\"No authentication token found\");\n      }\n\n      const response = await magentoApi.get(\"/customers/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Get customer error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Logout customer by revoking the token\n   * @param {boolean} [callServer=true] - Whether to call server to invalidate token\n   */\n  async logout(callServer = true) {\n    try {\n      const token = this.getToken();\n\n      if (token && callServer) {\n        await magentoApi.post(\n          \"/customers/logout\",\n          {},\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n      }\n\n      // Properly clear localStorage and sessionStorage\n      localStorage.clear();\n      sessionStorage.clear();\n\n      // Remove Authorization header from axios instance\n      delete magentoApi.defaults.headers.common[\"Authorization\"];\n\n      return true;\n    } catch (error) {\n      console.error(\"Logout error:\", error.response?.data || error.message);\n\n      // Clear specific keys and session on error too\n      localStorage.removeItem(AUTH_TOKEN_KEY);\n      localStorage.removeItem(USER_INFO_KEY);\n      localStorage.removeItem(CART_KEY);\n      localStorage.removeItem(MAGENTO_GUEST_CART_ID);\n      sessionStorage.clear();\n\n      delete magentoApi.defaults.headers.common[\"Authorization\"];\n      return true;\n    }\n  }\n\n  /**\n   * Request password reset for a customer\n   * @param {string} email - Customer email\n   * @returns {Promise}\n   */\n  async requestPasswordReset(email) {\n    try {\n      const response = await magentoApi.put(\"/customers/password\", {\n        email,\n        template: \"email_reset\",\n        websiteId: 1,\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Password reset request error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Reset customer password with reset token\n   * @param {string} email - Customer email\n   * @param {string} resetToken - Password reset token\n   * @param {string} newPassword - New password\n   * @returns {Promise}\n   */\n  async resetPassword(email, resetToken, newPassword) {\n    try {\n      const response = await magentoApi.post(\"/customers/resetPassword\", {\n        email,\n        resetToken,\n        newPassword,\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Password reset error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Update customer information\n   * @param {Object} customerData - Updated customer data\n   * @returns {Promise} - Returns updated customer data\n   */\n  async updateCustomerInfo(customerData) {\n    try {\n      const token = this.getToken();\n     \n\n      if (!token) {\n        throw new Error(\"No authentication token found\");\n      }\n\n      const response = await magentoApi.put(\n        \"/customers/me\",\n        {\n          customer: customerData,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      // Update stored user info\n      this.setUserInfo(response.data);   \n\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Update customer error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Change customer password\n   * @param {string} currentPassword - Current password\n   * @param {string} newPassword - New password\n   * @returns {Promise}\n   */\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const token = this.getToken();\n\n      if (!token) {\n        throw new Error(\"No authentication token found\");\n      }\n\n      const response = await magentoApi.put(\n        \"/customers/me/password\",\n        {\n          currentPassword,\n          newPassword,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      console.error(\n        \"Change password error:\",\n        error.response?.data || error.message\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Set up auth header for all future requests\n   */\n  setupAuthHeader() {\n    const token = this.getToken();\n    if (token) {\n      magentoApi.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n      return true;\n    }\n    return false;\n  }\n}\n\n// Create and export a singleton instance\nconst authService = new AuthService();\n\n// Add request interceptor to handle token refreshing and authentication\nmagentoApi.interceptors.request.use(\n  (config) => {\n    // Check if token exists in localStorage before each request\n    const currentToken = authService.getToken();\n    if (currentToken) {\n      config.headers[\"Authorization\"] = `Bearer ${currentToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle authentication errors\nmagentoApi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    // If the error is due to an expired token (401 Unauthorized)\n    if (error.response && error.response.status === 401) {\n        // Try to refresh the token\n      const originalRequest = error.config;\n      \n      // Prevent infinite refresh loops\n      if (!originalRequest._retry) {\n        originalRequest._retry = true;\n        \n        try {\n          // For customer token refresh - currently not implemented\n          const newToken = await authService.refreshToken();\n          \n          if (newToken) {\n            // Update the request headers with the new token\n            originalRequest.headers[\"Authorization\"] = `Bearer ${newToken}`;\n            \n            // Retry the original request with the new token\n            return magentoApi(originalRequest);\n          }\n        } catch (refreshError) {\n          console.error(\"Token refresh failed:\", refreshError);\n        }\n      }\n      \n      // If we reach here, token refresh failed or was not attempted\n      // You might want to redirect to login page here\n      // window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Initialize auth headers on module import\nauthService.setupAuthHeader();\n\n// Export the singleton instance as default\nexport default authService;\n\n// For backwards compatibility, also export individual functions\nexport const createAuthenticatedApi = (token) =>\n  authService.createAuthenticatedApi(token);\nexport const isAuthenticated = () => authService.isAuthenticated();\nexport const getToken = () => authService.getToken();\nexport const setToken = (token) => authService.setToken(token);\nexport const login = (username, password) =>\n  authService.login(username, password);\nexport const logout = (callServer) => authService.logout(callServer);\nexport const register = (customerData) => authService.register(customerData);\nexport const getCurrentCustomer = () => authService.getCurrentCustomer();\nexport const requestPasswordReset = (email) =>\n  authService.requestPasswordReset(email);\nexport const resetPassword = (email, resetToken, newPassword) =>\n  authService.resetPassword(email, resetToken, newPassword);\nexport const updateCustomerInfo = (customerData) =>\n  authService.updateCustomerInfo(customerData);\nexport const changePassword = (currentPassword, newPassword) =>\n  authService.changePassword(currentPassword, newPassword);\nexport const setupAuthHeader = () => authService.setupAuthHeader();\nexport const refreshToken = () => authService.refreshToken();\n\n// Export the configured axios instances for other API modules\nexport { magentoApi };\nexport { GraphQLApi };\n","import { GraphQLApi } from \"./auth\";\n\n// Global cart data storage\nlet globalCartData = null;\n\n/**\n * Creates a new cart based on user authentication status\n * @returns {Promise<string>} Cart ID\n */\nexport const createCart = async () => {\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    const createCartMutation = `\n      mutation {\n        createEmptyCart\n      }\n    `;\n\n    const response = await api.post(\"\", {\n      query: createCartMutation,\n    });\n\n    const cartId = response.data.data.createEmptyCart;\n\n    // Store the cart ID for guest users in sessionStorage\n    if (!isLoggedIn) {\n      sessionStorage.setItem(\"guest_cart_id\", cartId);\n    }\n\n    return cartId;\n  } catch (error) {\n    console.error(\"Error creating cart:\", error);\n    throw new Error(\"Failed to create cart\");\n  }\n};\n\n/**\n * Create an active cart for logged-in customers\n * @returns {Promise<string>} Cart ID\n */\nexport const createActiveCart = async () => {\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n\n    if (!isLoggedIn) {\n      throw new Error(\"This function is only for logged-in customers\");\n    }\n\n    const api = GraphQLApi;\n\n    const createCartMutation = `\n      mutation {\n        createEmptyCart\n      }\n    `;\n\n    const response = await api.post(\"\", {\n      query: createCartMutation,\n    });\n\n    if (response.data.errors) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    const cartId = response.data.data.createEmptyCart;\n    localStorage.setItem(\"customer_cart_id\", cartId);\n    return cartId;\n  } catch (error) {\n    console.error(\n      \"❌ Error creating active cart:\",\n      error.response?.data || error.message\n    );\n    throw new Error(\"Failed to create active cart\");\n  }\n};\n\n/**\n * Gets the current cart ID, creating one if it doesn't exist\n * @returns {Promise<string>} Cart ID\n */\nconst getOrCreateCartId = async () => {\n  const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n\n  if (isLoggedIn) {\n    const cartId = localStorage.getItem(\"customer_cart_id\");\n    if (cartId) return cartId;\n    return await createActiveCart();\n  } else {\n    const cartId = sessionStorage.getItem(\"guest_cart_id\");\n    if (cartId) return cartId;\n    return await createCart();\n  }\n};\n\n/**\n * Gets the current cart contents\n * @param {string} cartId - Optional cart ID for guest users\n * @returns {Promise<Object>} Cart data\n */\nexport const getCart = async (cartId = null) => {\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n    let response;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n    if (isLoggedIn) {\n      const customerCartQuery = `\n        query {\n          customerCart {\n            id\n            items {\n              id\n              product {\n                id\n                name\n                sku\n                price {\n                  regularPrice {\n                    amount {\n                      value\n                      currency\n                    }\n                  }\n                }\n                small_image {\n                  url\n                }\n              }\n              quantity\n              prices {\n                price {\n                  value\n                  currency\n                }\n                row_total {\n                  value\n                  currency\n                }\n              }\n            }\n            prices {\n              grand_total {\n                value\n                currency\n              }\n              subtotal_including_tax {\n                value\n                currency\n              }\n             \n            }\n          }\n        }\n      `;\n\n      try {\n        response = await api.post(\"\", {\n          query: customerCartQuery,\n        });\n        globalCartData = response.data.data.customerCart;\n      } catch (error) {\n        if (\n          error.response?.data?.errors?.some((e) =>\n            e.message.includes(\"Current customer does not have an active cart\")\n          )\n        ) {\n          // Create a new active cart for the customer\n          await createActiveCart();\n\n          // Try fetching the cart again\n          response = await api.post(\"\", {\n            query: customerCartQuery,\n          });\n\n          globalCartData = response.data.data.customerCart;\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      const guestCartQuery = `\n        query($cartId: String!) {\n          cart(cart_id: $cartId) {\n            id\n            items {\n              id\n              product {\n                id\n                name\n                sku\n                price {\n                  regularPrice {\n                    amount {\n                      value\n                      currency\n                    }\n                  }\n                }\n                image {\n                  url\n                }\n              }\n              quantity\n              prices {\n                price {\n                  value\n                  currency\n                }\n                row_total {\n                  value\n                  currency\n                }\n              }\n            }\n            prices {\n              grand_total {\n                value\n                currency\n              }\n              subtotal_including_tax {\n                value\n                currency\n              }\n              \n            }\n          }\n        }\n      `;\n\n      response = await api.post(\"\", {\n        query: guestCartQuery,\n        variables: { cartId },\n      });\n      globalCartData = response.data.data.cart;\n    }\n\n    // Save to storage for persistence\n    if (isLoggedIn) {\n      localStorage.setItem(\n        \"customer_cart_data\",\n        JSON.stringify(globalCartData)\n      );\n      localStorage.setItem(\"customer_cart_id\", globalCartData.id);\n    } else {\n      sessionStorage.setItem(\"guest_cart_data\", JSON.stringify(globalCartData));\n      sessionStorage.setItem(\"guest_cart_id\", globalCartData.id);\n    }\n\n    return globalCartData;\n  } catch (error) {\n    console.error(\n      \"❌ Error fetching cart:\",\n      error.response?.data || error.message\n    );\n\n    // Try to load from storage if API fails\n    if (!!localStorage.getItem(\"magentoCustomerToken\")) {\n      const storedCart = localStorage.getItem(\"customer_cart_data\");\n      if (storedCart) {\n        return JSON.parse(storedCart);\n      }\n    } else {\n      const storedGuestCart = sessionStorage.getItem(\"guest_cart_data\");\n      if (storedGuestCart) {\n        return JSON.parse(storedGuestCart);\n      }\n    }\n\n    throw new Error(\"Failed to fetch cart\");\n  }\n};\n\n/**\n * Get the globally stored cart data without making an API call\n * @returns {Object|null} - The globally stored cart data or null if not available\n */\nexport const getGlobalCartData = () => {\n  return globalCartData;\n};\n\n/**\n * Adds an item to the cart\n * @param {Object} product - Product to add\n * @param {number} quantity - Quantity to add\n * @param {string} cartId - Optional cart ID for guest users\n * @returns {Promise<Object>} Updated cart data\n */\n/**\n * Adds an item to the cart\n * @param {Object} product - Product to add\n * @param {number} quantity - Quantity to add\n * @param {string} cartId - Optional cart ID for guest users\n * @returns {Promise<Object>} Updated cart data\n */\nexport const addToCart = async (product, quantity = 1, cartId = null) => {\n  try {\n    // Validate product data\n    if (!product) {\n      throw new Error(\"Product is required\");\n    }\n\n    if (!product.sku) {\n      throw new Error(\"Product SKU is required\");\n    }\n\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n\n    // Verify the cart exists before adding items\n    try {\n      await getCart(cartId);\n    } catch (error) {\n      console.warn(\"Cart not found, creating new cart\");\n      cartId = await createCart();\n    }\n\n    const addToCartMutation = isLoggedIn\n      ? `\n      mutation($sku: String!, $quantity: Float!) {\n        addProductsToCart(\n          cartId: \"${cartId}\"\n          cartItems: [\n            {\n              sku: $sku\n              quantity: $quantity\n            }\n          ]\n        ) {\n          cart {\n            id\n            items {\n              id\n              product {\n                name\n                sku\n                image {\n                  url\n                }\n              }\n              quantity\n              prices {\n                price {\n                  value\n                  currency\n                }\n              }\n            }\n          }\n          user_errors {\n            code\n            message\n          }\n        }\n      }\n    `\n      : `\n      mutation($cartId: String!, $sku: String!, $quantity: Float!) {\n        addProductsToCart(\n          cartId: $cartId\n          cartItems: [\n            {\n              sku: $sku\n              quantity: $quantity\n            }\n          ]\n        ) {\n          cart {\n            id\n            items {\n              id\n              product {\n                name\n                sku\n                image {\n                  url\n                }\n              }\n              quantity\n              prices {\n                price {\n                  value\n                  currency\n                }\n              }\n            }\n          }\n          user_errors {\n            code\n            message\n          }\n        }\n      }\n    `;\n\n    const variables = isLoggedIn\n      ? { sku: product.sku, quantity: quantity }\n      : { cartId, sku: product.sku, quantity: quantity };\n\n    const response = await api.post(\"\", {\n      query: addToCartMutation,\n      variables,\n    });\n\n    // Check for GraphQL errors\n    if (response.data.errors) {\n      const errorMessage = response.data.errors[0].message;\n      throw new Error(errorMessage);\n    }\n\n    // Check for user errors\n    if (response.data.data.addProductsToCart.user_errors?.length > 0) {\n      const errorMessage =\n        response.data.data.addProductsToCart.user_errors[0].message;\n      throw new Error(errorMessage);\n    }\n\n    // Refresh cart data after adding item\n    await getCart(cartId);\n\n    return response.data.data.addProductsToCart.cart;\n  } catch (error) {\n    console.error(\"❌ Error adding item to cart:\", error.message);\n\n    let userMessage = \"Failed to add product to cart\";\n    if (error.message.includes(\"Could not find a cart with ID\")) {\n      userMessage = \"Your session expired, please try again\";\n    } else if (error.message.includes(\"Could not find a product with SKU\")) {\n      userMessage = \"This product is no longer available\";\n    } else if (error.message.includes(\"The requested qty is not available\")) {\n      userMessage = \"The requested quantity is not available\";\n    }\n\n    throw new Error(userMessage);\n  }\n};\n\n/**\n * Updates the quantity of an item in the cart\n * @param {string} itemId - Cart item ID\n * @param {number} quantity - New quantity\n * @param {string} cartId - Optional cart ID for guest users\n * @returns {Promise<Object>} Updated cart item\n */\nexport const updateCartItem = async (itemId, quantity, cartId = null) => {\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n\n    const updateCartItemMutation = isLoggedIn\n      ? `\n      mutation($itemId: Int!, $quantity: Float!) {\n        updateCartItems(\n          input: {\n            cart_items: [\n              {\n                cart_item_id: $itemId\n                quantity: $quantity\n              }\n            ]\n          }\n        ) {\n          cart {\n            items {\n              id\n              quantity\n            }\n          }\n        }\n      }\n    `\n      : `\n      mutation($cartId: String!, $itemId: Int!, $quantity: Float!) {\n        updateCartItems(\n          input: {\n            cart_id: $cartId\n            cart_items: [\n              {\n                cart_item_id: $itemId\n                quantity: $quantity\n              }\n            ]\n          }\n        ) {\n          cart {\n            items {\n              id\n              quantity\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = isLoggedIn\n      ? { itemId: parseInt(itemId), quantity: quantity }\n      : { cartId, itemId: parseInt(itemId), quantity: quantity };\n\n    const response = await api.post(\"\", {\n      query: updateCartItemMutation,\n      variables,\n    });\n\n    // Refresh cart data after updating item\n    await getCart(cartId);\n\n    return response.data.data.updateCartItems.cart;\n  } catch (error) {\n    console.error(\"❌ Error updating cart item:\", error);\n    throw new Error(\"Failed to update item quantity\");\n  }\n};\n\n/**\n * Removes an item from the cart\n * @param {string} itemId - Cart item ID\n * @param {string} cartId - Optional cart ID for guest users\n * @returns {Promise<boolean>} Success status\n */\nexport const removeFromCart = async (itemId, cartId = null) => {\n  if (!itemId) {\n    throw new Error(\"Item ID is required to remove an item from the cart\");\n  }\n  if (isNaN(parseInt(itemId))) {\n    throw new Error(\"Invalid item ID format\");\n  }\n  if (parseInt(itemId) <= 0) {\n    throw new Error(\"Item ID must be a positive integer\");\n  }\n\n  if (!cartId) {\n    console.log(\"No cart ID provided, will create or get existing cart\");\n  }\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n\n    // The mutation now consistently requires cartId and itemId for both logged-in and guest users.\n    // The distinction for logged-in vs guest is typically handled by Magento based on the customer token in the header.\n    const removeFromCartMutation = `\n      mutation($cartId: String!, $itemId: Int!) {\n        removeItemFromCart(\n          input: {\n            cart_id: $cartId\n            cart_item_id: $itemId\n          }\n        ) {\n          cart {\n            id # It's good practice to fetch the cart ID back\n            items {\n              id\n            }\n            # Consider fetching other relevant cart details if needed after removal\n          }\n        }\n      }\n    `;\n\n    // Variables will now always include cartId and itemId.\n    // The cartId is ensured to be present by the getOrCreateCartId call earlier.\n    const variables = { cartId, itemId: parseInt(itemId) };\n\n    await api.post(\"\", {\n      query: removeFromCartMutation,\n      variables,\n    });\n\n    // Refresh cart data after removing item\n    await getCart(cartId);\n\n    return true;\n  } catch (error) {\n    console.error(\"❌ Error removing item from cart:\", error);\n    throw new Error(\"Failed to remove item from cart\");\n  }\n};\n\n/**\n * Gets current customer information\n * @returns {Promise<Object>} Customer data\n */\nexport const getCustomerInfo = async () => {\n  try {\n    const api = GraphQLApi;\n    const customerQuery = `\n      query {\n        customer {\n          firstname\n          lastname\n          email\n          addresses {\n            id\n            firstname\n            lastname\n            street\n            city\n            region {\n              region_code\n              region\n            }\n            postcode\n            country_code\n            telephone\n            default_shipping\n            default_billing\n          }\n        }\n      }\n    `;\n\n    const response = await api.post(\"\", {\n      query: customerQuery,\n    });\n\n    return response.data.data.customer;\n  } catch (error) {\n    console.error(\"Error fetching customer info:\", error);\n    throw new Error(\"Failed to fetch customer information\");\n  }\n};\n\n/**\n * Merges guest cart with customer cart after login\n * @param {string} guestCartId - Guest cart ID to merge\n * @returns {Promise<string>} New cart ID\n */\nexport const mergeGuestCart = async (guestCartId) => {\n  try {\n    const api = GraphQLApi;\n    const mergeCarts = `\n      mutation($guestCartId: String!) {\n        mergeCarts(\n          source_cart_id: $guestCartId\n          destination_cart_id: null\n        ) {\n          id\n          items {\n            id\n            product {\n              name\n            }\n            quantity\n          }\n        }\n      }\n    `;\n\n    const response = await api.post(\"\", {\n      query: mergeCarts,\n      variables: {\n        guestCartId: guestCartId,\n      },\n    });\n\n    // Refresh cart data after merging\n    await getCart();\n\n    return response.data.data.mergeCarts.id;\n  } catch (error) {\n    console.error(\"❌ Error merging carts:\", error);\n    throw new Error(\"Failed to merge guest cart with customer cart\");\n  }\n};\n\n/**\n * Apply coupon to cart\n * @param {string} couponCode - Coupon code\n * @param {string|null} cartId - Optional cart ID for guest users\n * @returns {Promise<boolean>} - Success status\n */\nexport const applyCoupon = async (couponCode, cartId = null) => {\n  try {\n    if (!couponCode) {\n      throw new Error(\"Coupon code is required\");\n    }\n\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n    if (!cartId) {\n      throw new Error(\"Cart ID is required to apply a coupon\");\n    }\n\n    // Enhanced mutation to fetch more details after coupon application\n    const applyCouponMutation = `\n      mutation ApplyCoupon($cartId: String!, $couponCode: String!) {\n        applyCouponToCart(input: { cart_id: $cartId, coupon_code: $couponCode }) {\n          cart {\n            applied_coupons {\n              code\n            }\n            prices {\n              grand_total {\n                value\n                currency\n              }\n              subtotal_with_discount_excluding_tax {\n                value\n                currency\n              }\n              discounts {\n                amount {\n                  value\n                  currency\n                }\n                label\n              }\n              applied_taxes {\n                amount {\n                  value\n                  currency\n                }\n                label\n              }\n            }\n            items {\n              id\n              quantity\n              prices {\n                price {\n                  value\n                  currency\n                }\n                row_total {\n                  value\n                  currency\n                }\n                total_item_discount {\n                  value\n                  currency\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    const response = await api.post(\"\", {\n      query: applyCouponMutation,\n      variables: { cartId, couponCode },\n    });\n\n    if (response.data.errors?.length > 0) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    const updatedCart = response.data.data.applyCouponToCart.cart;\n\n    // Update global cart data\n    globalCartData = {\n      ...globalCartData,\n      ...updatedCart,\n    };\n\n    // Update storage based on user status\n    if (isLoggedIn) {\n      localStorage.setItem(\n        \"customer_cart_data\",\n        JSON.stringify(globalCartData)\n      );\n    } else {\n      sessionStorage.setItem(\"guest_cart_data\", JSON.stringify(globalCartData));\n    }\n\n    return {\n      success: true,\n      cart: updatedCart,\n      message: `Coupon \"${couponCode}\" applied successfully`,\n    };\n  } catch (error) {\n    console.error(\"Error applying coupon:\", error);\n\n    return {\n      success: false,\n      message: error.message || \"Failed to apply coupon\",\n      error: error,\n    };\n  }\n};\n\n/**\n * Remove coupon from cart\n * @param {string|null} cartId - Optional cart ID for guest users\n * @returns {Promise<boolean>} - Success status\n */\nexport const removeCoupon = async (cartId = null) => {\n  try {\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n\n    // GraphQL mutation — always send cart_id\n    const removeCouponMutation = `\n      mutation($cartId: String!) {\n        removeCouponFromCart(input: { cart_id: $cartId }) {\n          cart {\n            applied_coupons {\n              code\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = { cartId };\n\n    const response = await api.post(\"\", {\n      query: removeCouponMutation,\n      variables,\n    });\n\n    const updatedCart = response.data.data.removeCouponFromCart.cart;\n    globalCartData = {\n      ...globalCartData,\n      ...updatedCart,\n    };\n    // Update storage based on user status\n    if (localStorage.getItem(\"magentoCustomerToken\")) {\n      localStorage.setItem(\n        \"customer_cart_data\",\n        JSON.stringify(globalCartData)\n      );\n    } else {\n      sessionStorage.setItem(\"guest_cart_data\", JSON.stringify(globalCartData));\n    }\n\n    // Refresh cart data after removing coupon\n    await getCart(cartId);\n\n    return {\n      success: true,\n      cart: updatedCart,\n      message: \"Coupon removed successfully\",\n    };\n  } catch (error) {\n    console.error(\n      \"❌ Error removing coupon:\",\n      error.response?.data || error.message\n    );\n    throw new Error(\"Failed to remove coupon\");\n  }\n};\n\n\n/**\n * Get cart totals\n * @param {string|null} cartId - Optional cart ID for guest users\n * @returns {Promise<Object>} - Cart totals\n */\nexport const getCartTotals = async (cartId = null) => {\n  try {\n    const isLoggedIn = !!localStorage.getItem(\"magentoCustomerToken\");\n    const api = GraphQLApi;\n\n    // Get or create cart ID if not provided\n    if (!cartId) {\n      cartId = await getOrCreateCartId();\n    }\n\n    const cartTotalsQuery = isLoggedIn\n      ? `\n      query {\n        customerCart {\n          prices {\n            grand_total {\n              value\n              currency\n            }\n            subtotal_including_tax {\n              value\n              currency\n            }\n            subtotal_excluding_tax {\n              value\n              currency\n            }\n            discounts {\n              amount {\n                value\n                currency\n              }\n              label\n            }\n            applied_taxes {\n              amount {\n                value\n                currency\n              }\n              label\n            }\n          }\n        }\n      }\n    `\n      : `\n      query($cartId: String!) {\n        cart(cart_id: $cartId) {\n          prices {\n            grand_total {\n              value\n              currency\n            }\n            subtotal_including_tax {\n              value\n              currency\n            }\n            subtotal_excluding_tax {\n              value\n              currency\n            }\n            discounts {\n              amount {\n                value\n                currency\n              }\n              label\n            }\n            applied_taxes {\n              amount {\n                value\n                currency\n              }\n              label\n            }\n          }\n        }\n      }\n    `;\n\n    const variables = isLoggedIn ? {} : { cartId };\n\n    const response = await api.post(\"\", {\n      query: cartTotalsQuery,\n      variables,\n    });\n\n    return isLoggedIn\n      ? response.data.data.customerCart.prices\n      : response.data.data.cart.prices;\n  } catch (error) {\n    console.error(\n      \"❌ Error fetching cart totals:\",\n      error.response?.data || error.message\n    );\n    throw new Error(\"Failed to fetch cart totals\");\n  }\n};\n\nexport default {\n  getCart,\n  getGlobalCartData,\n  createCart,\n  addToCart,\n  updateCartItem,\n  removeFromCart,\n  applyCoupon,\n  removeCoupon,\n  getCartTotals,\n  mergeGuestCart,\n  getCustomerInfo,\n};\n","import {\n  useState,\n  useEffect,\n  useCallback,\n  createContext,\n  useContext,\n} from \"react\";\nimport * as authApi from \"../api/auth\";\nimport axios from \"axios\";\nimport {\n  AUTH_TOKEN_KEY,\n  USER_INFO_KEY,\n  CART_KEY,\n  MAGENTO_GUEST_CART_ID,\n} from \"../constants/storageKeys\";\n\n/**\n * Create the auth context\n */\nconst AuthContext = createContext();\n\n/**\n * Auth provider component\n */\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user on initial mount\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        if (authApi.isAuthenticated()) {\n          const userData = await authApi.getCurrentCustomer();\n          setCurrentUser(userData);\n        }\n      } catch (err) {\n        console.error(\"Failed to load user:\", err);\n        // If token is invalid, clear it\n        if (err.response?.status === 401) {\n          localStorage.removeItem(AUTH_TOKEN_KEY);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n  const isAuthenticated = () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    return !!token;\n  }\n\n  /**\n   * Login user\n   */\n  const login = useCallback(async (email, password) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      await authApi.login(email, password);\n      const userData = await authApi.getCurrentCustomer();\n      setCurrentUser(userData);\n      return userData;\n    } catch (err) {\n      setError(\n        err.response?.data?.message ||\n          \"Login failed. Please check your credentials.\"\n      );\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Register new user\n   */\n  const register = useCallback(async (userData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await authApi.register(userData);\n      // After registration, log the user in\n      await authApi.login(userData.email, userData.password);\n      const customerData = await authApi.getCurrentCustomer();\n      setCurrentUser(customerData);\n      return result;\n    } catch (err) {\n      setError(\n        err.response?.data?.message || \"Registration failed. Please try again.\"\n      );\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Logout user\n   */\n  const logout = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      localStorage.removeItem(AUTH_TOKEN_KEY);\n      setCurrentUser(null);\n    } catch (err) {\n      console.error(\"Logout error:\", err);\n      // Even if API call fails, clear local data\n      localStorage.removeItem(AUTH_TOKEN_KEY);\n      setCurrentUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update name function\n  const updateName = async ({ firstname, lastname, email }) => {\n    try {\n      const result = await authApi.updateCustomerInfo({\n        firstname,\n        lastname,\n        email,\n      });\n\n      if (result) {\n        // Update local user state\n        setCurrentUser((prev) => ({\n          ...prev,\n          firstname,\n          lastname,\n          email,\n        }));\n\n        return { success: true };\n      } else {\n        return {\n          success: false,\n          error: result.error || \"Failed to update name\",\n        };\n      }\n    } catch (err) {\n      console.error(\"Error updating name:\", err);\n      return {\n        success: false,\n        error: err.message || \"An error occurred while updating name\",\n      };\n    }\n  };\n  // Update email function\n  const updateEmail = async (email, firstname, lastname) => {\n    try {\n      const result = await authApi.updateCustomerInfo({\n        email,\n        firstname,\n        lastname,\n      });\n\n      if (result) {\n        // Update local user state\n        setCurrentUser((prev) => ({\n          ...prev,\n          email,\n          firstname,\n          lastname,\n        }));\n\n        return { success: true };\n      } else {\n        return {\n          success: false,\n          error: result.error || \"Failed to update email\",\n        };\n      }\n    } catch (err) {\n      console.error(\"Error updating email:\", err);\n      return {\n        success: false,\n        error: err.message || \"An error occurred while updating email\",\n      };\n    }\n  };\n  // Update password function\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      const result = await authApi.changePassword(currentPassword, newPassword);\n\n      if (result) {\n        return { success: true };\n      } else {\n        return {\n          success: false,\n          error: result.error || \"Failed to update password\",\n        };\n      }\n    } catch (err) {\n      console.error(\"Error updating password:\", err);\n      return {\n        success: false,\n        error: err.message || \"An error occurred while updating password\",\n      };\n    }\n  };\n  /**\n   * Request password reset\n   */\n  const requestPasswordReset = useCallback(async (email) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await authApi.requestPasswordReset(email);\n      return result;\n    } catch (err) {\n      setError(\n        err.response?.data?.message || \"Failed to request password reset.\"\n      );\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Reset password with token\n   */\n  const resetPassword = useCallback(async (email, resetToken, newPassword) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await authApi.resetPassword(\n        email,\n        resetToken,\n        newPassword\n      );\n      return result;\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to reset password.\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Update user profile\n   */\n  const updateProfile = useCallback(async (userData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const updatedUser = await authApi.updateCustomerInfo(userData);\n      setCurrentUser(updatedUser);\n      return updatedUser;\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to update profile.\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Change password\n   */\n  const changePassword = useCallback(async (currentPassword, newPassword) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await authApi.changePassword(currentPassword, newPassword);\n      return result;\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to change password.\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Auth context value\n  const value = {\n    currentUser,\n    loading,\n    error,\n    isAuthenticated,\n    // isAuthenticated: !!currentUser,\n    login,\n    register,\n    logout,\n    requestPasswordReset,\n    resetPassword,\n    updateProfile,\n    changePassword,\n    updateName,\n    updateEmail,\n    updatePassword,\n    clearError: () => setError(null),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n/**\n * Export the useAuth hook\n */\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n","import axios from \"axios\";\nimport { getToken } from \"./auth\";\n\n// GraphQL API URL\nconst VITE_BASE_URL_FOR_GRAPHQL = (import.meta.env.VITE_BASE_URL || '').replace(/\\/$/, ''); // Remove trailing slash if any\n\nconst GRAPHQL_URL = `${VITE_BASE_URL_FOR_GRAPHQL}/graphql`;\n\n// Get all wishlist items for the current user\nexport const getWishlistItems = async () => {\n  const token = getToken();\n\n  if (!token) {\n    return {\n      success: false,\n      message: \"Authentication required\",\n      data: [],\n    };\n  }\n\n  try {\n    const response = await axios.post(\n      GRAPHQL_URL,\n      {\n        query: `\n          query GetWishlist {\n            customer {\n              wishlist {\n                id\n                items_count\n                items {\n                  id\n                  product {\n                    id\n                    name\n                    stock_status\n                    sku\n                    url_key\n                  \n                    price {\n                      regularPrice {\n                        amount {\n                          value\n                          currency\n                        }\n                      }\n                    }\n                    image {\n                      url\n                    }\n                   \n                  }\n                }\n              }\n            }\n          }\n        `,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    // Check for GraphQL errors\n    if (response.data.errors) {\n      console.error(\"GraphQL errors:\", response.data.errors);\n      return {\n        success: false,\n        message:\n          response.data.errors[0].message || \"Failed to fetch wishlist items\",\n        data: [],\n      };\n    }\n    // Transform the data to match the expected format\n    const wishlistItems = response.data.data.customer.wishlist.items.map(\n      (item) => ({\n        _id: item.product.id,\n        wishlistItemId: item.id, // Store the wishlist item ID\n        name: item.product.name,\n        sku: item.product.sku,\n        url_key: item.product.url_key,\n        price: item.product.price?.regularPrice?.amount?.value || 0,\n        images: item.product.image ? [item.product.image.url] : [],\n        stock_status: item.product.stock_status,\n      })\n    );\n\n    return {\n      success: true,\n      data: wishlistItems,\n    };\n  } catch (error) {\n    console.error(\"Error fetching wishlist:\", error);\n    return {\n      success: false,\n      message:\n        error.response?.data?.message || \"Failed to fetch wishlist items\",\n      data: [],\n    };\n  }\n};\n\n// Add a product to the wishlist\nexport const addToWishlist = async (productId) => {\n  const token = getToken();\n\n  if (!token) {\n    return {\n      success: false,\n      message: \"Authentication required\",\n    };\n  }\n\n  try {\n    const response = await axios.post(\n      GRAPHQL_URL,\n      {\n        query: `\n          mutation AddProductToWishlist($productId: String!) {\n            addProductsToWishlist(\n              wishlistId: \"0\" \n              wishlistItems: [\n                {\n                  sku: $productId,\n                  quantity: 1.0\n                }\n              ]\n            ) {\n              wishlist {\n                id\n                items_count\n              }\n              user_errors {\n                code\n                message\n              }\n            }\n          }\n        `,\n        variables: {\n          productId: String(productId),\n        },\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    // Check for GraphQL errors\n    if (response.data.errors) {\n      console.error(\"GraphQL errors:\", response.data.errors);\n      return {\n        success: false,\n        message:\n          response.data.errors[0].message ||\n          \"Failed to add product to wishlist\",\n      };\n    }\n\n    // Check for user errors in the response\n    const userErrors = response.data.data.addProductsToWishlist.user_errors;\n    if (userErrors && userErrors.length > 0) {\n      return {\n        success: false,\n        message: userErrors[0].message || \"Failed to add product to wishlist\",\n      };\n    }\n\n    return {\n      success: true,\n      message: \"Product added to wishlist successfully\",\n      data: response.data.data.addProductsToWishlist.wishlist,\n    };\n  } catch (error) {\n    console.error(\"Error adding to wishlist:\", error);\n    return {\n      success: false,\n      message:\n        error.response?.data?.message || \"Failed to add product to wishlist\",\n    };\n  }\n};\n\n// Remove a product from the wishlist\nexport const removeFromWishlist = async (productId) => {\n  const token = getToken();\n  if (!token) {\n    return {\n      success: false,\n      message: \"Authentication required\",\n    };\n  }\n\n  try {\n    // First, get the wishlist to find the correct wishlist item ID\n    const wishlistResponse = await getWishlistItems();\n    \n    if (!wishlistResponse.success) {\n      return wishlistResponse; // Return the error from getWishlistItems\n    }\n    \n    // Find the wishlist item that corresponds to the product ID\n    const wishlistItem = wishlistResponse.data.find(item => \n      item._id === productId || item.sku === productId\n    );\n    \n    if (!wishlistItem) {\n      console.error(\"Product not found in wishlist:\", productId);\n      return {\n        success: false,\n        message: \"Product not found in wishlist\",\n      };\n    }    \n    const wishlistItemId = wishlistItem.wishlistItemId;\n    // Now remove the item using the correct wishlist item ID\n    const response = await axios.post(\n      GRAPHQL_URL,\n      {\n        query: `\n          mutation RemoveProductFromWishlist($wishlistItemId: ID!) {\n            removeProductsFromWishlist(\n              wishlistId: \"0\"\n              wishlistItemsIds: [$wishlistItemId]\n            ) {\n              wishlist {\n                id\n                items_count\n              }\n              user_errors {\n                code\n                message\n              }\n            }\n          }\n        `,\n        variables: {\n          wishlistItemId: String(wishlistItemId),\n        },\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    // Check for GraphQL errors\n    if (response.data.errors) {\n      console.error(\"GraphQL errors:\", response.data.errors);\n      return {\n        success: false,\n        message:\n          response.data.errors[0].message ||\n          \"Failed to remove product from wishlist\",\n      };\n    }\n\n    // Check for user errors in the response\n    const userErrors =\n      response.data.data.removeProductsFromWishlist.user_errors;\n    if (userErrors && userErrors.length > 0) {\n      return {\n        success: false,\n        message:\n          userErrors[0].message || \"Failed to remove product from wishlist\",\n      };\n    }\n\n    return {\n      success: true,\n      message: \"Product removed from wishlist successfully\",\n      data: response.data.data.removeProductsFromWishlist.wishlist,\n    };\n  } catch (error) {\n    console.error(\"Error removing from wishlist:\", error);\n    \n    // If all else fails, try the SKU method as a fallback\n    return removeFromWishlistBySku(productId);\n  }\n};\n\n// Alternative method to remove from wishlist using SKU\n// This function is kept for backward compatibility but is mainly used as a fallback\nconst removeFromWishlistBySku = async (productId) => {\n  const token = getToken();\n\n  try {\n    const response = await axios.post(\n      GRAPHQL_URL,\n      {\n        query: `\n          mutation RemoveProductFromWishlistBySku($sku: String!) {\n            removeProductsFromWishlist(\n              wishlistId: \"0\"\n              wishlistItemsIds: []\n              skus: [$sku]\n            ) {\n              wishlist {\n                id\n                items_count\n              }\n              user_errors {\n                code\n                message\n              }\n            }\n          }\n        `,\n        variables: {\n          sku: String(productId),\n        },\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    // Check for GraphQL errors\n    if (response.data.errors) {\n      console.error(\"GraphQL errors (SKU method):\", response.data.errors);\n      return {\n        success: false,\n        message:\n          response.data.errors[0].message ||\n          \"Failed to remove product from wishlist\",\n      };\n    }\n\n    // Check for user errors in the response\n    const userErrors =\n      response.data.data.removeProductsFromWishlist.user_errors;\n    if (userErrors && userErrors.length > 0) {\n      return {\n        success: false,\n        message:\n          userErrors[0].message || \"Failed to remove product from wishlist\",\n      };\n    }\n\n    return {\n      success: true,\n      message: \"Product removed from wishlist successfully\",\n      data: response.data.data.removeProductsFromWishlist.wishlist,\n    };\n  } catch (error) {\n    console.error(\"Error removing from wishlist (SKU method):\", error);\n    return {\n      success: false,\n      message:\n        error.response?.data?.message ||\n        \"Failed to remove product from wishlist\",\n    };\n  }\n};\n","import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { isAuthenticated } from \"../api/auth\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport {\n  addToWishlist,\n  removeFromWishlist,\n  getWishlistItems,\n} from \"../api/wishlist\";\nimport { toast } from \"react-toastify\";\n\nconst WishlistContext = createContext();\n\nexport const useWishlist = () => useContext(WishlistContext);\n\nexport const WishlistProvider = ({ children }) => {\n  const [wishlistItems, setWishlistItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { currentUser } = useAuth();\n  // Use currentUser to determine authentication status\n  const user = isAuthenticated();\n  // Fetch wishlist items when user changes\n  useEffect(() => {\n    const fetchItems = async () => {\n      if (user) {\n        await fetchWishlistItems();\n      } else {\n        setWishlistItems([]);\n      }\n    };\n    fetchItems();\n  }, [user]);\n\n  const fetchWishlistItems = async () => {\n    if (!isAuthenticated) return;\n\n    setLoading(true);\n    try {\n      const response = await getWishlistItems();\n      setWishlistItems(response.data || []);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      toast.error(\"Failed to load wishlist items\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addItemToWishlist = async (productId) => {\n    if (!user) {\n      toast.info(\"Please login to add items to wishlist\");\n      return false;\n    }\n\n    setLoading(true);\n    try {\n      const response = await addToWishlist(productId);\n\n      if (response.success) {\n        await fetchWishlistItems(); // Refresh the list\n        toast.success(response.message || \"Product added to wishlist\");\n        return true;\n      }\n      toast.error(response.message || \"Failed to add product to wishlist\");\n      return false;\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      toast.error(\n        error.response?.data?.message || \"Failed to add product to wishlist\"\n      );\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeItemFromWishlist = async (productId) => {\n    if (!user) {\n      toast.info(\"Please login to manage wishlist\");\n      return false;\n    }\n\n    setLoading(true);\n    try {\n      const response = await removeFromWishlist(productId);\n\n      if (response.success) {\n        setWishlistItems((prev) =>\n          prev.filter((item) => item._id !== productId)\n        );\n        toast.success(response.message || \"Product removed from wishlist\");\n        return true;\n      }\n      toast.error(response.message || \"Failed to remove product from wishlist\");\n      return false;\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      toast.error(\n        error.response?.data?.message ||\n          \"Failed to remove product from wishlist\"\n      );\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isInWishlist = (productId) => {\n    return wishlistItems.some((item) => item._id === productId);\n  };\n\n  return (\n    <WishlistContext.Provider\n      value={{\n        wishlistItems,\n        loading,\n        addItemToWishlist,\n        removeItemFromWishlist,\n        isInWishlist,\n        refreshWishlist: fetchWishlistItems,\n      }}\n    >\n      {children}\n    </WishlistContext.Provider>\n  );\n};\n\nexport default WishlistContext;\n","import React, { useState ,useEffect } from \"react\";\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\nimport { useAuth } from \"../../hooks/useAuth\"; // Adjust the import path as necessary\nimport { useCart } from \"../../hooks/useCart\";\nimport { useWishlist } from \"../../context/WishlistContext\";\nimport Swal from \"sweetalert2\";\n\nfunction Loginforms() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [resetPassword, setResetPassword] = useState(false);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { fetchCartData, mergeWithUserCart } = useCart();\n  const { refreshWishlist } = useWishlist();\n  const { login } = useAuth(); // Assuming useAuth provides a login function\n\n  useEffect(() => {\n    // Jab bhi path change ho, check karo\n    const allowedPaths = [\"/login\", \"/account\"];\n    if (allowedPaths.includes(location.pathname)) {\n      setResetPassword(true);\n    } else {\n      setResetPassword(false);\n    }\n  }, [location.pathname]);\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!email.trim()) {\n      newErrors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = \"Email is invalid\";\n    }\n\n    if (!password) {\n      newErrors.password = \"Password is required\";\n    } else if (password.length < 6) {\n      newErrors.password = \"Password must be at least 6 characters\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Perform login\n      await login(email, password);\n\n      // After successful login, update cart and wishlist\n      try {\n        // Merge guest cart with customer cart if exists\n        await mergeWithUserCart();\n\n        // Refresh cart and wishlist data\n        await Promise.all([fetchCartData(), refreshWishlist()]);\n\n        Swal.fire({\n          icon: \"success\",\n          title: \"Login Successful\",\n          text: \"You have been logged in successfully!\",\n          timer: 1500,\n          showConfirmButton: false,\n        }).then(() => {\n          const from = location.state?.from || \"/account\";\n          navigate(from, { replace: true });\n        });\n      } catch (syncError) {\n        console.error(\"Error syncing user data:\", syncError);\n        // Still proceed with navigation even if sync fails\n        const from = location.state?.from || \"/account\";\n        navigate(from, { replace: true });\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      const errorMessage =\n        error.response?.data?.message ||\n        error.message ||\n        \"Invalid email or password. Please try again.\";\n\n      Swal.fire({\n        icon: \"error\",\n        title: \"Login Failed\",\n        text: errorMessage,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label\n          htmlFor=\"email\"\n          className=\"block text-sm font-medium text-gray-700 mb-1\"\n        >\n          Email Address\n        </label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 ${\n            errors.email ? \"border-red-500\" : \"border-gray-300\"\n          }`}\n          placeholder=\"your@email.com\"\n        />\n        {errors.email && (\n          <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>\n        )}\n      </div>\n\n      <div>\n        <label\n          htmlFor=\"password\"\n          className=\"block text-sm font-medium text-gray-700 mb-1\"\n        >\n          Password\n        </label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 ${\n            errors.password ? \"border-red-500\" : \"border-gray-300\"\n          }`}\n          placeholder=\"••••••••\"\n        />\n        {errors.password && (\n          <p className=\"mt-1 text-sm text-red-600\">{errors.password}</p>\n        )}\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <input\n            id=\"remember-me\"\n            name=\"remember-me\"\n            type=\"checkbox\"\n            className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n          />\n          <label\n            htmlFor=\"remember-me\"\n            className=\"ml-2 block text-sm text-gray-700\"\n          >\n            Remember me\n          </label>\n        </div>\n        {resetPassword && (\n          <div className=\"text-sm\">\n            <Link\n              to=\"/resetpassword\"\n              className=\"font-medium text-indigo-600 hover:text-indigo-500\"\n            >\n              Reset Password\n            </Link>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <button\n          type=\"submit\"\n          disabled={loading}\n          className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n        >\n          {loading ? (\n            <span className=\"flex items-center\">\n              <svg\n                className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                ></circle>\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                ></path>\n              </svg>\n              Signing in...\n            </span>\n          ) : (\n            \"Sign in\"\n          )}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default React.memo(Loginforms);\n","import React, { createContext, useState, useContext, useEffect } from \"react\";\nimport authService from \"../api/auth.jsx\";\nimport Swal from \"sweetalert2\";\n// Import GraphQL cart functions\nimport {\n  createCart as apiCreateCart,\n  getCart as apiGetCart,\n  addToCart as apiAddToCart,\n  updateCartItem as apiUpdateCartItem,\n  removeFromCart as apiRemoveFromCart,\n  // getGlobalCartData, // Potentially useful later\n} from \"../api/cart.jsx\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { createRoot } from \"react-dom/client\";\nimport {\n  CART_KEY,\n  CART_SESSION_KEY,\n  GUEST_CART_ID_KEY,\n} from \"../constants/storageKeys\";\n\n// Add item to cart\n\nimport Loginforms from \"../components/forms/Loginforms.jsx\";\n\n// Create context\nconst CartContext = createContext(null);\n// Custom hook to use the cart context\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n\n// Provider component\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState(null);\n  const [cartItems, setCartItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState(false);\n  const [error, setError] = useState(null);\n  const [guestCartId, setGuestCartId] = useState(\n    localStorage.getItem(GUEST_CART_ID_KEY)\n  );\n\n  // Format cart items from GraphQL cart structure\n  const formatCartItems = (gqlCartData) => {\n    if (!gqlCartData || !Array.isArray(gqlCartData.items)) {\n      return [];\n    }\n    return gqlCartData.items.map((item) => {\n      const product = item.product || {};\n      const prices = item.prices || {};\n      const itemPrice = prices.price || {};\n      // Prefer row_total for the displayed price per item if available, else item price\n      const displayPrice = prices.row_total?.value / item.quantity || itemPrice.value || 0;\n\n      return {\n        id: item.id, // GraphQL cart item ID\n        sku: product.sku,\n        name: product.name,\n        price: displayPrice, // Price per unit\n        qty: item.quantity,\n        // Ensure image path is complete if baseMediaUrl is needed, or if URL is absolute\n        image: product.small_image?.url || product.image?.url || \"/placeholder.jpg\",\n        item_id: item.id, // Keep for compatibility if used elsewhere, but 'id' is primary\n        product_id: product.id, // Product entity ID\n        // Add other relevant fields from GraphQL if needed\n        // e.g., configurable_options: item.configurable_options\n      };\n    });\n  };\n\n  // Fetch cart data\n  const fetchCartData = async () => {\n    setLoading(true);\n    setError(null);\n    let currentCartId = guestCartId; // Use state for guestCartId\n\n    try {\n      const isLoggedIn = authService.isAuthenticated();\n      let cartDataResponse;\n\n      if (isLoggedIn) {\n        cartDataResponse = await apiGetCart(); // For logged-in user\n      } else {\n        if (!currentCartId) {\n          currentCartId = await apiCreateCart(); // Create guest cart\n          if (currentCartId) {\n            localStorage.setItem(GUEST_CART_ID_KEY, currentCartId);\n            setGuestCartId(currentCartId); // Update state\n          } else {\n            throw new Error(\"Failed to create guest cart ID.\");\n          }\n        }\n        if (currentCartId) {\n          cartDataResponse = await apiGetCart(currentCartId); // For guest user\n        } else {\n           // Should not happen if createCart was successful\n          console.error(\"Guest cart ID is still null after attempting creation.\");\n          setCartItems([]);\n          setCart({ items: [] });\n          setLoading(false);\n          return;\n        }\n      }\n      \n      if (cartDataResponse) {\n        const formattedItems = formatCartItems(cartDataResponse);\n        setCart(cartDataResponse); // Store the raw GraphQL cart response\n        setCartItems(formattedItems);\n        // Save formatted items to localStorage/sessionStorage for UI consistency or offline fallback\n        // For logged-in users, CART_SESSION_KEY might be used for quick UI updates\n        localStorage.setItem(CART_SESSION_KEY, JSON.stringify(formattedItems));\n      } else {\n        // Handle cases where cartDataResponse might be undefined (e.g., empty cart for new guest)\n        setCartItems([]);\n        setCart({ items: [] });\n         if (!isLoggedIn && !currentCartId) {\n          // If it's a guest and no cart ID could be established, initialize empty.\n          localStorage.removeItem(GUEST_CART_ID_KEY); // Ensure no stale ID\n        }\n      }\n\n    } catch (err) {\n      console.error(\"❌ Error fetching/creating cart with GraphQL:\", err);\n      setError(`Failed to load cart data: ${err.message}. Please try again.`);\n      // Fallback to localStorage if API fails (for UI persistence)\n      const localCartItems = localStorage.getItem(CART_SESSION_KEY);\n      if (localCartItems) {\n        try {\n          const parsedItems = JSON.parse(localCartItems);\n          setCartItems(parsedItems);\n          setCart({ items: parsedItems }); // Simulate cart structure\n        } catch (parseError) {\n          console.error(\"Error parsing local cart items:\", parseError);\n          setCartItems([]);\n          setCart({ items: [] });\n        }\n      } else {\n        setCartItems([]);\n        setCart({ items: [] });\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const addItemToCart = async (productDetails) => { // productDetails expected to have sku, qty\n    setUpdating(true);\n    setError(null);\n    const isLoggedIn = authService.isAuthenticated();\n\n    try {   \n\n      // Use GraphQL API to add item\n      const productInput = { sku: productDetails.sku };\n      const quantityInput = productDetails.qty || 1;\n      await apiAddToCart(productInput, quantityInput, isLoggedIn ? null : guestCartId);\n      \n      await fetchCartData(); // Refresh cart from backend\n\n      return { success: true };\n    } catch (err) {\n      console.error(\"❌ Error adding item to cart with GraphQL:\", err);\n      setError(`Failed to add item to cart: ${err.message}. Please try again.`);\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Remove item from cart\n  const removeItem = async (cartItemId) => { // Expects the GraphQL cart item ID\n    setUpdating(true);\n    setError(null);\n    const isLoggedIn = authService.isAuthenticated();\n\n    try {\n      // Find the item in the local cartItems to ensure it exists before trying to remove\n      // The cartItemId here should be the one from the formatted cart items (item.id from GraphQL)\n      const itemToRemove = cartItems.find(item => item.id === cartItemId);\n\n      if (!itemToRemove) {\n        // If not found in local state, perhaps log or handle, but API might still succeed if ID is valid\n        console.warn(`Item with ID ${cartItemId} not found in local cart state, attempting removal anyway.`);\n      }\n      \n      // Use GraphQL API to remove item\n      // apiRemoveFromCart expects (itemId, cartId)\n      // itemId is the GraphQL cart_item_id\n      const cartIdForApi = isLoggedIn ? (cart ? cart.id : null) : guestCartId;\n      if (!cartIdForApi) {\n        // Log a warning if no cart ID could be determined before calling the API.\n        // The apiRemoveFromCart function has its own fallback for this scenario.\n        console.warn(`No cart ID determined for apiRemoveFromCart (isLoggedIn: ${isLoggedIn}). Fallback logic in apiRemoveFromCart will be invoked.`);\n      }\n      await apiRemoveFromCart(cartItemId, cartIdForApi);\n      \n      await fetchCartData(); // Refresh cart from backend\n\n      return { success: true };\n    } catch (err) {\n      console.error(\"❌ Error removing item from cart with GraphQL:\", err);\n      setError(`Failed to remove item: ${err.message}. Please try again.`);\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Update item quantity\n  const updateItemQuantity = async (cartItemId, qty) => { // Expects GraphQL cart item ID and new quantity\n    setUpdating(true);\n    setError(null);\n    const isLoggedIn = authService.isAuthenticated();\n\n    try {\n      if (qty <= 0) {\n        // If quantity is 0 or less, remove the item instead\n        return removeItem(cartItemId);\n      }\n\n      // Find the item in the local cartItems to ensure it exists before trying to update\n      const itemToUpdate = cartItems.find(item => item.id === cartItemId);\n\n      if (!itemToUpdate) {\n        // If not found in local state, perhaps log or handle\n        console.warn(`Item with ID ${cartItemId} not found in local cart state for update, attempting API call anyway.`);\n      }\n\n      // Use GraphQL API to update item quantity\n      // apiUpdateCartItem expects (itemId, quantity, cartId)\n      // itemId is the GraphQL cart_item_id\n      await apiUpdateCartItem(cartItemId, qty, isLoggedIn ? null : guestCartId);\n      \n      await fetchCartData(); // Refresh cart from backend\n\n      return { success: true };\n    } catch (err) {\n      console.error(\"❌ Error updating item quantity with GraphQL:\", err);\n      setError(`Failed to update quantity: ${err.message}. Please try again.`);\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Calculate cart totals\n  const calculateSubtotal = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.qty, 0);\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.qty, 0);\n  };\n\n  // Check if a product is in the cart\n  const isInCart = (sku) => {\n    return cartItems.find((item) => item.sku === sku) || null;\n  };\n\n  // Clear cart (primarily local, consider if backend clear is needed)\n  const clearCart = async () => {\n    setUpdating(true);\n    setError(null);\n    try {\n      // For a logged-in user, we might want to call a mutation to clear their server-side cart.\n      // For a guest, clearing local/session storage and guestCartId might be enough.\n      // If there's a `clearCustomerCart` or similar mutation, it would be called here.\n      // For now, this focuses on local state and storage.\n      \n      setCartItems([]);\n      setCart(null); // Set cart to null or an empty cart structure\n      localStorage.removeItem(CART_SESSION_KEY); // Clear persisted cart items\n      \n      if (!authService.isAuthenticated()) {\n        localStorage.removeItem(GUEST_CART_ID_KEY); // Clear guest cart ID\n        setGuestCartId(null); // Reset guest cart ID in state\n      }\n      \n      // Optionally, call fetchCartData to ensure consistency if an empty cart is fetched from backend\n      // await fetchCartData();\n      return { success: true };\n    } catch (err) {\n      console.error(\"❌ Error clearing cart:\", err);\n      setError(\"Failed to clear cart. Please try again.\");\n      throw err; // Re-throw to allow UI to handle\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Merge guest cart with user cart after login\n  const mergeWithUserCart = async () => {\n    setUpdating(true);\n    setError(null);\n    try {\n      // Retrieve guest cart items from localStorage (where fetchCartData now saves them)\n      const guestCartItemsString = localStorage.getItem(CART_SESSION_KEY);\n      const localGuestCartId = localStorage.getItem(GUEST_CART_ID_KEY);\n\n      if (guestCartItemsString && authService.isAuthenticated()) {\n        let guestItems = [];\n        try {\n          guestItems = JSON.parse(guestCartItemsString);\n        } catch (parseError) {\n          console.error(\"Error parsing guest cart items for merge:\", parseError);\n          // Potentially clear the corrupted data\n          localStorage.removeItem(CART_SESSION_KEY);\n          localStorage.removeItem(GUEST_CART_ID_KEY);\n          setGuestCartId(null);\n          await fetchCartData(); // Attempt to fetch fresh cart for logged-in user\n          return { success: false, message: \"Failed to parse guest cart for merge.\" };\n        }\n\n        if (Array.isArray(guestItems) && guestItems.length > 0) {\n          for (const item of guestItems) {\n            // Ensure item has sku and qty for addItemToCart\n            if (item.sku && item.qty) {\n              try {\n                // addItemToCart now handles logged-in state internally\n                await addItemToCart({ sku: item.sku, qty: item.qty });\n              } catch (addError) {\n                console.error(\n                  `❌ Error adding guest item SKU ${item.sku} to customer cart:`,\n                  addError.message\n                );\n                // Decide if you want to stop merging or continue with other items\n              }\n            } else {\n              console.warn(\"Skipping guest item due to missing SKU or Qty:\", item);\n            }\n          }\n        }\n        \n        // Clear guest cart data from localStorage and state after attempting merge\n        localStorage.removeItem(CART_SESSION_KEY);\n        localStorage.removeItem(GUEST_CART_ID_KEY);\n        setGuestCartId(null); // Reset guest cart ID in state\n      }\n\n      // Always fetch fresh cart data for the logged-in user after merge attempt\n      await fetchCartData();\n\n      return { success: true };\n    } catch (err) {\n      console.error(\"❌ Error merging carts:\", err);\n      setError(`Failed to merge carts: ${err.message}. Please try again.`);\n      // Fetch cart data even on error to ensure UI reflects current server state\n      await fetchCartData().catch(fetchErr => console.error(\"Error fetching cart after merge failure:\", fetchErr));\n      throw err;\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  // Initialize cart on mount\n  useEffect(() => {\n    fetchCartData();\n\n    // Set up an interval to refresh the cart periodically (every 5 minutes)\n    const refreshInterval = setInterval(() => {\n      if (authService.isAuthenticated()) {\n        fetchCartData();\n      }\n    }, 5 * 60 * 1000); // 5 minutes\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(refreshInterval);\n  }, []);\n\n  // Value to be provided by the context\n  const value = {\n    cart,\n    cartItems,\n    loading,\n    updating,\n    error,\n    fetchCartData,\n    addItemToCart,\n    removeItem,\n    updateItemQuantity,\n    calculateSubtotal,\n    getCartItemCount,\n    isInCart,\n    clearCart,\n    mergeWithUserCart,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport { isAuthenticated } from \"../../api/auth\";\nimport { useCart } from \"../../hooks/useCart\";\nimport { useWishlist } from \"../../context/WishlistContext\";\n\nfunction Header() {\n  const [searchOpen, setSearchOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const searchInputRef = useRef(null);\n  const navigate = useNavigate();\n  const { getCartItemCount } = useCart();\n  const { wishlistItems = [] } = useWishlist();\n\n  // Focus input when search is opened\n  useEffect(() => {\n    if (searchOpen && searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [searchOpen]);\n\n  const handleSearchSubmit = (e) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      navigate(`/search?q=${encodeURIComponent(searchTerm.trim())}`);\n      setSearchOpen(false);\n      setSearchTerm(\"\");\n    }\n  };\n\n  const handleSearchInputChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const closeSearch = () => {\n    setSearchOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <header className=\"bg-white/95 backdrop-blur-md shadow-sm sticky top-0 z-40 border-b border-gray-100\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex justify-between items-center\">\n          {/* Logo */}\n          <Link\n            to=\"/\"\n            className=\"text-2xl font-bold text-indigo-600 hover:text-indigo-700 transition-all duration-300 ease-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500/50 focus:ring-offset-2 rounded-lg px-2 py-1\"\n            aria-label=\"EcoShop Home\"\n          >\n            EcoShop\n          </Link>\n\n          {/* Desktop Search and Icons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <form onSubmit={handleSearchSubmit} className=\"relative flex-1 max-w-md\">\n              <div className=\"relative group\">\n                <input\n                  ref={searchInputRef}\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  className=\"w-full pl-12 pr-12 py-3 border border-gray-200 rounded-2xl text-sm bg-gray-50/50 \n                    transition-all duration-300 ease-out\n                    hover:bg-white hover:border-gray-300 hover:shadow-md\n                    focus:outline-none focus:ring-2 focus:ring-indigo-500/30 focus:border-indigo-400 \n                    focus:bg-white focus:shadow-lg focus:scale-[1.02]\n                    placeholder:text-gray-400\"\n                  value={searchTerm}\n                  onChange={handleSearchInputChange}\n                  aria-label=\"Search products\"\n                />\n                <span className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-hover:text-indigo-500 transition-colors duration-200\">\n                  <i className=\"fas fa-search\"></i>\n                </span>\n                {searchTerm && (\n                  <button\n                    type=\"button\"\n                    onClick={() => setSearchTerm(\"\")}\n                    className=\"absolute right-12 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 \n                      hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-200\n                      focus:outline-none focus:ring-2 focus:ring-red-300\"\n                    aria-label=\"Clear search\"\n                  >\n                    <i className=\"fas fa-times\"></i>\n                  </button>\n                )}\n                <button\n                  type=\"submit\"\n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 \n                    hover:text-indigo-600 hover:bg-indigo-50 rounded-full transition-all duration-200\n                    focus:outline-none focus:ring-2 focus:ring-indigo-300\"\n                  aria-label=\"Submit search\"\n                >\n                  <i className=\"fas fa-arrow-right\"></i>\n                </button>\n              </div>\n\n              {isSearching && (\n                <div className=\"absolute z-50 w-full mt-2 bg-white/95 backdrop-blur-sm border border-gray-100 rounded-2xl shadow-xl py-3 animate-in slide-in-from-top-2 duration-200\">\n                  <div className=\"p-4 text-gray-500 flex items-center space-x-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-indigo-200 border-t-indigo-600 rounded-full\"></div>\n                    <span>Searching...</span>\n                  </div>\n                </div>\n              )}\n            </form>\n\n            <div className=\"flex items-center space-x-2\">\n              <Link\n                to={isAuthenticated() ? \"/account\" : \"/login\"}\n                className=\"p-3 text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 \n                  transition-all duration-200 ease-out transform hover:scale-110\n                  focus:outline-none focus:ring-2 focus:ring-indigo-400/50 focus:ring-offset-2 \n                  rounded-xl relative group\"\n                aria-label={isAuthenticated() ? \"My Account\" : \"Login\"}\n              >\n                <i className=\"fas fa-user text-lg\"></i>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-xl transition-all duration-300\"></div>\n              </Link>\n\n              <Link\n                to=\"/wishlist\"\n                className=\"p-3 text-gray-600 hover:text-red-500 hover:bg-red-50 \n                  transition-all duration-200 ease-out transform hover:scale-110\n                  focus:outline-none focus:ring-2 focus:ring-red-400/50 focus:ring-offset-2 \n                  rounded-xl relative group\"\n                aria-label=\"Wishlist\"\n              >\n                <i className=\"fas fa-heart text-lg\"></i>\n                {wishlistItems.length > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-semibold shadow-lg animate-pulse\">\n                    {wishlistItems.length}\n                  </span>\n                )}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/0 to-pink-500/0 group-hover:from-red-500/10 group-hover:to-pink-500/10 rounded-xl transition-all duration-300\"></div>\n              </Link>\n\n              <Link\n                to=\"/cart\"\n                className=\"p-3 text-gray-600 hover:text-green-600 hover:bg-green-50 \n                  transition-all duration-200 ease-out transform hover:scale-110\n                  focus:outline-none focus:ring-2 focus:ring-green-400/50 focus:ring-offset-2 \n                  rounded-xl relative group\"\n                aria-label=\"Shopping Cart\"\n              >\n                <i className=\"fas fa-shopping-cart text-lg\"></i>\n                {getCartItemCount() > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-semibold shadow-lg animate-bounce\">\n                    {getCartItemCount()}\n                  </span>\n                )}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 to-emerald-500/0 group-hover:from-green-500/10 group-hover:to-emerald-500/10 rounded-xl transition-all duration-300\"></div>\n              </Link>\n            </div>\n          </div>\n\n          {/* Mobile Icons */}\n          <div className=\"flex md:hidden items-center space-x-2\">\n            <button\n              onClick={() => setSearchOpen(!searchOpen)}\n              className=\"p-3 text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 \n                transition-all duration-200 ease-out transform hover:scale-110 active:scale-95\n                focus:outline-none focus:ring-2 focus:ring-indigo-400/50 focus:ring-offset-2 \n                rounded-xl relative group\"\n              aria-label=\"Search\"\n            >\n              <i className={`fas ${searchOpen ? \"fa-times\" : \"fa-search\"} text-lg transition-transform duration-200 ${searchOpen ? \"rotate-90\" : \"\"}`}></i>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-xl transition-all duration-300\"></div>\n            </button>\n\n            <Link\n              to={isAuthenticated() ? \"/account\" : \"/login\"}\n              className=\"p-3 text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 \n                transition-all duration-200 ease-out transform hover:scale-110 active:scale-95\n                focus:outline-none focus:ring-2 focus:ring-indigo-400/50 focus:ring-offset-2 \n                rounded-xl relative group\"\n              aria-label={isAuthenticated() ? \"My Account\" : \"Login\"}\n            >\n              <i className=\"fas fa-user text-lg\"></i>\n            </Link>\n\n            <Link\n              to=\"/wishlist\"\n              className=\"p-3 text-gray-600 hover:text-red-500 hover:bg-red-50 \n                transition-all duration-200 ease-out transform hover:scale-110 active:scale-95\n                focus:outline-none focus:ring-2 focus:ring-red-400/50 focus:ring-offset-2 \n                rounded-xl relative group\"\n              aria-label=\"Wishlist\"\n            >\n              <i className=\"fas fa-heart text-lg\"></i>\n              {wishlistItems.length > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-semibold shadow-lg animate-pulse\">\n                  {wishlistItems.length}\n                </span>\n              )}\n            </Link>\n\n            <Link\n              to=\"/cart\"\n              className=\"p-3 text-gray-600 hover:text-green-600 hover:bg-green-50 \n                transition-all duration-200 ease-out transform hover:scale-110 active:scale-95\n                focus:outline-none focus:ring-2 focus:ring-green-400/50 focus:ring-offset-2 \n                rounded-xl relative group\"\n              aria-label=\"Shopping Cart\"\n            >\n              <i className=\"fas fa-shopping-cart text-lg\"></i>\n              {getCartItemCount() > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-semibold shadow-lg animate-bounce\">\n                  {getCartItemCount()}\n                </span>\n              )}\n            </Link>\n          </div>\n        </div>\n\n        {/* Mobile Search - Expandable */}\n        {searchOpen && (\n          <div className=\"mt-4 md:hidden animate-in slide-in-from-top-2 duration-300\">\n            <form onSubmit={handleSearchSubmit} className=\"relative group\">\n              <input\n                ref={searchInputRef}\n                type=\"text\"\n                placeholder=\"Search products...\"\n                className=\"w-full pl-12 pr-12 py-3 border border-gray-200 rounded-2xl text-sm bg-gray-50/50 \n                  transition-all duration-300 ease-out\n                  hover:bg-white hover:border-gray-300 hover:shadow-md\n                  focus:outline-none focus:ring-2 focus:ring-indigo-500/30 focus:border-indigo-400 \n                  focus:bg-white focus:shadow-lg\n                  placeholder:text-gray-400\"\n                value={searchTerm}\n                onChange={handleSearchInputChange}\n                autoFocus\n                aria-label=\"Search products\"\n              />\n              <span className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-hover:text-indigo-500 transition-colors duration-200\">\n                <i className=\"fas fa-search\"></i>\n              </span>\n              {searchTerm && (\n                <button\n                  type=\"button\"\n                  onClick={() => setSearchTerm(\"\")}\n                  className=\"absolute right-12 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 \n                    hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-200\n                    focus:outline-none focus:ring-2 focus:ring-red-300\"\n                  aria-label=\"Clear search\"\n                >\n                  <i className=\"fas fa-times\"></i>\n                </button>\n              )}\n              <button\n                type=\"button\"\n                onClick={closeSearch}\n                className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 \n                  hover:text-gray-600 hover:bg-gray-100 rounded-full transition-all duration-200\n                  focus:outline-none focus:ring-2 focus:ring-gray-300\"\n                aria-label=\"Close search\"\n              >\n                <i className=\"fas fa-times\"></i>\n              </button>\n\n              {isSearching && (\n                <div className=\"absolute z-50 w-full mt-2 bg-white/95 backdrop-blur-sm border border-gray-100 rounded-2xl shadow-xl py-3 animate-in slide-in-from-top-2 duration-200\">\n                  <div className=\"p-4 text-gray-500 flex items-center space-x-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-indigo-200 border-t-indigo-600 rounded-full\"></div>\n                    <span>Searching...</span>\n                  </div>\n                </div>\n              )}\n            </form>\n          </div>\n        )}\n      </div>\n\n      {/* Navigation */}\n      <Navbar />\n    </header>\n  );\n}\n\nexport default React.memo(Header);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer = () => {\n  return (\n    \n    <footer className=\"bg-gray-900 text-white pt-12 pb-6\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <h3 className=\"text-xl font-bold mb-4\">EcoShop</h3>\n            <p className=\"text-gray-400 mb-4\">Your one-stop shop for all your needs.</p>\n            <div className=\"flex space-x-4\">\n              <a href=\"https://www.facebook.com/letscms/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"w-6 h-6 inline-flex justify-center items-center text-gray-400 hover:text-white\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"https://x.com/letscms\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"w-6 h-6 inline-flex justify-center items-center text-gray-400 hover:text-white\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"https://www.instagram.com/letscms/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"w-6 h-6 inline-flex justify-center items-center text-gray-400 hover:text-white\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"https://api.whatsapp.com/send?phone=919717478599\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"w-6 h-6 inline-flex justify-center items-center text-gray-400 hover:text-white\">\n                <i className=\"fab fa-whatsapp\"></i>\n              </a>\n            </div>\n          </div>\n          <div></div>\n          <div>\n            <h4 className=\"font-bold mb-4\">Customer Service</h4>\n            <ul className=\"space-y-2\">\n              <li><Link to={'/contact'} className=\"text-gray-400 hover:text-white\">Contact Us</Link></li>\n              <li><Link to={'/faq'} className=\"text-gray-400 hover:text-white\">FAQs</Link></li>\n              <li><Link to={'/shipping-returns'} className=\"text-gray-400 hover:text-white\">Shipping & Returns</Link></li>\n              <li><Link to={'/privacy-policy'} className=\"text-gray-400 hover:text-white\">Privacy Policy</Link></li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-bold mb-4\">Contact</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li><i className=\"fas fa-map-marker-alt mr-2\"></i> 1/19. First Floor. In-front of Central Bank. Naurangabad, G T Road, Aligarh 202001, India.</li>\n              <li><i className=\"fas fa-phone mr-2\"></i> +91 9717478599</li>\n              <li><i className=\"fas fa-envelope mr-2\"></i> info@letscms.com</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-800 pt-6 flex flex-col md:flex-row justify-between items-center text-center\">\n          <p className=\"text-gray-400 text-sm\">&copy; 2025 EcoShop. All rights reserved.</p>\n          <div className=\"mt-4 md:mt-0\">\n            {/* Add payment icons here with fixed sizes */}\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default React.memo(Footer);\n","import React, { memo } from 'react';\n\nconst LoadingSpinner = ({ size = 'large', color = 'indigo' }) => {\n  const sizeClasses = {\n    small: 'h-6 w-6',\n    medium: 'h-12 w-12',\n    large: 'h-16 w-16'\n  };\n\n  const colorClasses = {\n    indigo: 'border-indigo-500',\n    blue: 'border-blue-500',\n    red: 'border-red-500',\n    green: 'border-green-500',\n    gray: 'border-gray-500'\n  };\n\n  const spinnerSize = sizeClasses[size] || sizeClasses.medium;\n  const spinnerColor = colorClasses[color] || colorClasses.indigo;\n\n  return (\n    <div className={`animate-spin rounded-full ${spinnerSize} border-t-2 border-b-2 ${spinnerColor}`}></div>\n  );\n};\n\nconst FullScreenLoader = ({ size, color }) => {\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center bg-white bg-opacity-70 backdrop-blur-sm z-50\">\n      <LoadingSpinner size={size} color={color} />\n    </div>\n  );\n};\n\nexport default memo(FullScreenLoader);\n","import { GraphQLApi } from './auth';\nimport { gql } from '@apollo/client';\nimport { apolloClient } from './apolloClient';\n\n// GraphQL query fragments for reuse\nconst ORDER_FRAGMENT = `\n  fragment OrderDetails on CustomerOrder {\n    id\n    order_number\n    created_at\n    grand_total\n    status\n    shipping_address {\n      firstname\n      lastname\n      street\n      city\n      region\n      postcode\n      telephone\n      country_code\n    }\n    billing_address {\n      firstname\n      lastname\n      street\n      city\n      region\n      postcode\n      telephone\n      country_code\n    }\n     \n     shipping_method\n    payment_methods {\n      name\n      type\n      additional_data {\n        name\n        value\n      }\n    }\n    total {\n      subtotal {\n        value\n        currency\n      }\n      total_shipping {\n        value\n        currency\n      }\n      total_tax {\n        value\n        currency\n      }\n      discounts {\n        amount {\n          value\n          currency\n        }\n        label\n      }\n    }\n     items {\n      id\n      # Fetch product details including image via the nested 'product' object\n      product {\n        name\n        sku\n        url_key # Corrected: 'urk_key' to 'url_key'\n        small_image {\n          url\n          label # It's good practice to get the label too\n        }\n      }\n      # Removed redundant fields, as they are now under 'product'\n      # product_name # Removed\n      # product_sku # Removed\n      # product_url_key # Removed\n\n      product_sale_price {\n        value\n        currency\n      }\n      quantity_ordered\n      product_type\n    }\n  }\n`;\n\n/**\n * Fetch all orders for the current customer from Magento using GraphQL\n * @returns {Promise<Array>} Array of customer orders\n */\nexport const getAllOrders = async () => {\n  try {\n    const query = `\n      ${ORDER_FRAGMENT}\n      query GetCustomerOrders {\n        customer {\n          orders {\n            items {\n              ...OrderDetails\n            }\n            total_count\n          }\n        }\n      }\n    `;\n\n    const response = await GraphQLApi.post('/graphql', {\n      query\n    });\n    if (response.data.errors) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    const items = response.data.data.customer?.orders?.items || [];\n    let total_count = response.data.data.customer?.orders?.total_count || 0;\n\n    // If API returns total_count as 0 but items are present, use items.length\n    if (total_count === 0 && items.length > 0) {\n      total_count = items.length;\n    }\n\n    return {\n      items: items,\n      total_count: total_count\n    };\n  } catch (error) {\n    console.error('Error fetching customer orders:', error);\n    return {\n      items: [],\n      total_count: 0,\n      error: error.message || 'Failed to fetch orders'\n    };\n  }\n};\n\n/**\n * Fetch a specific order by ID for the current customer\n * @param {string} orderId - The order ID to fetch\n * @returns {Promise<Object|null>} Order object or null if not found\n */\nexport const getOrderById = async (order_number) => {\n  if (!order_number) {\n    console.error('Order ID is required to fetch order details');\n    return null;\n  }\n\n  try {\n    const query = `\n      ${ORDER_FRAGMENT}\n      query GetCustomerOrders {\n        customer {\n          orders {\n            items {\n              ...OrderDetails\n            }\n          }\n        }\n      }\n    `;\n\n    const response = await GraphQLApi.post('/graphql', { query });\n    if (response.data.errors) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    const orders = response.data.data.customer?.orders?.items || [];\n    const specificOrder = orders.find(order => order.order_number === String(order_number));\n    return specificOrder;\n  } catch (error) {\n    console.error(`Error fetching order #${order_number}:`, error);\n    return null;\n  }\n};\n\n/**\n * Fetch customer orders with pagination\n * @param {number} currentPage - Page number (default: 1)\n * @param {number} pageSize - Number of orders per page (default: 20)\n * @returns {Promise<Object>} Object with orders and pagination info\n */\nexport const getCustomerOrdersWithPagination = async (currentPage = 1, pageSize = 20) => {\n  try {\n    const query = `\n      ${ORDER_FRAGMENT}\n      query GetCustomerOrdersWithPagination($currentPage: Int!, $pageSize: Int!) {\n        customer {\n          orders(\n            currentPage: $currentPage\n            pageSize: $pageSize\n          ) {\n            items {\n              ...OrderDetails\n            }\n            total_count\n            page_info {\n              current_page\n              page_size\n              total_pages\n            }\n          }\n        }\n      }\n    `;\n\n    const response = await GraphQLApi.post('/graphql', {\n      query,\n      variables: { currentPage, pageSize }\n    });\n\n    if (response.data.errors) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    return {\n      items: response.data.data.customer?.orders?.items || [],\n      total_count: response.data.data.customer?.orders?.total_count || 0,\n      page_info: response.data.data.customer?.orders?.page_info || {\n        current_page: currentPage,\n        page_size: pageSize,\n        total_pages: 1\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching paginated customer orders:', error);\n    return {\n      items: [],\n      total_count: 0,\n      page_info: {\n        current_page: currentPage,\n        page_size: pageSize,\n        total_pages: 1\n      },\n      error: error.message || 'Failed to fetch orders'\n    };\n  }\n};\n\n/**\n * Fetch recent orders for the current customer\n * @param {number} limit - Maximum number of orders to return (default: 5)\n * @returns {Promise<Array>} Array of recent order objects\n */\nexport const getRecentOrders = async (limit = 5) => {\n  try {\n    const query = `\n  ${ORDER_FRAGMENT}\n  query GetRecentCustomerOrders($pageSize: Int!) {\n    customer {\n      orders(\n        pageSize: $pageSize\n        sort: { sort_field: CREATED_AT, sort_direction: DESC }\n      ) {\n        items {\n          ...OrderDetails\n          id\n        }\n      }\n    }\n  }\n`;\n\n    const response = await GraphQLApi.post('/graphql', {\n      query,\n      variables: { pageSize: limit }\n    });\n\n\n    if (response.data.errors) {\n      throw new Error(response.data.errors[0].message);\n    }\n\n    return response.data.data.customer?.orders?.items || [];\n  } catch (error) {\n    console.error('Error fetching recent customer orders:', error);\n    return [];\n  }\n};\n\nexport default {\n  getAllOrders,\n  getOrderById,\n  getCustomerOrdersWithPagination,\n  getRecentOrders\n};","/**\n * Format a number as a price with currency symbol\n * @param {number} amount - The amount to format\n * @param {string} currencyCode - The currency code (default: USD)\n * @param {string} locale - The locale to use for formatting (default: en-US)\n * @returns {string} Formatted price string\n */\nexport const formatPrice = (amount, currencyCode = 'USD', locale = 'en-US') => {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currencyCode,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\n * Format a date string\n * @param {string|Date} dateString - The date to format\n * @param {string} locale - The locale to use for formatting (default: en-US)\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString, locale = 'en-US') => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat(locale, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(date);\n};\n\n/**\n * Truncate text to a specified length\n * @param {string} text - The text to truncate\n * @param {number} maxLength - Maximum length before truncation\n * @returns {string} Truncated text\n */\nexport const truncateText = (text, maxLength = 100) => {\n  if (!text || text.length <= maxLength) return text;\n  return `${text.substring(0, maxLength)}...`;\n};\n\n/**\n * Format a number with thousand separators\n * @param {number} number - The number to format\n * @param {string} locale - The locale to use for formatting (default: en-US)\n * @returns {string} Formatted number\n */\nexport const formatNumber = (number, locale = 'en-US') => {\n  return new Intl.NumberFormat(locale).format(number);\n};\n\n/**\n * Convert camelCase or snake_case to Title Case\n * @param {string} text - The text to convert\n * @returns {string} Title cased text\n */\nexport const toTitleCase = (text) => {\n  if (!text) return '';\n  \n  // Handle camelCase\n  const fromCamelCase = text.replace(/([A-Z])/g, ' $1');\n  \n  // Handle snake_case\n  const fromSnakeCase = fromCamelCase.replace(/_/g, ' ');\n  \n  // Capitalize first letter of each word\n  return fromSnakeCase\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\nexport default {\n  formatPrice,\n  formatDate,\n  truncateText,\n  formatNumber,\n  toTitleCase\n};","import React, { useState, useEffect } from \"react\";\nimport { Link, useOutletContext, useNavigate } from \"react-router-dom\";\nimport { getRecentOrders } from \"../../api/orders.js\";\nimport { formatDate } from \"../../utils/formatters\";\nimport LoadingSpinner from \"../../utils/Loader.jsx\";\n\nconst Dashboard = () => {\n  const { user } = useOutletContext();\n  const [recentOrders, setRecentOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchRecentOrders = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {  \n        const result = await getRecentOrders(5); // Get 5 most recent orders]\n   \n        if (result && Array.isArray(result)) {\n          setRecentOrders(result);    \n        } else if (result && result.error) {\n          console.error(\"Failed to fetch recent orders:\", result.error);\n\n          // Handle authentication errors without forcing logout\n          if (result.auth_error) {\n            setError(\"Please refresh the page or navigate to another section.\");\n          } else {\n            setError(result.error || \"Unable to load recent orders\");\n          }\n\n          setRecentOrders([]); // Clear any previous orders\n        } else {\n          console.warn(\n            \"Unexpected response structure from getRecentOrders:\",\n            result\n          );\n          setRecentOrders([]);\n          setError(\"Unable to load recent orders. Unexpected data format.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching recent orders:\", err);\n        setError(\"Unable to load recent orders. Please try again later.\");\n        setRecentOrders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchRecentOrders();\n    } else {\n      setLoading(false);\n      setError(\"Please log in to view your recent orders.\");\n    }\n  }, [user]);\n\n  // Helper function to safely render address\n  const renderAddress = (address) => {\n    if (!address) return \"No address available\";\n\n    const name = `${address.firstname || \"\"} ${address.lastname || \"\"}`.trim();\n    const street = Array.isArray(address.street)\n      ? address.street.join(\", \")\n      : address.street || \"\";\n    const city = address.city || \"\";\n    const region = address.region?.region || address.region || \"\";\n    const postcode = address.postcode || \"\";\n    const country = address.country_id || \"\";\n    const phone = address.telephone || \"\";\n\n    return (\n      <>\n        {name}\n        <br />\n        {street && (\n          <>\n            {street}\n            <br />\n          </>\n        )}\n        {city && region && postcode && (\n          <>\n            {city}, {region} {postcode}\n            <br />\n          </>\n        )}\n        {country && (\n          <>\n            {country}\n            <br />\n          </>\n        )}\n        {phone && <>T: {phone}</>}\n      </>\n    );\n  };\n\n  // Helper function to safely render order status\n  const getStatusStyle = (status) => {\n    if (!status) return \"bg-gray-100 text-gray-800\";\n\n    const statusLower = status.toLowerCase();\n    if (statusLower === \"complete\") return \"bg-green-100 text-green-800\";\n    if (statusLower === \"pending\") return \"bg-yellow-100 text-yellow-800\";\n    if (statusLower === \"processing\") return \"bg-blue-100 text-blue-800\";\n    if (statusLower === \"canceled\" || statusLower === \"cancelled\")\n      return \"bg-red-100 text-red-800\";\n    return \"bg-gray-100 text-gray-800\";\n  };\n\n  // If no user is logged in, show a friendly message instead of an error\n  if (!user) {\n    return (\n      <div className=\"text-center py-10\">\n        <h1 className=\"text-2xl font-bold mb-4\">My Account</h1>\n        <p className=\"mb-6\">Please log in to view your account dashboard.</p>\n        <button\n          onClick={() => navigate(\"/login\")}\n          className=\"bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700\"\n        >\n          Log In\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-6\">My Dashboard</h1>\n\n      {/* Welcome Message */}\n      <div className=\"bg-indigo-50 border-l-4 border-indigo-500 p-4 mb-6\">\n        <p className=\"text-indigo-700\">\n          Hello,{\" \"}\n          <span className=\"font-semibold\">\n            {user?.firstname || \"\"} {user?.lastname || \"\"}\n          </span>\n          ! From your account dashboard you can view your recent orders, manage\n          your shipping and billing addresses, and edit your password and\n          account details.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        {/* Account Information */}\n        <div className=\"border rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-lg font-semibold\">Account Information</h2>\n            <Link\n              to=\"/account/edit\"\n              className=\"text-sm text-indigo-600 hover:text-indigo-800\"\n            >\n              Edit\n            </Link>\n          </div>\n          <div className=\"space-y-2\">\n            <p>\n              <span className=\"text-gray-600\">Name:</span>{\" \"}\n              {user?.firstname || \"\"} {user?.lastname || \"\"}\n            </p>\n            <p>\n              <span className=\"text-gray-600\">Email:</span> {user?.email || \"\"}\n            </p>            \n          </div>\n        </div>\n\n        {/* Default Addresses */}\n        <div className=\"border rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-lg font-semibold\">Default Addresses</h2>\n            <Link\n              to=\"/account/addresses\"\n              className=\"text-sm text-indigo-600 hover:text-indigo-800\"\n            >\n              Manage Addresses\n            </Link>\n          </div>\n\n          {user?.addresses && user.addresses.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h3 className=\"font-medium text-gray-700 mb-1\">\n                  Default Billing\n                </h3>\n                <address className=\"text-sm not-italic\">\n                  {renderAddress(\n                    user.addresses.find((addr) => addr.default_billing) ||\n                      user.addresses[0]\n                  )}\n                </address>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-700 mb-1\">\n                  Default Shipping\n                </h3>\n                <address className=\"text-sm not-italic\">\n                  {renderAddress(\n                    user.addresses.find((addr) => addr.default_shipping) ||\n                      user.addresses[0]\n                  )}\n                </address>\n              </div>\n            </div>\n          ) : (\n            <p className=\"text-gray-500\">\n              You have not set a default billing or shipping address.\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Recent Orders */}\n      <div className=\"border rounded-lg p-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-semibold\">Recent Orders</h2>\n          <Link\n            to=\"/account/orders\"\n            className=\"text-sm text-indigo-600 hover:text-indigo-800\"\n          >\n            View All Orders\n          </Link>\n        </div>\n\n        {loading ? (\n          <div className=\"flex justify-center py-8\">\n            <LoadingSpinner />\n          </div>\n        ) : error ? (\n          <div className=\"bg-red-50 border-l-4 border-red-500 p-4\">\n            <p className=\"text-red-700\">{error}</p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"mt-2 text-sm text-indigo-600 hover:text-indigo-800\"\n            >\n              Refresh Page\n            </button>\n          </div>\n        ) : recentOrders.length > 0 ? (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Order #\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Date\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Ship To\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Total\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Status\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {recentOrders.map((order) => (\n                  <tr\n                    key={\n                      order.entity_id || order.id || Math.random().toString()\n                    }\n                  >\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      #{order.order_number || \"N/A\"}\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {order.created_at ? formatDate(order.created_at) : \"N/A\"}\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n  {order.shipping_address\n    ? `${order.shipping_address.firstname || \"\"} ${order.shipping_address.lastname || \"\"}`.trim()\n    : \"N/A\"}\n</td>\n\n\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      $\n                      {typeof order.grand_total === \"number\"\n                        ? order.grand_total.toFixed(2)\n                        : \"0.00\"}\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap\">\n                      <span\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusStyle(\n                          order.status\n                        )}`}\n                      >\n                        {order.status || \"Unknown\"}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <Link\n                        to={`/account/orders/${order.entity_id || order.id}`}\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                      >\n                        View Order\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"bg-gray-50 p-6 text-center rounded-md\">\n            <p className=\"text-gray-500\">You have not placed any orders yet.</p>\n            <Link\n              to=\"/products\"\n              className=\"mt-3 inline-block text-indigo-600 hover:text-indigo-800\"\n            >\n              Browse Products\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Dashboard);\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getAllOrders } from \"../../api/orders.js\";\nimport { formatDate, formatPrice } from \"../../utils/formatters\";\nimport LoadingSpinner from \"../../utils/Loader.jsx\";\n\nconst Orders = () => {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [filter, setFilter] = useState(\"all\"); // all, processing, complete, canceled\n  const ordersPerPage = 10;\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      setLoading(true);\n      try {\n        const result = await getAllOrders(\n          currentPage,\n          ordersPerPage,\n          filter !== \"all\" ? filter : null\n        );\n        if (result && result.items) {\n          setOrders(result.items);\n          setTotalPages(Math.ceil(result.total_count / ordersPerPage));\n          setError(null); // Clear previous errors\n        } else if (result && result.error) {\n          console.error(\"Failed to fetch orders:\", result.error);\n          setError(\n            result.error || \"Unable to load orders. Please try again later.\"\n          );\n          setOrders([]); // Clear orders\n          setTotalPages(1); // Reset pagination\n        } else {\n          // Handle unexpected structure\n          console.error(\n            \"Unexpected response structure from getAllOrders:\",\n            result\n          );\n          setError(\n            \"Unable to load orders due to an unexpected response. Please try again later.\"\n          );\n          setOrders([]);\n          setTotalPages(1);\n        }\n      } catch (err) {\n        // This catch block handles network errors or unexpected exceptions from getAllOrders itself\n        console.error(\"Network or unexpected error fetching orders:\", err);\n        setError(\n          \"Unable to load orders due to a network or unexpected issue. Please try again later.\"\n        );\n        setOrders([]);\n        setTotalPages(1);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOrders();\n  }, [currentPage, filter]);\n\n  const handleFilterChange = (e) => {\n    setFilter(e.target.value);\n    setCurrentPage(1); // Reset to first page when filter changes\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  const getStatusClass = (status) => {\n    switch (status.toLowerCase()) {\n      case \"complete\":\n        return \"bg-green-100 text-green-800\";\n      case \"processing\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"canceled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-6\">My Orders</h1>\n\n      {/* Filter and Search */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6\">\n        <div className=\"mb-4 sm:mb-0\">\n          <label htmlFor=\"filter\" className=\"mr-2 text-gray-700\">\n            Filter by:\n          </label>\n          <select\n            id=\"filter\"\n            value={filter}\n            onChange={handleFilterChange}\n            className=\"border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n          >\n            <option value=\"all\">All Orders</option>\n            <option value=\"processing\">Processing</option>\n            <option value=\"complete\">Complete</option>\n            <option value=\"pending\">Pending</option>\n            <option value=\"canceled\">Canceled</option>\n          </select>\n        </div>\n\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search orders...\"\n            className=\"border border-gray-300 rounded-md pl-10 pr-4 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n          />\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <i className=\"fas fa-search text-gray-400\"></i>\n          </div>\n        </div>\n      </div>\n\n      {/* Orders Table */}\n      {loading ? (\n        <div className=\"flex justify-center py-8\">\n          <LoadingSpinner />\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border-l-4 border-red-500 p-4\">\n          <p className=\"text-red-700\">{error}</p>\n        </div>\n      ) : orders.length > 0 ? (\n        <>\n          <div className=\"overflow-x-auto shadow rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Order #\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Date\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Ship To\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Total\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Status\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {[...orders]\n                  .sort(\n                    (a, b) => new Date(b.created_at) - new Date(a.created_at)\n                  )\n                  .map((order) => (\n                    <tr key={order.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        #{order.order_number}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatDate(order.created_at)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {order.shipping_address?.firstname}{\" \"}\n                        {order.shipping_address?.lastname}\n                      </td>\n\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatPrice(order.grand_total)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span\n                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(\n                            order.status\n                          )}`}\n                        >\n                          {order.status}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <Link\n                          to={`/account/orders/${order.order_number}`}\n                          className=\"text-indigo-600 hover:text-indigo-900 mr-4\"\n                        >\n                          View\n                        </Link>\n                        {order.status === \"complete\" && (\n                          <Link\n                            to={`/account/orders/${order.id}/reorder`}\n                            className=\"text-indigo-600 hover:text-indigo-900\"\n                          >\n                            Reorder\n                          </Link>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"flex justify-center mt-6\">\n              <nav\n                className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\"\n                aria-label=\"Pagination\"\n              >\n                <button\n                  onClick={() => handlePageChange(currentPage - 1)}\n                  disabled={currentPage === 1}\n                  className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${\n                    currentPage === 1\n                      ? \"text-gray-300 cursor-not-allowed\"\n                      : \"text-gray-500 hover:bg-gray-50\"\n                  }`}\n                >\n                  <span className=\"sr-only\">Previous</span>\n                  <i className=\"fas fa-chevron-left\"></i>\n                </button>\n\n                {[...Array(totalPages)].map((_, i) => (\n                  <button\n                    key={i}\n                    onClick={() => handlePageChange(i + 1)}\n                    className={`relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium ${\n                      currentPage === i + 1\n                        ? \"z-10 bg-indigo-50 border-indigo-500 text-indigo-600\"\n                        : \"text-gray-500 hover:bg-gray-50\"\n                    }`}\n                  >\n                    {i + 1}\n                  </button>\n                ))}\n\n                <button\n                  onClick={() => handlePageChange(currentPage + 1)}\n                  disabled={currentPage === totalPages}\n                  className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${\n                    currentPage === totalPages\n                      ? \"text-gray-300 cursor-not-allowed\"\n                      : \"text-gray-500 hover:bg-gray-50\"\n                  }`}\n                >\n                  <span className=\"sr-only\">Next</span>\n                  <i className=\"fas fa-chevron-right\"></i>\n                </button>\n              </nav>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"bg-gray-50 rounded-lg p-8 text-center\">\n          <div className=\"text-gray-500 mb-4\">\n            <i className=\"fas fa-shopping-bag text-4xl\"></i>\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            No Orders Found\n          </h3>\n          <p className=\"text-gray-500 mb-4\">\n            You haven't placed any orders yet.\n          </p>\n          <Link\n            to=\"/products\"\n            className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700\"\n          >\n            Start Shopping\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(Orders);\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { getOrderById } from \"../../api/orders\";\nimport { formatDate, formatPrice } from \"../../utils/formatters\";\nimport { printOrder } from \"../../utils/PrintOrder\";\n\nconst OrderDetail = () => {\n  const { orderId } = useParams();\n  const navigate = useNavigate();\n  const [order, setOrder] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchOrderDetails = async () => {\n      setLoading(true);\n      try {\n        const orderData = await getOrderById(orderId);\n        if (orderData) {\n          setOrder(orderData);\n          setError(null);\n        } else {\n          setError(\"Order not found\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching order details:\", err);\n        setError(\"Failed to load order details\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOrderDetails();\n  }, [orderId]);\n\n  const getStatusClass = (status) => {\n    switch (status?.toLowerCase()) {\n      case \"complete\":\n        return \"bg-green-100 text-green-800\";\n      case \"processing\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"canceled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  // Function to safely get shipping address\n  const getShippingAddress = () => {\n    if (\n      !order.extension_attributes ||\n      !order.extension_attributes.shipping_assignments ||\n      !order.extension_attributes.shipping_assignments[0] ||\n      !order.extension_attributes.shipping_assignments[0].shipping ||\n      !order.extension_attributes.shipping_assignments[0].shipping.address\n    ) {\n      return null;\n    }\n\n    return order.extension_attributes.shipping_assignments[0].shipping.address;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"bg-red-50 p-4 rounded-md text-red-800\">{error}</div>;\n  }\n\n  if (!order) {\n    return (\n      <div className=\"bg-yellow-50 p-4 rounded-md text-yellow-800\">\n        Order not found\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold\">Order #{order.order_number}</h1>\n        <button\n          onClick={() => navigate(\"/account/orders\")}\n          className=\"text-indigo-600 hover:text-indigo-800\"\n        >\n          <i className=\"fas fa-arrow-left mr-2\"></i>\n          Back to Orders\n        </button>\n      </div>\n\n      {/* Order Status and Date */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 bg-gray-50 p-4 rounded-lg\">\n        <div>\n          <p className=\"text-gray-600 text-sm\">Order Date:</p>\n          <p className=\"font-medium\">{formatDate(order.created_at)}</p>\n        </div>\n        <div className=\"mt-2 sm:mt-0\">\n          <p className=\"text-gray-600 text-sm\">Status:</p>\n          <span\n            className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusClass(\n              order.status\n            )}`}\n          >\n            {order.status}\n          </span>\n        </div>\n        <div className=\"mt-2 sm:mt-0\">\n          <p className=\"text-gray-600 text-sm\">Total:</p>\n          <p className=\"font-bold\">{formatPrice(order.grand_total)}</p>\n        </div>\n      </div>\n\n      {/* Order Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        {/* Shipping Address */}\n        {getShippingAddress() && (\n          <div className=\"border rounded-lg p-4\">\n            <h2 className=\"text-lg font-semibold mb-2\">Shipping Address</h2>\n            <address className=\"not-italic\">\n              {getShippingAddress().firstname} {getShippingAddress().lastname}\n              <br />\n              {Array.isArray(getShippingAddress().street)\n                ? getShippingAddress().street.join(\", \")\n                : getShippingAddress().street}\n              <br />\n              {getShippingAddress().city}, {getShippingAddress().region}{\" \"}\n              {getShippingAddress().postcode}\n              <br />\n              {getShippingAddress().country_id}\n              <br />\n              T: {getShippingAddress().telephone}\n            </address>\n          </div>\n        )}\n\n        {/* Billing Address */}\n        <div className=\"border rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Billing Address</h2>\n          <address className=\"not-italic\">\n            {order.billing_address.firstname} {order.billing_address.lastname}\n            <br />\n            {Array.isArray(order.billing_address.street)\n              ? order.billing_address.street.join(\", \")\n              : order.billing_address.street}\n            <br />\n            {order.billing_address.city}, {order.billing_address.region}{\" \"}\n            {order.billing_address.postcode}\n            <br />\n            {order.billing_address.country_id}\n            <br />\n            T: {order.billing_address.telephone}\n          </address>\n        </div>\n\n        {/* Payment Method */}\n        <div className=\"border rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Payment Method</h2>\n          {order.payment_methods.length > 0 ? (\n            <div>\n              <p className=\"font-medium\">{order.payment_methods[0].name}</p>\n              {order.payment_methods[0].additional_data.length > 0 && (\n                <div className=\"mt-2\">\n                  {order.payment_methods[0].additional_data.map(\n                    (item, index) => (\n                      <p key={index}>\n                        {item.name}: {item.value}\n                      </p>\n                    )\n                  )}\n                </div>\n              )}\n            </div>\n          ) : (\n            <p>No payment method information available</p>\n          )}\n        </div>\n\n        {/* Shipping Method */}\n        <div className=\"border rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-2\">Shipping Method</h2>\n          <p>\n            {order.shipping_method ||\n              \"No shipping method information available\"}\n          </p>\n        </div>\n      </div>\n\n      {/* Order Items */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Items Ordered</h2>\n        <div className=\"overflow-x-auto shadow rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  Product\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  SKU\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  Price\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  Qty\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  Subtotal\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {order.items.map((item) => (\n                <Link to={`/product/${item.product.url_key}`} className=\"no-underline\" key={item.id}>\n                <tr key={item.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-gray-200 rounded mr-3 flex items-center justify-center\">\n                        {/* Displaying product image */}\n                        {item.product &&\n                        item.product.small_image &&\n                        item.product.small_image.url ? (\n                          <img\n                            src={item.product.small_image.url}\n                            alt={\n                              item.product.small_image.label ||\n                              item.product.name\n                            }\n                            className=\"w-full h-full object-cover rounded\"\n                          />\n                        ) : (\n                          <i className=\"fas fa-box text-gray-400\"></i> // Fallback icon if no image\n                        )}\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {/* Access product name via item.product.name */}\n                          {item.product.name}\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {/* Access product SKU via item.product.sku */}\n                          SKU: {item.product.sku}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {/* Access product SKU via item.product.sku */}\n                    {item.product.sku}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {/* This remains correct as product_sale_price is directly on item */}\n                    {formatPrice(item.product_sale_price.value)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {/* This remains correct as quantity_ordered is directly on item */}\n                    {item.quantity_ordered}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-medium\">\n                    {formatPrice(\n                      item.product_sale_price.value * item.quantity_ordered\n                    )}\n                  </td>\n                </tr>\n                </Link>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Order Summary */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-lg font-semibold mb-4\">Order Summary</h2>\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Subtotal</span>\n              <span>{formatPrice(order.total?.subtotal?.value)}</span>\n            </div>\n\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Shipping & Handling</span>\n              <span>{formatPrice(order.total?.total_shipping?.value)}</span>\n            </div>\n\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Tax</span>\n              <span>{formatPrice(order.total?.total_tax?.value)}</span>\n            </div>\n\n            {order.total?.discounts?.length > 0 && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Discount</span>\n                <span className=\"text-green-600\">\n                  -{formatPrice(order.total.discounts[0].amount.value)}\n                </span>\n              </div>\n            )}\n\n            <div className=\"flex justify-between border-t pt-2 mt-2\">\n              <span className=\"font-semibold\">Grand Total</span>\n              <span className=\"font-bold\">\n                {formatPrice(order.grand_total)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex flex-wrap gap-4\">\n        {order.status === \"complete\" && (\n          <Link\n            to={`/account/orders/${order.entity_id}/reorder`}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700\"\n          >\n            <i className=\"fas fa-redo mr-2\"></i>\n            Reorder\n          </Link>\n        )}\n\n        <button\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n          onClick={() => printOrder(order)}\n        >\n          <i className=\"fas fa-print mr-2\"></i>\n          Print Order\n        </button>\n\n        {order.status !== \"complete\" && order.status !== \"canceled\" && (\n          <Link\n            to={`/account/orders/${order.entity_id}/track`}\n            className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n          >\n            <i className=\"fas fa-truck mr-2\"></i>\n            Track Order\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(OrderDetail);\n","import { formatDate, formatPrice } from './formatters';\n\n/**\n * Generates a print-friendly version of an order and opens the print dialog\n * @param {Object} order - The order object to print\n */\nexport const printOrder = (order) => {\n  const printWindow = window.open('', '_blank');\n  \n  if (!printWindow) {\n    alert('Please allow pop-ups to print the order');\n    return;\n  }\n  \n  // Function to safely get shipping address\n  const getShippingAddress = () => {\n    if (!order.extension_attributes || \n        !order.extension_attributes.shipping_assignments || \n        !order.extension_attributes.shipping_assignments[0] || \n        !order.extension_attributes.shipping_assignments[0].shipping || \n        !order.extension_attributes.shipping_assignments[0].shipping.address) {\n      return null;\n    }\n    \n    return order.extension_attributes.shipping_assignments[0].shipping.address;\n  };\n  \n  const shippingAddress = getShippingAddress();\n  \n  // Create print-friendly HTML content\n  const printContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Order #${order.increment_id}</title>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <style>\n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n        h1 {\n          font-size: 24px;\n          margin-bottom: 20px;\n          border-bottom: 1px solid #eee;\n          padding-bottom: 10px;\n        }\n        h2 {\n          font-size: 18px;\n          margin-top: 20px;\n          margin-bottom: 10px;\n        }\n        .order-info {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 20px;\n          background-color: #f9f9f9;\n          padding: 15px;\n          border-radius: 5px;\n        }\n        .order-info div {\n          flex: 1;\n        }\n        .address-container {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 20px;\n          margin-bottom: 20px;\n        }\n        .address-box {\n          flex: 1;\n          min-width: 250px;\n          border: 1px solid #ddd;\n          border-radius: 5px;\n          padding: 15px;\n        }\n        table {\n          width: 100%;\n          border-collapse: collapse;\n          margin-bottom: 20px;\n        }\n        th, td {\n          border: 1px solid #ddd;\n          padding: 10px;\n          text-align: left;\n        }\n        th {\n          background-color: #f2f2f2;\n        }\n        .summary {\n          background-color: #f9f9f9;\n          padding: 15px;\n          border-radius: 5px;\n        }\n        .summary-row {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 8px;\n        }\n        .summary-total {\n          font-weight: bold;\n          border-top: 1px solid #ddd;\n          padding-top: 8px;\n          margin-top: 8px;\n        }\n        .status-badge {\n          display: inline-block;\n          padding: 3px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n        .status-complete { background-color: #d1fae5; color: #065f46; }\n        .status-processing { background-color: #dbeafe; color: #1e40af; }\n        .status-pending { background-color: #fef3c7; color: #92400e; }\n        .status-canceled { background-color: #fee2e2; color: #b91c1c; }\n        @media print {\n          body { \n            print-color-adjust: exact;\n            -webkit-print-color-adjust: exact;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <h1>Order #${order.increment_id}</h1>\n      \n      <div class=\"order-info\">\n        <div>\n          <p style=\"color: #666; margin-bottom: 5px;\">Order Date:</p>\n          <p style=\"font-weight: 500; margin-top: 0;\">${formatDate(order.created_at)}</p>\n        </div>\n        <div>\n          <p style=\"color: #666; margin-bottom: 5px;\">Status:</p>\n          <span class=\"status-badge status-${order.status.toLowerCase()}\">${order.status}</span>\n        </div>\n        <div>\n          <p style=\"color: #666; margin-bottom: 5px;\">Total:</p>\n          <p style=\"font-weight: 700; margin-top: 0;\">${formatPrice(order.grand_total)}</p>\n        </div>\n      </div>\n      \n      <div class=\"address-container\">\n        ${shippingAddress ? `\n        <div class=\"address-box\">\n          <h2>Shipping Address</h2>\n          <p>\n            ${shippingAddress.firstname} ${shippingAddress.lastname}<br>\n            ${Array.isArray(shippingAddress.street) ? shippingAddress.street.join(', ') : shippingAddress.street}<br>\n            ${shippingAddress.city}, ${shippingAddress.region} ${shippingAddress.postcode}<br>\n            ${shippingAddress.country_id}<br>\n            T: ${shippingAddress.telephone}\n          </p>\n        </div>\n        ` : ''}\n        \n        <div class=\"address-box\">\n          <h2>Billing Address</h2>\n          <p>\n            ${order.billing_address.firstname} ${order.billing_address.lastname}<br>\n            ${Array.isArray(order.billing_address.street) ? order.billing_address.street.join(', ') : order.billing_address.street}<br>\n            ${order.billing_address.city}, ${order.billing_address.region} ${order.billing_address.postcode}<br>\n            ${order.billing_address.country_id}<br>\n            T: ${order.billing_address.telephone}\n          </p>\n        </div>\n      </div>\n      \n      <div class=\"address-container\">\n        <div class=\"address-box\">\n          <h2>Payment Method</h2>\n          <p>${order.payment.method}</p>\n        </div>\n        \n        <div class=\"address-box\">\n          <h2>Shipping Method</h2>\n          <p>${order.shipping_description}</p>\n        </div>\n      </div>\n      \n      <h2>Items Ordered</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>SKU</th>\n            <th>Price</th>\n            <th>Qty</th>\n            <th>Subtotal</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${order.items.map(item => `\n            <tr>\n              <td>\n                <div style=\"font-weight: 500;\">${item.name}</div>\n                ${item.options ? item.options.map(option => `\n                  <div style=\"font-size: 12px; color: #666; margin-top: 5px;\">\n                    <span style=\"font-weight: 500;\">${option.label}:</span> ${option.value}\n                  </div>\n                `).join('') : ''}\n              </td>\n              <td>${item.sku}</td>\n              <td>${formatPrice(item.price)}</td>\n              <td>${item.qty_ordered}</td>\n              <td style=\"font-weight: 500;\">${formatPrice(item.row_total)}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n      \n      <h2>Order Summary</h2>\n      <div class=\"summary\">\n        <div class=\"summary-row\">\n          <span>Subtotal</span>\n          <span>${formatPrice(order.subtotal)}</span>\n        </div>\n        \n        ${order.discount_amount > 0 ? `\n        <div class=\"summary-row\">\n          <span>Discount</span>\n          <span style=\"color: #059669;\">-${formatPrice(Math.abs(order.discount_amount))}</span>\n        </div>\n        ` : ''}\n        \n        <div class=\"summary-row\">\n          <span>Shipping & Handling</span>\n          <span>${formatPrice(order.shipping_amount)}</span>\n        </div>\n        \n        ${order.tax_amount > 0 ? `\n        <div class=\"summary-row\">\n          <span>Tax</span>\n          <span>${formatPrice(order.tax_amount)}</span>\n        </div>\n        ` : ''}\n        \n        <div class=\"summary-row summary-total\">\n          <span>Grand Total</span>\n          <span>${formatPrice(order.grand_total)}</span>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.open();\n  printWindow.document.write(printContent);\n  printWindow.document.close();\n  \n  // Wait for content to load before printing\n  printWindow.onload = function() {\n    printWindow.print();\n    // Optional: Close the window after printing\n    // printWindow.onafterprint = function() { printWindow.close(); };\n  };\n};\n\n// Export other print-related functions if needed\nexport const printInvoice = (invoice) => {\n  // Similar implementation for invoices\n\n};\n\nexport const printShipment = (shipment) => { \n};\n","/**\n * Address API service for Magento-style address operations\n * This service handles fetching, creating, updating, and deleting customer addresses\n */\n\nimport {\n  AUTH_TOKEN_KEY,\n  USER_INFO_KEY,\n  CART_KEY,\n  MAGENTO_GUEST_CART_ID,\n} from \"../constants/storageKeys\";\n\nconst API_BASE_URL = import.meta.env.VITE_MAGENTO_API_URL;\n\n\n// Helper function to get the auth token and headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(AUTH_TOKEN_KEY);\n  if (!token) {\n    return null;\n  }\n\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  };\n};\n\n// Helper function to handle API responses\nconst handleApiResponse = async (response) => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: `HTTP error ${response.status}`\n    }));\n    throw new Error(errorData.message || `HTTP error ${response.status}`);\n  }\n  return response.json();\n};\n\n/**\n * Fetch current customer data\n * @returns {Promise<Object>} Customer data object\n */\nconst getCurrentCustomer = async () => {\n  const headers = getAuthHeaders();\n  if (!headers) {\n    throw new Error('Authentication token not found.');\n  }\n\n  const response = await fetch(`${API_BASE_URL}/customers/me`, {\n    method: 'GET',\n    headers\n  });\n\n  return handleApiResponse(response);\n};\n\n/**\n * Fetches all addresses for the currently logged-in customer.\n * @returns {Promise<Array>} A promise that resolves to an array of addresses.\n */\nexport const getAddresses = async () => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'GET',\n      headers\n    });\n\n    return handleApiResponse(response);\n  } catch (error) {\n    console.error('Error in getAddresses:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch a single address by ID\n * @param {number} addressId - The ID of the address to fetch\n * @returns {Promise<Object>} Address object\n */\nexport const fetchAddress = async (addressId) => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/customers/me/addresses/${addressId}`, {\n      method: 'GET',\n      headers\n    });\n\n    return handleApiResponse(response);\n  } catch (error) {\n    console.error(`Error fetching address ${addressId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Helper function to prepare address data for Magento API\n * @param {Object} addressData - Raw address data from form\n * @returns {Object} Prepared address data for Magento API\n */\nexport function prepareAddressData(addressData) {\n  const prepared = { ...addressData };\n\n  // Ensure street is always an array and filter out empty lines\n  if (prepared.street && !Array.isArray(prepared.street)) {\n    prepared.street = [prepared.street];\n  } else if (Array.isArray(prepared.street)) {\n    prepared.street = prepared.street.filter(line => line && line.trim() !== '');\n  }\n\n  // Handle region & region_id properly\n  if (prepared.region_input && !prepared.region) {\n    prepared.region = {\n      region: prepared.region_input\n    };\n  }\n\n  // If region_id is valid (not empty string/null/undefined), parse it\n  if (prepared.region_id !== undefined && prepared.region_id !== \"\" && prepared.region_id !== null) {\n    if (!prepared.region) prepared.region = {};\n    prepared.region.region_id = parseInt(prepared.region_id, 10);\n  }\n\n  // Remove unused fields\n  delete prepared.region_input;\n  delete prepared.region_id;\n  delete prepared.customerId;\n  delete prepared.email;\n\n  // Default values if missing\n  if (!prepared.telephone) prepared.telephone = '';\n  if (!prepared.country_id) prepared.country_id = 'US';\n\n  return prepared;\n}\n\n\n\n/**\n * Adds a new address for the currently logged-in customer.\n * @param {Object} addressData - The address data to add.\n *   Example: {\n *     region: { region_code: 'NY', region: 'New York', region_id: 43 },\n *     country_id: 'US',\n *     street: ['123 Main St'],\n *     telephone: '555-1234',\n *     postcode: '10001',\n *     city: 'New York',\n *     firstname: 'John',\n *     lastname: 'Doe',\n *     default_shipping: false,\n *     default_billing: false\n *   }\n * @returns {Promise<Object>} A promise that resolves to the newly created address.\n */\nexport const addAddress = async (addressData) => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    // Step 1: Get current customer\n    const customerResponse = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'GET',\n      headers,\n    });\n\n    if (!customerResponse.ok) {\n      throw new Error('Failed to fetch customer details.');\n    }\n\n    const customer = await customerResponse.json();\n    // Step 2: Add new address to existing list\n    const preparedAddress = prepareAddressData(addressData); \n\n    // Step 3: Create updated customer object, ensuring email is preserved\n    const updatedCustomer = {\n      id: customer.id,\n      email: customer.email,\n      firstname: customer.firstname,\n      lastname: customer.lastname,\n      addresses: [...(customer.addresses || []), preparedAddress],\n    };\n    // Step 4: Update customer with new address\n    const updateResponse = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'PUT',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ customer: updatedCustomer }), // ← fix applied\n    });\n\n\n    return handleApiResponse(updateResponse);\n  } catch (error) {\n    console.error('Error in addAddress:', error);\n    throw error;\n  }\n};\n\n\n/**\n * Updates an existing address for the currently logged-in customer.\n * @param {Object} addressData - The address data to update. Must include 'id'.\n * @returns {Promise<Object>} A promise that resolves to the updated address.\n */\nexport const updateAddress = async (addressData) => {\n  try {\n    // Validate address ID\n    if (!addressData.id) {\n      throw new Error('Address ID is required for updating.');\n    }\n\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    // Step 1: Get current customer\n    const customerResponse = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'GET',\n      headers,\n    });\n\n    if (!customerResponse.ok) {\n      throw new Error('Failed to fetch customer details.');\n    }\n\n    const customer = await customerResponse.json();\n    \n    // Step 2: Find and update the address\n    const addressId = addressData.id;\n    \n    // Check if the address exists in the customer's addresses\n    const addressExists = customer.addresses && \n                         customer.addresses.some(address => address.id === addressId);\n    \n    if (!addressExists) {\n      throw new Error(`Address with ID ${addressId} not found.`);\n    }\n\n    const updatedAddresses = customer.addresses.map(address => {\n      if (address.id === addressId) {\n        return {\n          ...address,\n          ...prepareAddressData(addressData)\n        };\n      }\n      return address;\n    });\n\n    // Step 3: Create updated customer object, ensuring email is preserved\n    const updatedCustomer = {\n      ...customer,\n      addresses: updatedAddresses\n    };\n    // Step 4: Update customer with modified address\n    const updateResponse = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'PUT',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ customer: updatedCustomer }),\n    });\n\n    return handleApiResponse(updateResponse);\n  } catch (error) {\n    console.error('Error in updateAddress:', error);\n    throw error;\n  }\n};\n\n/**\n * Deletes an address for the currently logged-in customer.\n * @param {number} addressId - The ID of the address to delete.\n * @returns {Promise<boolean>} A promise that resolves to true if deletion was successful.\n */\nexport const deleteAddress = async (addressId) => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    // First, get the current customer data\n    const customer = await getCurrentCustomer();\n    \n    // Check if the address exists\n    const addressExists = customer.addresses && \n                         customer.addresses.some(address => address.id === addressId);\n    \n    if (!addressExists) {\n      throw new Error(`Address with ID ${addressId} not found.`);\n    }\n    \n    // Get the address we're about to delete\n    const addressToDelete = customer.addresses.find(address => address.id === addressId);\n    \n    // Filter out the address to delete\n    const updatedAddresses = customer.addresses.filter(address => address.id !== addressId);\n    \n    // Create updated customer object\n    const updatedCustomer = {\n      ...customer,\n      addresses: updatedAddresses\n    };\n    \n    // If we're deleting a default address, we need to handle that specially\n    if (addressToDelete.default_billing || addressToDelete.default_shipping) {\n      // If there are other addresses, set the first one as default\n      if (updatedAddresses.length > 0) {\n        if (addressToDelete.default_billing) {\n          updatedCustomer.default_billing = updatedAddresses[0].id;\n        }\n        if (addressToDelete.default_shipping) {\n          updatedCustomer.default_shipping = updatedAddresses[0].id;\n        }\n      } else {\n        // If no addresses left, remove the default address properties\n        delete updatedCustomer.default_billing;\n        delete updatedCustomer.default_shipping;\n      }\n    }\n    \n    // Update the customer with the address removed\n    const response = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'PUT',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ customer: updatedCustomer }),\n    });\n\n    await handleApiResponse(response);\n    return true;\n  } catch (error) {\n    console.error('Error in deleteAddress:', error);\n    throw error;\n  }\n};\n\n/**\n * Set an address as the default shipping or billing address\n * @param {number} addressId - The ID of the address to set as default\n * @param {string} type - Either 'shipping' or 'billing'\n * @returns {Promise<Object>} Result of the operation\n */\nexport const setDefaultAddress = async (addressId, type) => {\n  if (type !== 'shipping' && type !== 'billing') {\n    throw new Error('Type must be either \"shipping\" or \"billing\"');\n  }\n\n  const headers = getAuthHeaders();\n  if (!headers) {\n    throw new Error('Authentication token not found.');\n  }\n\n  try {\n    // Step 1: Get current customer data\n    const customer = await getCurrentCustomer();\n\n    // Step 2: Verify the address exists in the customer's addresses\n    const targetAddressExists = customer.addresses &&\n                               Array.isArray(customer.addresses) &&\n                               customer.addresses.some(addr => addr.id === addressId);\n\n    if (!targetAddressExists) {\n      console.error(`Address with ID ${addressId} not found in customer's addresses. Cannot set as default.`);\n      throw new Error(`Address with ID ${addressId} not found in customer's addresses.`);\n    }\n\n    // Step 3: Prepare the updated customer object\n    const updatedCustomer = { ...customer };\n\n    // Step 4: Update the default_shipping/default_billing ID on the customer object\n    // Magento expects these IDs as strings in the PUT request.\n    if (type === 'shipping') {\n      updatedCustomer.default_shipping = String(addressId);\n    } else { // type === 'billing'\n      updatedCustomer.default_billing = String(addressId);\n    }\n\n    // Step 5: Update the default_shipping/default_billing flags on individual addresses\n    if (updatedCustomer.addresses && Array.isArray(updatedCustomer.addresses)) {\n      updatedCustomer.addresses = updatedCustomer.addresses.map(addr => {\n        const isTargetAddress = addr.id === addressId;\n        let newDefaultShipping = addr.default_shipping;\n        let newDefaultBilling = addr.default_billing;\n\n        if (type === 'shipping') {\n          newDefaultShipping = isTargetAddress;\n        } else { // type === 'billing'\n          newDefaultBilling = isTargetAddress;\n        }\n        return {\n          ...addr,\n          default_shipping: newDefaultShipping,\n          default_billing: newDefaultBilling,\n        };\n      });\n    }\n    \n    // Step 6: Update the customer on the server\n    const response = await fetch(`${API_BASE_URL}/customers/me`, {\n      method: 'PUT',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json' // Ensure Content-Type is set\n      },\n      body: JSON.stringify({ customer: updatedCustomer }),\n    });\n\n    return handleApiResponse(response);\n  } catch (error) {\n    console.error(`Error setting default ${type} address for ID ${addressId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Validate address data against Magento API\n * @param {Object} addressData - The address data to validate\n * @returns {Promise<Object>} Validation results\n */\nexport const validateAddress = async (addressData) => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    const preparedAddress = prepareAddressData(addressData);\n\n    const response = await fetch(`${API_BASE_URL}/customers/addresses/validate`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({ address: preparedAddress }),\n    });\n\n    return handleApiResponse(response);\n  } catch (error) {\n    console.error('Error validating address:', error);\n    throw error;\n  }\n};\n/**\n * Fetch the list of countries with code and name (via REST API)\n * @returns {Promise<Array>} Array of countries [{ id, full_name_english }]\n */\nexport const fetchCountries = async () => {\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/directory/countries`, {\n      method: 'GET',\n      headers,\n    });\n\n    const result = await handleApiResponse(response);\n\n    // Magento REST API returns an array of country objects with 'id' and 'full_name_english'\n    return result;\n  } catch (error) {\n    console.error(\"Error fetching countries:\", error);\n    throw error;\n  }\n};\n\n/**\n * Fetch regions (states) for a given country ID (via REST API)\n * @param {string} countryId - Country code (like 'US', 'IN')\n * @returns {Promise<Array>} Array of regions [{ id, code, name }]\n */\nexport const fetchRegionsByCountry = async (countryId) => {\n\n  try {\n    const headers = getAuthHeaders();\n    if (!headers) {\n      throw new Error('Authentication token not found.');\n    }\n\n    const response = await fetch(`${API_BASE_URL}/directory/countries/${countryId}`, {\n      method: 'GET',\n      headers,\n    });\n\n    const result = await handleApiResponse(response);\n\n    // Check if available regions exist\n    if (!result.available_regions) {\n      console.warn(`No regions found for country ${countryId}`);\n      return [];\n    }\n    return result.available_regions;\n  } catch (error) {\n    console.error(`Error fetching regions for country ${countryId}:`, error);\n    throw error;\n  }\n};\n\n// Example of how Magento expects region data (can be ID or code)\n// \"region\": {\n//   \"region_code\": \"NY\",\n//   \"region\": \"New York\",\n//   \"region_id\": 43 // region_id is preferred if known\n// },\n// \"country_id\": \"US\",\n// \"street\": [\n//   \"123 Oak Ave\"\n// ],\n// \"telephone\": \"555-555-5555\",\n// \"postcode\": \"10577\",\n// \"city\": \"Purchase\",\n// \"firstname\": \"Jane\",\n// \"lastname\": \"Doe\",\n// \"default_shipping\": true, // optional\n// \"default_billing\": true // optional\n","import React, { useState, useEffect } from \"react\";\nimport {\n  addAddress,\n  updateAddress,\n  fetchCountries,\n  fetchRegionsByCountry,\n} from \"../../api/addressApi\";\n\nfunction AddressForm({ initialData = null, onSuccess, onCancel }) {\n  const isEditing = !!initialData?.id; // Only consider editing if we have an ID\n  const customerdata = localStorage.getItem(\"magentoUserInfo\");\n  const customer = customerdata ? JSON.parse(customerdata) : null;\n  // Initialize form data once, not on every render\n  const [formData, setFormData] = useState({\n    id: initialData?.id || null, // Ensure ID is included if available\n    customerId: customer?.id || null,\n    firstname: \"\",\n    lastname: \"\",\n    email: customer?.email || \"\",\n    street: [\"\", \"\"],\n    city: \"\",\n    region_input: \"\", // User input for region name\n    region_id: \"\", // Region ID if available\n    postcode: \"\",\n    country_id: \"US\",\n    telephone: \"\",\n    default_billing: false,\n    default_shipping: false,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [formInitialized, setFormInitialized] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState([]);\n\n  useEffect(() => {\n    const fetchCountriesData = async () => {\n      try {\n        const response = await fetchCountries();\n        if (response) {\n          setCountries(response); // Set the fetched countries\n        } else {\n          console.error(\"Failed to fetch countries:\", response.message);\n          setCountries([]); // Set to empty array if fetching fails\n        }\n      } catch (err) {\n        console.error(\"Error fetching countries:\", err);\n        setCountries([]); // Set to empty array on error\n      }\n    };\n    fetchCountriesData();\n  }, []);\n\n  const changeCountry = async (e) => {\n    const countryId = e.target.value;\n    const region_id = await fetchRegionsByCountry(countryId);\n    if (region_id) {\n      setRegion(region_id); // Set the regions based on selected country\n    } else {\n      console.error(\"Failed to fetch regions for country:\", countryId);\n      setRegion([]); // Set to empty array if fetching fails\n    }\n  };\n\n  // Only initialize form data once when component mounts or initialData changes\n  useEffect(() => {\n    if (initialData && !formInitialized) {\n      // Format the data for the form\n      setFormData({\n        id: initialData.id || null, // Ensure ID is included\n        customerId: initialData.customerId || customer?.id || null,\n        firstname: initialData.firstname || \"\",\n        lastname: initialData.lastname || \"\",\n        email: initialData.email || (customer ? customer.email : \"\"), // Use customer email as fallback\n        // Handle street which could be string or array\n        street: Array.isArray(initialData.street)\n          ? [\n              ...initialData.street,\n              ...Array(Math.max(0, 2 - initialData.street.length)).fill(\"\"),\n            ].slice(0, 2)\n          : [initialData.street || \"\", \"\"],\n        city: initialData.city || \"\",\n        // Handle region which could be string or object\n        region_input:\n          typeof initialData.region === \"object\"\n            ? initialData.region.region || \"\"\n            : initialData.region || \"\",\n        region_id:\n          typeof initialData.region === \"object\"\n            ? initialData.region.region_id || \"\"\n            : initialData.region_id || \"\",\n        postcode: initialData.postcode || \"\",\n        country_id: initialData.country_id || \"US\",\n        telephone: initialData.telephone || \"\",\n        default_billing: initialData.default_billing || false,\n        default_shipping: initialData.default_shipping || false,\n      });\n      setFormInitialized(true);\n    }\n  }, [initialData, customer, formInitialized]);\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    setError(null); // Clear error on change\n\n    if (name.startsWith(\"street[\")) {\n      const index = parseInt(name.match(/\\[(\\d+)\\]/)[1], 10);\n      const newStreet = [...formData.street];\n      newStreet[index] = value;\n      setFormData((prev) => ({ ...prev, street: newStreet }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: type === \"checkbox\" ? checked : value,\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Ensure email is included\n      if (!formData.email) {\n        throw new Error(\"Customer email is required\");\n      }\n\n      // Prepare data for submission\n      const dataToSubmit = {\n        ...formData,\n        // Filter out empty street lines\n        street: formData.street.filter((line) => line && line.trim() !== \"\"),\n        // Set region as an object for Magento\n        region: {\n          region: formData.region_input,\n          region_id: formData.region_id\n            ? parseInt(formData.region_id, 10)\n            : null,\n        },\n      };\n\n      // Remove temporary fields\n      delete dataToSubmit.region_input;\n\n      if (isEditing && dataToSubmit.id) {\n        await updateAddress(dataToSubmit);\n      } else {\n        // For new addresses, we don't need an ID\n        delete dataToSubmit.id;\n        await addAddress(dataToSubmit);\n      }\n\n      if (onSuccess) onSuccess();\n    } catch (err) {\n      console.error(\"Error saving address:\", err);\n      setError(err.message || \"Failed to save address. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 p-6 rounded-lg border border-gray-200\">\n      <h3 className=\"text-xl font-medium mb-4\">\n        {isEditing ? \"Edit Address\" : \"Add New Address\"}\n      </h3>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          {/* Include ID as hidden field if editing */}\n          {isEditing && (\n            <input\n              type=\"hidden\"\n              name=\"id\"\n              id=\"id\"\n              value={formData.id || \"\"}\n              readOnly\n            />\n          )}\n\n          <input\n            type=\"hidden\"\n            name=\"customerId\"\n            id=\"customerId\"\n            value={formData.customerId || \"\"}\n            readOnly\n          />\n\n          {/* Hidden email field to ensure it's included in the submission */}\n          <input\n            type=\"hidden\"\n            name=\"email\"\n            id=\"email\"\n            value={formData.email || \"\"}\n            readOnly\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <div>\n            <label\n              htmlFor=\"firstname\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              First Name*\n            </label>\n            <input\n              id=\"firstname\"\n              type=\"text\"\n              name=\"firstname\"\n              value={formData.firstname}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n          <div>\n            <label\n              htmlFor=\"lastname\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Last Name*\n            </label>\n            <input\n              id=\"lastname\"\n              type=\"text\"\n              name=\"lastname\"\n              value={formData.lastname}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Street Address*\n          </label>\n          <input\n            type=\"text\"\n            name=\"street[0]\"\n            value={formData.street[0]}\n            onChange={handleChange}\n            placeholder=\"Street Address Line 1\"\n            required\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 mb-2\"\n          />\n          <input\n            type=\"text\"\n            name=\"street[1]\"\n            value={formData.street[1]}\n            onChange={handleChange}\n            placeholder=\"Street Address Line 2 (optional)\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <div>\n            <label\n              htmlFor=\"country_id\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Country*\n            </label>\n            <select\n              id=\"country_id\"\n              name=\"country_id\"\n              value={formData.country_id}\n              onChange={(e) => {\n                handleChange(e);\n                changeCountry(e);\n              }}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            >\n              <option value=\"\">Select Country</option>\n              {countries.map((country) => (\n                <option key={country.id} value={country.id}>\n                  {country.full_name_english || country.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label\n              htmlFor=\"region_input\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              State/Province/Region*\n            </label>\n            {region.length === 0 && (\n              <input\n                id=\"region_input\"\n                type=\"text\"\n                name=\"region_input\"\n                value={formData.region_input}\n                onChange={handleChange}\n                placeholder=\"Enter State/Province/Region\"\n                required\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              />\n            )}\n            {region.length > 0 && (\n               <select\n              id=\"region_id\"\n              name=\"region_id\"\n              value={formData.region_id}\n              onChange={(e) => {\n                handleChange(e);                \n              }}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            >\n              <option value=\"\">Select Country</option>\n              {region.map((region_id) => (\n                <option key={region_id.id} value={region_id.id}>\n                  {region_id.full_name_english || region_id.name}\n                </option>\n              ))}\n            </select>\n            )}\n           \n          </div>\n          \n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <div>\n            <label\n              htmlFor=\"city\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              City*\n            </label>\n            <input\n              id=\"city\"\n              type=\"text\"\n              name=\"city\"\n              value={formData.city}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n          <div>\n            <label\n              htmlFor=\"postcode\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Zip/Postal Code*\n            </label>\n            <input\n              id=\"postcode\"\n              type=\"text\"\n              name=\"postcode\"\n              value={formData.postcode}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mb-4\">\n          <label\n            htmlFor=\"telephone\"\n            className=\"block text-sm font-medium text-gray-700 mb-1\"\n          >\n            Phone Number*\n          </label>\n          <input\n            id=\"telephone\"\n            type=\"number\"\n            name=\"telephone\"\n            value={formData.telephone}\n            onChange={handleChange}\n            required\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <div className=\"flex items-center mb-2\">\n            <input\n              type=\"checkbox\"\n              id=\"default_shipping\"\n              name=\"default_shipping\"\n              checked={formData.default_shipping}\n              onChange={handleChange}\n              className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n            />\n            <label\n              htmlFor=\"default_shipping\"\n              className=\"ml-2 block text-sm text-gray-700\"\n            >\n              Use as default shipping address\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"default_billing\"\n              name=\"default_billing\"\n              checked={formData.default_billing}\n              onChange={handleChange}\n              className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n            />\n            <label\n              htmlFor=\"default_billing\"\n              className=\"ml-2 block text-sm text-gray-700\"\n            >\n              Use as default billing address\n            </label>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-3\">\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className={`px-4 py-2 rounded-md text-white bg-indigo-600 hover:bg-indigo-700 ${\n              loading ? \"opacity-70 cursor-not-allowed\" : \"\"\n            }`}\n          >\n            {loading\n              ? \"Saving...\"\n              : isEditing\n              ? \"Update Address\"\n              : \"Add Address\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default React.memo(AddressForm);\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-md\">\n          <h2 className=\"text-red-800 font-medium\">Something went wrong</h2>\n          <p className=\"text-red-600 mt-1\">{this.state.error?.message}</p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport { getAddresses, deleteAddress, setDefaultAddress } from '../../api/addressApi';\nimport AddressForm from './AddressForm';\nimport ErrorBoundary from '../ErrorBoundary';\n\nfunction AccountAddresses() {\n  const [addresses, setAddresses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingAddress, setEditingAddress] = useState(null);\n\n  useEffect(() => {\n    loadAddresses();\n  }, []);\n\n  const loadAddresses = async () => {\n    try {\n      setLoading(true);\n      const data = await getAddresses();   \n      setAddresses(data.addresses);   \n      setError(null);\n    } catch (err) {\n      setError('Failed to load addresses. Please try again later.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingAddress(null);\n    setShowAddForm(true);\n  };\n\n  const handleEdit = (address) => {\n    setEditingAddress(address);\n    setShowAddForm(true);\n  };\n\n  const handleDelete = async (addressId) => {\n    if (window.confirm('Are you sure you want to delete this address?')) {\n      try {\n        // Make sure we're passing a valid addressId to the deleteAddress function\n        if (!addressId) {\n          throw new Error('Invalid address ID');\n        }\n        \n        await deleteAddress(addressId);\n        \n        // Update the addresses state by filtering out the deleted address\n        setAddresses(addresses.filter(addr => addr.id !== addressId));\n        \n      } catch (err) {\n        setError('Failed to delete address. Please try again.');\n        console.error('Error in deleteAddress:', err);\n      }\n    }\n  };\n\n  const handleSetDefault = async (addressId, type) => {\n    try {\n      await setDefaultAddress(addressId, type);\n      \n      // Update local state to reflect the change\n      const updatedAddresses = addresses.map(addr => ({\n        ...addr,\n        default_billing: type === 'billing' ? addr.id === addressId : addr.default_billing,\n        default_shipping: type === 'shipping' ? addr.id === addressId : addr.default_shipping\n      }));\n      \n      setAddresses(updatedAddresses);\n    } catch (err) {\n      setError(`Failed to set default ${type} address. Please try again.`);\n      console.error(err);\n    }\n  };\n\n  const handleFormSubmit = () => {\n    setShowAddForm(false);\n    loadAddresses(); // Reload addresses after form submission\n  };\n  \n  const handleFormCancel = () => {\n    setShowAddForm(false);\n    setEditingAddress(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-[300px] flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-medium text-gray-800\">Address Book</h2>\n        <button\n          onClick={handleAddNew}\n          className=\"bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-4 rounded-md transition duration-150 ease-in-out\"\n        >\n          Add New Address\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      {showAddForm ? (\n        <ErrorBoundary>\n          <AddressForm \n            initialData={editingAddress} \n            onSuccess={handleFormSubmit} \n            onCancel={handleFormCancel}\n          />\n        </ErrorBoundary>\n      ) : (\n        <>\n          {addresses.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>You have no saved addresses.</p>\n              <button\n                onClick={handleAddNew}\n                className=\"mt-4 text-indigo-600 hover:text-indigo-800 underline\"\n              >\n                Add your first address\n              </button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {addresses.map(address => (\n                <div key={address.id} className=\"border rounded-lg p-4 relative\">\n                  <div className=\"flex flex-col\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h3 className=\"font-medium text-lg\">{address.firstname} {address.lastname}</h3>\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => handleEdit(address)}\n                          className=\"text-sm text-gray-600 hover:text-indigo-600\"\n                        >\n                          Edit\n                        </button>\n                        <button\n                          onClick={() => handleDelete(address.id)}\n                          className=\"text-sm text-gray-600 hover:text-red-600\"\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    </div>\n\n                    <div className=\"text-gray-600 mb-4\">\n                      <p>{Array.isArray(address.street) ? address.street.join(', ') : address.street}</p>\n                      <p>{address.city}, {address.region?.region || address.region} {address.postcode}</p>\n                      <p>{address.country_id}</p>\n                      <p>T: {address.telephone}</p>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2 mt-auto\">\n                      {address.default_shipping && (\n                        <span className=\"bg-green-100 text-green-800 text-xs px-2 py-1 rounded\">\n                          Default Shipping\n                        </span>\n                      )}\n                      {address.default_billing && (\n                        <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded\">\n                          Default Billing\n                        </span>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2 mt-3\">\n                      {!address.default_shipping && (\n                        <button\n                          onClick={() => handleSetDefault(address.id, 'shipping')}\n                          className=\"text-xs text-gray-600 hover:text-indigo-600 underline\"\n                        >\n                          Use as shipping address\n                        </button>\n                      )}\n                      {!address.default_billing && (\n                        <button\n                          onClick={() => handleSetDefault(address.id, 'billing')}\n                          className=\"text-xs text-gray-600 hover:text-indigo-600 underline\"\n                        >\n                          Use as billing address\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(AccountAddresses);\n","import React, { useState, useEffect } from 'react';\nimport { FiUser, FiMail, FiLock, FiEdit, FiSave, FiAlertCircle } from 'react-icons/fi';\nimport { useAuth } from '../../hooks/useAuth';\n\nfunction Myaccount() {\n  const { currentUser, loading, error, updateName, updateEmail, updatePassword } = useAuth();\n\n  // State for managing edit modes\n  const [editName, setEditName] = useState(false);\n  const [editEmail, setEditEmail] = useState(false);\n  const [showPasswordForm, setShowPasswordForm] = useState(false);\n  \n  // Form states\n  const [newFirstName, setNewFirstName] = useState('');\n  const [newLastName, setNewLastName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  // Feedback states\n  const [nameUpdateStatus, setNameUpdateStatus] = useState({ loading: false, error: null, success: false });\n  const [emailUpdateStatus, setEmailUpdateStatus] = useState({ loading: false, error: null, success: false });\n  const [passwordUpdateStatus, setPasswordUpdateStatus] = useState({ loading: false, error: null, success: false });\n\n  // Update form states when user data is loaded\n  useEffect(() => {\n    if (currentUser) {\n      setNewFirstName(currentUser.firstname || '');\n      setNewLastName(currentUser.lastname || '');\n      setNewEmail(currentUser.email || '');\n    }\n  }, [currentUser]);\n\n  // Get full name from first and last name\n  const getFullName = () => {\n    if (!currentUser) return '';\n    return `${currentUser.firstname || ''} ${currentUser.lastname || ''}`.trim();\n  };\n\n  // Handle name update\n  const handleNameUpdate = async () => {\n    if (!newFirstName.trim() || !newLastName.trim()) {\n      setNameUpdateStatus({ \n        loading: false, \n        error: \"First name and last name cannot be empty\", \n        success: false \n      });\n      return;\n    }\n    \n    setNameUpdateStatus({ loading: true, error: null, success: false });\n    \n    try {\n      const result = await updateName({ \n        firstname: newFirstName.trim(), \n        lastname: newLastName.trim() ,\n        email : currentUser.email\n      });\n      if (result.success) {\n        setNameUpdateStatus({ loading: false, error: null, success: true });\n        setEditName(false);\n        \n        // Show success message briefly\n        setTimeout(() => {\n          setNameUpdateStatus(prev => ({ ...prev, success: false }));\n        }, 3000);\n      } else {\n        setNameUpdateStatus({ \n          loading: false, \n          error: result.error || 'Failed to update name', \n          success: false \n        });\n      }\n    } catch (err) {\n      setNameUpdateStatus({ \n        loading: false, \n        error: err.message || 'Failed to update name', \n        success: false \n      });\n    }\n  };\n\n  // Handle email update\n  const handleEmailUpdate = async () => {\n    if (!newEmail.trim() || !/\\S+@\\S+\\.\\S+/.test(newEmail)) {\n      setEmailUpdateStatus({ \n        loading: false, \n        error: \"Please enter a valid email\", \n        success: false \n      });\n      return;\n    }\n    \n    setEmailUpdateStatus({ loading: true, error: null, success: false });\n    \n    try {\n      const result = await updateEmail(newEmail.trim(),\n        currentUser.firstname,\n        currentUser.lastname\n      );\n      \n      if (result.success) {\n        setEmailUpdateStatus({ loading: false, error: null, success: true });\n        setEditEmail(false);\n        \n        // Show success message briefly\n        setTimeout(() => {\n          setEmailUpdateStatus(prev => ({ ...prev, success: false }));\n        }, 3000);\n      } else {\n        setEmailUpdateStatus({ \n          loading: false, \n          error: result.error || 'Failed to update email', \n          success: false \n        });\n      }\n    } catch (err) {\n      setEmailUpdateStatus({ \n        loading: false, \n        error: err.message || 'Failed to update email', \n        success: false \n      });\n    }\n  };\n\n  // Handle password update\n  const handlePasswordUpdate = async (e) => {\n    e.preventDefault();\n    \n    // Validate passwords\n    if (newPassword !== confirmPassword) {\n      setPasswordUpdateStatus({ loading: false, error: \"Passwords don't match\", success: false });\n      return;\n    }\n    \n    if (newPassword.length < 8) {\n      setPasswordUpdateStatus({ loading: false, error: \"Password must be at least 8 characters\", success: false });\n      return;\n    }\n    \n    setPasswordUpdateStatus({ loading: true, error: null, success: false });\n    \n    try {\n      const result = await updatePassword(currentPassword, newPassword);\n      if (result.success) {\n        setPasswordUpdateStatus({ loading: false, error: null, success: true });\n        \n        // Reset form and close it after success\n        setTimeout(() => {\n          setShowPasswordForm(false);\n          setCurrentPassword('');\n          setNewPassword('');\n          setConfirmPassword('');\n          setPasswordUpdateStatus(prev => ({ ...prev, success: false }));\n        }, 3000);\n      } else {\n        setPasswordUpdateStatus({ loading: false, error: result.error, success: false });\n      }\n    } catch (err) {\n      setPasswordUpdateStatus({ loading: false, error: err.message, success: false });\n    }\n  };\n\n  // Show loading state\n  if (loading && !currentUser) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error && !currentUser) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"bg-white p-8 rounded-xl shadow-md max-w-md w-full\">\n          <div className=\"flex items-center text-red-500 mb-4\">\n            <FiAlertCircle size={24} className=\"mr-2\" />\n            <h2 className=\"text-xl font-bold\">Error Loading Profile</h2>\n          </div>\n          <p className=\"text-gray-700\">{error}</p>\n          <button \n            onClick={() => window.location.reload()}\n            className=\"mt-4 w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-3xl mx-auto bg-white rounded-xl shadow-md overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 px-6 py-8 text-white\">\n          <h1 className=\"text-3xl font-bold\">My Account</h1>\n          <p className=\"mt-2 text-blue-100\">Manage your personal information and account settings</p>\n        </div>\n\n        {/* User Profile Section */}\n        <div className=\"p-6\">\n          \n\n          {/* User Information Section */}\n          <div className=\"space-y-6\">\n            {/* Name Field */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FiUser className=\"text-blue-500\" />\n                  <span className=\"font-medium text-gray-700\">Full Name</span>\n                </div>\n                {!editName ? (\n                  <button \n                    onClick={() => setEditName(true)}\n                    className=\"text-blue-500 hover:text-blue-700 flex items-center space-x-1\"\n                  >\n                    <FiEdit size={16} />\n                    <span>Edit</span>\n                  </button>\n                ) : null}\n              </div>\n              \n              {!editName ? (\n                <div className=\"mt-2 ml-8\">\n                  <p className=\"text-gray-800\">{getFullName()}</p>\n                  {nameUpdateStatus.success && (\n                    <p className=\"text-green-500 text-sm mt-1\">Name updated successfully!</p>\n                  )}\n                </div>\n              ) : (\n                <div className=\"mt-2 ml-8 space-y-2\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">First Name</label>\n                      <input\n                        type=\"text\"\n                        value={newFirstName}\n                        onChange={(e) => setNewFirstName(e.target.value)}\n                        className=\"border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Last Name</label>\n                      <input\n                        type=\"text\"\n                        value={newLastName}\n                        onChange={(e) => setNewLastName(e.target.value)}\n                        className=\"border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n                  {nameUpdateStatus.error && (\n                    <p className=\"text-red-500 text-sm\">{nameUpdateStatus.error}</p>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <button \n                      onClick={handleNameUpdate}\n                      disabled={nameUpdateStatus.loading}\n                      className={`bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600 flex items-center space-x-1 ${\n                        nameUpdateStatus.loading ? 'opacity-70 cursor-not-allowed' : ''\n                      }`}\n                    >\n                      {nameUpdateStatus.loading ? (\n                        <span className=\"inline-block h-4 w-4 rounded-full border-2 border-white border-t-transparent animate-spin mr-1\"></span>\n                      ) : (\n                        <FiSave size={16} />\n                      )}\n                      <span>Save</span>\n                    </button>\n                    <button \n                      onClick={() => {\n                        setEditName(false);\n                        setNewFirstName(currentUser?.firstname || '');\n                        setNewLastName(currentUser?.lastname || '');\n                        setNameUpdateStatus({ loading: false, error: null, success: false });\n                      }}\n                      className=\"bg-gray-300 text-gray-700 px-3 py-2 rounded-md hover:bg-gray-400\"\n                      disabled={nameUpdateStatus.loading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Email Field */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FiMail className=\"text-blue-500\" />\n                  <span className=\"font-medium text-gray-700\">Email Address</span>\n                </div>\n                {!editEmail ? (\n                  <button \n                    onClick={() => setEditEmail(true)}\n                    className=\"text-blue-500 hover:text-blue-700 flex items-center space-x-1\"\n                  >\n                    <FiEdit size={16} />\n                    <span>Edit</span>\n                  </button>\n                ) : null}\n              </div>\n              \n              {!editEmail ? (\n                <div className=\"mt-2 ml-8\">\n                  <p className=\"text-gray-800\">{currentUser?.email}</p>\n                  {emailUpdateStatus.success && (\n                    <p className=\"text-green-500 text-sm mt-1\">Email updated successfully!</p>\n                  )}\n                </div>\n              ) : (\n                <div className=\"mt-2 ml-8 space-y-2\">\n                  <input\n                    type=\"email\"\n                    value={newEmail}\n                    onChange={(e) => setNewEmail(e.target.value)}\n                    className=\"border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  {emailUpdateStatus.error && (\n                    <p className=\"text-red-500 text-sm\">{emailUpdateStatus.error}</p>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <button \n                      onClick={handleEmailUpdate}\n                      disabled={emailUpdateStatus.loading}\n                      className={`bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600 flex items-center space-x-1 ${\n                        emailUpdateStatus.loading ? 'opacity-70 cursor-not-allowed' : ''\n                      }`}\n                    >\n                      {emailUpdateStatus.loading ? (\n                        <span className=\"inline-block h-4 w-4 rounded-full border-2 border-white border-t-transparent animate-spin mr-1\"></span>\n                      ) : (\n                        <FiSave size={16} />\n                      )}\n                      <span>Save</span>\n                    </button>\n                    <button \n                      onClick={() => {\n                        setEditEmail(false);\n                        setNewEmail(currentUser?.email);\n                        setEmailUpdateStatus({ loading: false, error: null, success: false });\n                      }}\n                      className=\"bg-gray-300 text-gray-700 px-3 py-2 rounded-md hover:bg-gray-400\"\n                      disabled={emailUpdateStatus.loading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Password Section */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FiLock className=\"text-blue-500\" />\n                  <span className=\"font-medium text-gray-700\">Password</span>\n                </div>\n                {!showPasswordForm ? (\n                  <button \n                    onClick={() => setShowPasswordForm(true)}\n                    className=\"text-blue-500 hover:text-blue-700 flex items-center space-x-1\"\n                  >\n                    <FiEdit size={16} />\n                    <span>Change</span>\n                  </button>\n                ) : null}\n              </div>\n              \n              {!showPasswordForm ? (\n                <div className=\"mt-2 ml-8\">\n                  <p className=\"text-gray-800\">••••••••</p>\n                  {passwordUpdateStatus.success && (\n                    <p className=\"text-green-500 text-sm mt-1\">Password updated successfully!</p>\n                  )}\n                </div>\n              ) : (\n                <form onSubmit={handlePasswordUpdate} className=\"mt-2 ml-8 space-y-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Current Password</label>\n                    <input\n                      type=\"password\"\n                      value={currentPassword}\n                      onChange={(e) => setCurrentPassword(e.target.value)}\n                      className=\"mt-1 border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">New Password</label>\n                    <input\n                      type=\"password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      className=\"mt-1 border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Confirm New Password</label>\n                    <input\n                      type=\"password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      className=\"mt-1 border border-gray-300 rounded-md px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n                  \n                  {passwordUpdateStatus.error && (\n                    <p className=\"text-red-500 text-sm\">{passwordUpdateStatus.error}</p>\n                  )}\n                  \n                  <div className=\"flex space-x-2\">\n                    <button \n                      type=\"submit\"\n                      disabled={passwordUpdateStatus.loading}\n                      className={`bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 flex items-center space-x-1 ${\n                        passwordUpdateStatus.loading ? 'opacity-70 cursor-not-allowed' : ''\n                      }`}\n                    >\n                      {passwordUpdateStatus.loading ? (\n                        <span className=\"inline-block h-4 w-4 rounded-full border-2 border-white border-t-transparent animate-spin mr-1\"></span>\n                      ) : null}\n                      <span>Update Password</span>\n                    </button>\n                    <button \n                      type=\"button\"\n                      onClick={() => {\n                        setShowPasswordForm(false);\n                        setCurrentPassword('');\n                        setNewPassword('');\n                        setConfirmPassword('');\n                        setPasswordUpdateStatus({ loading: false, error: null, success: false });\n                      }}\n                      className=\"bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400\"\n                      disabled={passwordUpdateStatus.loading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </form>\n              )}\n            </div>\n          </div>          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Myaccount);\n","import React, { useState } from 'react';\nimport authService from '../../api/auth.jsx'; // Corrected import path\nimport LoadingSpinner from '../ui/LoadingSpinner.jsx';\n\nfunction RequestPasswordResetForm() {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setMessage('');\n    setError('');\n\n    if (!email) {\n      setError('Please enter your email address.');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // The API returns true on success or throws an error\n      await authService.requestPasswordReset(email);\n      setMessage('If an account exists for this email, a password reset link has been sent. Please check your inbox (and spam folder).');\n      setEmail(''); // Clear the email field on success\n    } catch (err) {\n      // Attempt to parse Magento's error structure if possible\n      const apiErrorMessage = err.response?.data?.message || err.message || 'An unexpected error occurred. Please try again.';\n      setError(\"This email does not exist. Please check and try again.\");\n\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-xl\">\n      <h2 className=\"text-2xl font-semibold text-center text-gray-800 mb-6\">Reset Your Password</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Email Address\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"you@example.com\"\n            required\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n          />\n        </div>\n\n        {message && (\n          <div className=\"mb-4 p-3 text-sm text-green-700 bg-green-100 border border-green-400 rounded-md\">\n            {message}\n          </div>\n        )}\n\n        {error && (\n          <div className=\"mb-4 p-3 text-sm text-red-700 bg-red-100 border border-red-400 rounded-md\">\n            {error}\n          </div>\n        )}\n\n        <div className=\"mt-6\">\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300\"\n          >\n            {loading ? <LoadingSpinner className=\"h-5 w-5 text-white\" /> : 'Send Password Reset Link'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default RequestPasswordResetForm;","import React, { lazy, Suspense } from \"react\";\nimport { Routes, Route, Navigate, useLocation } from \"react-router-dom\";\n\n// Layout Components\nimport Header from \"../components/layouts/Header\";\nimport Footer from \"../components/layouts/Footer\";\n\n// Utility\nimport { isAuthenticated } from \"../api/auth\";\nimport \"../styles/App.css\";\nimport LoadingSpinner from \"../components/ui/LoadingSpinner\";\n\n// Lazy-loaded Page Components\nconst HomePage = lazy(() => import(\"../pages/HomePage\"));\nconst Login = lazy(() => import(\"../pages/Login\"));\nconst AccountPage = lazy(() => import(\"../pages/AccountPage\"));\nconst ProductDetailPage = lazy(() => import(\"../pages/ProductDetailPage\"));\nconst FeaturedProducts = lazy(() => import(\"../pages/FeaturedProducts\"));\nconst CategoryProductListing = lazy(() => import(\"../pages/CategoryPage\"));\nconst Cart = lazy(() => import(\"../pages/Cart\"));\nconst Checkout = lazy(() => import(\"../pages/Checkout\"));\nconst SearchResults = lazy(() => import(\"../pages/SearchResults\"));\nconst WishlistPage = lazy(() => import(\"../pages/WishlistPage\"));\nconst Page404 = lazy(() => import(\"../Page404\"));\nconst Faqs = lazy(() => import(\"../pages/Faqs\"));\nconst ShippingReturns = lazy(() => import(\"../pages/ShippingReturns\"));\nconst PrivacyPolicyPage = lazy(() => import(\"../pages/PrivacyPolicyPage\"));\nconst ContactPage = lazy(() => import(\"../pages/ContactPage\"));\n\n// Account Sub-Sections — lazy load too if large in future\nimport Dashboard from \"../components/account/Dashboard\";\nimport Orders from \"../components/account/Orders\";\nimport OrderDetail from \"../components/account/OrderDetail\";\nimport AccountAddresses from \"../components/account/AccountAddresses\";\nimport Myaccount from \"../components/account/Myaccount\";\nimport RequestPasswordResetForm from \"../components/forms/RequestPasswordResetForm\";\n\n// Placeholder Components\nconst AccountReviews = () => <div className=\"p-6 text-lg\">Reviews Page</div>;\n\n// Protected Route Wrapper\nconst ProtectedRoute = ({ children }) => {\n  const location = useLocation();\n  return isAuthenticated() ? children : <Navigate to=\"/login\" state={{ from: location }} replace />;\n};\n\n// Main Routing Component\nfunction AppRoutes() {\n  return (\n    <>\n      {/* <Header /> */}\n\n      <Suspense fallback={<div className=\"flex justify-center items-center h-screen\"><LoadingSpinner /></div>}>\n        <Routes>\n          {/* Public Routes */}\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"resetpassword\" element= {<RequestPasswordResetForm />}  />\n          <Route path=\"/categorypage\" element={<FeaturedProducts />} />\n          <Route path=\"/category/:slug\" element={<CategoryProductListing />} />\n          <Route path=\"/product/:urlKey\" element={<ProductDetailPage />} />\n          <Route path=\"/cart\" element={<Cart />} />\n          <Route path=\"/checkout\" element={<Checkout />} />\n          <Route path=\"/search\" element={<SearchResults />} />\n          <Route path=\"/faq\" element={<Faqs />} />\n          <Route path=\"/shipping-returns\" element={<ShippingReturns />} />\n          <Route path=\"/contact\" element={<ContactPage />} />\n          <Route path=\"/privacy-policy\" element={<PrivacyPolicyPage />} />\n\n          {/* Protected Account Routes */}\n          <Route path=\"/account\" element={<ProtectedRoute><AccountPage /></ProtectedRoute>}>\n            <Route index element={<Dashboard />} />\n            <Route path=\"orders\" >\n              <Route index element={<Orders />} />\n              <Route path=\":orderId\" element={<OrderDetail />} />\n            </Route>\n            <Route path=\"addresses\" element={<AccountAddresses />} />\n            <Route path=\"edit\" element={<Myaccount />} />\n            <Route path=\"reviews\" element={<AccountReviews />} />\n          </Route>\n\n          {/* Protected Wishlist */}\n          <Route path=\"/wishlist\" element={<ProtectedRoute><WishlistPage /></ProtectedRoute>} />\n\n          {/* 404 */}\n          <Route path=\"*\" element={<Page404 />} />\n        </Routes>\n      </Suspense>\n\n      {/* <Footer /> */}\n    </>\n  );\n}\n\nexport default AppRoutes;\n","import { getCachedData } from './cacheUtils';\n\n// Cache keys for product-related data\nexport const PRODUCT_CACHE_KEYS = {\n  ALL_PRODUCTS: (criteria) => `all-products-${JSON.stringify(criteria || {})}`,\n  PRODUCT_BY_ID: (id) => `product-${id}`,\n  PRODUCT_BY_SKU: (sku) => `product-sku-${sku}`,\n  PRODUCT_BY_URL_KEY: (urlKey) => `product-url-${urlKey}`,\n  SEARCH_PRODUCTS: (term, page, size) => `search-products-${term}-${page}-${size}`,\n  FEATURED_PRODUCTS: (size) => `featured-products-${size}`,\n  NEW_PRODUCTS: (size) => `new-products-${size}`,\n  BEST_SELLING: (size) => `best-selling-${size}`,\n  RELATED_PRODUCTS: (sku) => `related-products-${sku}`,\n  CROSS_SELL: (sku) => `cross-sell-${sku}`,\n  UP_SELL: (sku) => `up-sell-${sku}`,\n  PRODUCT_REVIEWS: (sku) => `product-reviews-${sku}`,\n  PRODUCT_ATTRIBUTES: (code) => `product-attributes-${code}`,\n  PRODUCTS_BY_CATEGORY: (categoryId, criteria) => `products-category-${categoryId}-${JSON.stringify(criteria || {})}`,\n  PRODUCT_FILTERS: (categoryId) => `product-filters-${categoryId}`,\n  PRODUCT_STOCK: (sku) => `product-stock-${sku}`,\n  GLOBAL_PRODUCT_AGGREGATIONS: 'global-product-aggregations', // New key\n};\n\n// Default cache times\nconst CACHE_TIMES = {\n  PRODUCT_LIST: 5 * 60 * 1000, // 5 minutes\n  PRODUCT_DETAIL: 10 * 60 * 1000, // 10 minutes\n  PRODUCT_ATTRIBUTES: 30 * 60 * 1000, // 30 minutes\n  PRODUCT_REVIEWS: 5 * 60 * 1000, // 5 minutes\n  PRODUCT_STOCK: 2 * 60 * 1000, // 2 minutes (shorter for stock info)\n  GLOBAL_PRODUCT_AGGREGATIONS: 30 * 60 * 1000, // 30 minutes, similar to attributes/filters\n};\n\n/**\n * Get cached product data\n * @param {string} key - Cache key\n * @param {Function} fetcher - Function to fetch data if not in cache\n * @param {string} cacheType - Type of cache (for determining expiration)\n * @returns {Promise} - Promise resolving to data\n */\nexport const getCachedProductData = (key, fetcher, cacheType = 'PRODUCT_LIST') => {\n  return getCachedData(\n    key,\n    fetcher,\n    { cacheTime: CACHE_TIMES[cacheType] }\n  );\n};\n\nexport default {\n  PRODUCT_CACHE_KEYS,\n  CACHE_TIMES,\n  getCachedProductData\n};","import { getCachedProductData } from \"./productCacheUtils\";\nimport { PRODUCT_CACHE_KEYS } from \"./productCacheUtils\";\nimport { gql } from \"@apollo/client\";\nimport { apolloClient } from \"./apolloClient\";\n\n// Define reusable fragments for GraphQL queries\nconst PRODUCT_BASIC_FRAGMENT = gql`\n  fragment ProductBasicFields on ProductInterface {\n    id\n    sku\n    name\n    url_key\n    type_id # Added to identify product type\n    __typename # Added to get GraphQL object type\n    price_range {\n      minimum_price {\n        regular_price {\n          value\n          currency\n        }\n        final_price {\n          value\n          currency\n        }\n        discount {\n          amount_off\n          percent_off\n        }\n      }\n    }\n    small_image {\n      url\n      label\n    }\n  }\n`;\n\nconst PRODUCT_DETAIL_FRAGMENT = gql`\n  fragment ProductDetailFields on ProductInterface {\n    ...ProductBasicFields\n    description {\n      html\n    }\n    short_description {\n      html\n    }\n    meta_title\n    meta_keyword\n    meta_description\n    media_gallery {\n      url\n      label\n      position\n    }\n    categories {\n      id\n      name\n      url_key\n      url_path\n    }\n    stock_status\n    only_x_left_in_stock\n    rating_summary\n    review_count\n    special_price\n    special_from_date\n    special_to_date\n\n    ... on ConfigurableProduct {\n      configurable_options {\n        id\n        attribute_id\n        label\n        position\n        use_default\n        attribute_code\n        values {\n          value_index\n          label\n          swatch_data {\n            # type field removed as it's not standard on SwatchDataInterface directly\n            value # e.g., hex color, image path\n            # thumbnail # Optionally query for thumbnail if your swatches use it\n          }\n        }\n      }\n      variants {\n        product {\n          id\n          sku\n          name # Add name for variant display\n          stock_status # Add stock_status for variant\n          price_range {\n            # Add price for variant\n            minimum_price {\n              final_price {\n                value\n                currency\n              }\n              regular_price {\n                value\n                currency\n              }\n            }\n          }\n          small_image {\n            url\n            label\n          }\n          # Potentially more fields if needed for variant selection logic\n        }\n        attributes {\n          code\n          value_index\n          label # Add label for variant attribute\n        }\n      }\n    }\n\n    ... on BundleProduct {\n      items {\n        option_id\n        title\n        required\n        type\n        position\n        sku\n        options {\n          id\n          quantity\n          position\n          is_default\n          price\n          price_type\n          can_change_quantity\n          label # Product name for the option\n          product {\n            id\n            sku\n            name\n            stock_status\n            price_range {\n              minimum_price {\n                final_price {\n                  value\n                  currency\n                }\n              }\n            }\n            small_image {\n              url\n              label\n            }\n          }\n        }\n      }\n    }\n\n    ... on DownloadableProduct {\n      downloadable_product_links {\n        id\n        title\n        price\n        number_of_downloads\n        is_shareable\n        #link_file # Corrected from link_url, this is typically the relative path to the file\n        sample_type # Added to know if sample is a URL or file\n        sample_file # Path to sample file\n        sample_url # URL for sample if it's an external link\n        sort_order\n      }\n      downloadable_product_samples {\n        id\n        title\n        sample_type # Added to know if sample is a URL or file\n        sample_file # Path to sample file\n        sample_url # URL for sample if it's an external link\n        sort_order\n      }\n      links_purchased_separately\n    }\n    ... on GroupedProduct {\n      items {\n        product {\n          id\n          sku\n          name\n          type_id # Good to have for completeness\n          stock_status\n          url_key # For linking to the simple product page\n          price_range {\n            # Price of the individual simple product\n            minimum_price {\n              final_price {\n                value\n                currency\n              }\n              regular_price {\n                value\n                currency\n              }\n            }\n          }\n          small_image {\n            url\n            label\n          }\n          # ...ProductBasicFields # Alternatively, spread basic fields if all are needed\n        }\n        qty # This is default_quantity for the grouped product item\n        position\n      }\n    }\n  }\n  ${PRODUCT_BASIC_FRAGMENT}\n`;\n\n/**\n * Get products with filters\n * @param {Object} searchCriteria - Search criteria for filtering products\n * @returns {Promise} - Promise resolving to products data\n */\nexport const getProducts = async (searchCriteria = {}) => {\n \n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.ALL_PRODUCTS(searchCriteria),\n    async () => {\n      try {\n        // Extract pagination and sorting from search criteria\n        const {\n          pageSize = 20,\n          currentPage = 1,\n          // sortField and sortDirection will be determined below\n          filterGroups = [],\n          searchTerm, // Add searchTerm here\n        } = searchCriteria;\n\n        // Determine sort order\n        // If a searchTerm is present and no specific sort is provided in searchCriteria, sort by relevance.\n        // Otherwise, if no specific sort is provided, sort by position.\n        const resolvedSortField = searchCriteria.sortField || (searchTerm ? \"relevance\" : \"position\");\n        const resolvedSortDirection = searchCriteria.sortDirection || (searchTerm ? \"DESC\" : \"ASC\");\n\n        // Build GraphQL filter from filterGroups\n        const filter = {};\n        if (Array.isArray(filterGroups)) {\n          filterGroups.forEach((group) => {\n            if (group && Array.isArray(group.filters)) {\n              group.filters.forEach((filterItem) => {\n                // Convert REST API filter to GraphQL filter\n                const { field, value, condition_type, from, to } = filterItem; // Add from and to\n\n                if (field === \"price\" && (from || to)) {\n                  // Special handling for price range\n                  if (!filter.price) {\n                    filter.price = {};\n                  }\n                  if (from) {\n                    filter.price.from = String(from); // Ensure string for GraphQL\n                  }\n                  if (to) {\n                    filter.price.to = String(to); // Ensure string for GraphQL\n                  }\n                } else {\n                  // Existing logic for other filters\n                  if (!filter[field]) {\n                    filter[field] = {};\n                  }\n                  // Map REST API condition types to GraphQL condition types\n                  switch (condition_type) {\n                    case \"eq\":\n                      filter[field][\"eq\"] = value;\n                      break;\n                    case \"neq\":\n                      filter[field][\"neq\"] = value;\n                      break;\n                    case \"like\":\n                      filter[field][\"match\"] = value;\n                      break;\n                    case \"in\":\n                      filter[field][\"in\"] = Array.isArray(value)\n                        ? value\n                        : [value];\n                      break;\n                    case \"nin\":\n                      filter[field][\"nin\"] = Array.isArray(value)\n                        ? value\n                        : [value];\n                      break;\n                    case \"gt\":\n                      filter[field][\"gt\"] = value;\n                      break;\n                    case \"lt\":\n                      filter[field][\"lt\"] = value;\n                      break;\n                    case \"gteq\":\n                      filter[field][\"gteq\"] = value;\n                      break;\n                    case \"lteq\":\n                      filter[field][\"lteq\"] = value;\n                      break;\n                    default:\n                      filter[field][\"eq\"] = value;\n                  }\n                }\n              });\n            }\n          });\n        }\n\n        // Build sort input - IMPORTANT: Ensure sort direction is uppercase for GraphQL enum\n        const sortInput = {};\n        sortInput[resolvedSortField] = resolvedSortDirection.toUpperCase(); // Convert to uppercase for GraphQL enum\n\n        // Execute GraphQL query\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProducts(\n              $filter: ProductAttributeFilterInput\n              $search: String # Add search term variable\n              $pageSize: Int!\n              $currentPage: Int!\n              $sort: ProductAttributeSortInput\n            ) {\n              products(\n                filter: $filter\n                search: $search # Add search term to query\n                pageSize: $pageSize\n                currentPage: $currentPage\n                sort: $sort\n              ) {\n                total_count\n                items {\n                  ...ProductBasicFields\n                  id\n                  name\n                  sku\n                  url_key\n                  stock_status\n                  price_range {\n                    minimum_price {\n                      regular_price {\n                        value\n                        currency\n                      }\n                      final_price {\n                        value\n                        currency\n                      }\n                      discount {\n                        amount_off\n                        percent_off\n                      }\n                    }\n                  }\n                  small_image {\n                    url\n                    label\n                  }\n                }\n                page_info {\n                  page_size\n                  current_page\n                  total_pages\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: {\n            filter,\n            search: searchTerm, // Pass searchTerm variable\n            pageSize,\n            currentPage,\n            sort: sortInput,\n          },\n          fetchPolicy: \"cache-first\",\n        });\n\n        // Format response to match REST API structure\n        return {\n          items: data.products.items || [],\n          total_count: data.products.total_count || 0,\n          page_info: {\n            page_size: searchCriteria.pageSize,\n            current_page: searchCriteria.currentPage,\n            total_pages: Math.ceil(data.products.total_count / searchCriteria.pageSize)\n          }\n        };\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n\n        // Return empty result set on error to prevent UI crashes\n        return {\n          items: [],\n          total_count: 0,\n          search_criteria: searchCriteria,\n          page_info: {\n            page_size: searchCriteria.pageSize || 20,\n            current_page: searchCriteria.currentPage || 1,\n            total_pages: 0,\n          },\n        };\n      }\n    },\n    \"PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get product by ID\n * @param {number} id - Product ID\n * @returns {Promise} - Promise resolving to product data\n */\nexport const getProductById = async (id) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_BY_ID(id),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductById($id: Int!) {\n              products(filter: { id: { eq: $id } }) {\n                items {\n                  ...ProductDetailFields\n                }\n              }\n            }\n            ${PRODUCT_DETAIL_FRAGMENT}\n          `,\n          variables: { id: parseInt(id, 10) },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          throw new Error(`Product with ID ${id} not found`);\n        }\n\n        return data.products.items[0];\n      } catch (error) {\n        console.error(`Error fetching product with ID ${id}:`, error);\n        throw error;\n      }\n    },\n    \"PRODUCT_DETAIL\"\n  );\n};\n\n/**\n * Get product by SKU\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to product data\n */\nexport const getProductBySku = async (sku) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_BY_SKU(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductBySku($sku: String!) {\n              products(filter: { sku: { eq: $sku } }) {\n                items {\n                  ...ProductDetailFields\n                }\n              }\n            }\n            ${PRODUCT_DETAIL_FRAGMENT}\n          `,\n          variables: { sku },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          throw new Error(`Product with SKU ${sku} not found`);\n        }\n\n        return data.products.items[0];\n      } catch (error) {\n        console.error(`Error fetching product with SKU ${sku}:`, error);\n        throw error;\n      }\n    },\n    \"PRODUCT_DETAIL\"\n  );\n};\n\n/**\n * Get product by URL key\n * @param {string} urlKey - Product URL key\n * @returns {Promise} - Promise resolving to product data\n */\nexport const getProductByUrlKey = async (urlKey) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_BY_URL_KEY(urlKey),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductByUrlKey($urlKey: String!) {\n              products(filter: { url_key: { eq: $urlKey } }) {\n                items {\n                  ...ProductDetailFields\n                  id\n                  name\n                  sku\n                  url_key\n                  type_id\n                  __typename\n                  stock_status\n                  description {\n                    html\n                  }\n                  short_description {\n                    html\n                  }\n                  meta_title\n                  meta_keyword\n                  meta_description\n\n                  price_range {\n                    minimum_price {\n                      regular_price {\n                        value\n                        currency\n                      }\n                      final_price {\n                        value\n                        currency\n                      }\n                      discount {\n                        amount_off\n                        percent_off\n                      }\n                    }\n                  }\n                  media_gallery {\n                    url\n                    label\n                  }\n\n                  ... on ConfigurableProduct {\n                    configurable_options {\n                      attribute_code\n                      values {\n                        uid\n                        value_index\n                        label\n                      }\n                    }\n                    variants {\n                      attributes {\n                        code\n                        value_index\n                      }\n                      product {\n                        id\n                        name\n                        sku\n                        stock_status\n                        price_range {\n                          minimum_price {\n                            regular_price {\n                              value\n                              currency\n                            }\n                            final_price {\n                              value\n                              currency\n                            }\n                            discount {\n                              amount_off\n                              percent_off\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n\n                  ... on DownloadableProduct {\n                    downloadable_product_links {\n                      id\n                      title\n                      price\n                      sort_order\n                    }\n                  }\n\n                  ... on GroupedProduct {\n                    items {\n                      position\n                      qty\n                      product {\n                        id\n                        name\n                        sku\n                        stock_status\n                        price_range {\n                          minimum_price {\n                            regular_price {\n                              value\n                              currency\n                            }\n                            final_price {\n                              value\n                              currency\n                            }\n                            discount {\n                              amount_off\n                              percent_off\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            ${PRODUCT_DETAIL_FRAGMENT}\n          `,\n          variables: { urlKey },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          throw new Error(`Product with URL key ${urlKey} not found`);\n        }\n\n        return data.products.items[0];\n      } catch (error) {\n        console.error(`Error fetching product with URL key ${urlKey}:`, error);\n        throw error;\n      }\n    },\n    \"PRODUCT_DETAIL\"\n  );\n};\n\n/**\n * Search products\n * @param {string} searchTerm - Search term\n * @param {Object} options - Search options\n * @returns {Promise} - Promise resolving to search results\n */\nexport const searchProducts = async (searchTerm, options = {}) => {\n  const {\n    pageSize = 20,\n    currentPage = 1,\n    sortField = \"relevance\",\n    sortDirection = \"DESC\",\n    filterGroups = [],\n  } = options;\n\n  // Construct a comprehensive cache key\n  const cacheKey = `search_products_term-${searchTerm}_page-${currentPage}_size-${pageSize}_sort-${sortField}-${sortDirection.toUpperCase()}_filters-${JSON.stringify(filterGroups)}`;\n\n  return getCachedProductData(\n    cacheKey, // Use the new comprehensive cache key\n    async () => {\n      try {\n        // Options are already destructured above for cacheKey generation\n\n        // Build sort input - ensure uppercase for GraphQL enum\n        const sortInput = {};\n        sortInput[sortField] = sortDirection.toUpperCase();\n\n        // Build GraphQL filter from filterGroups (similar to getProducts)\n        const gqlFilter = {};\n        if (Array.isArray(filterGroups)) {\n          filterGroups.forEach((group) => {\n            if (group && Array.isArray(group.filters)) {\n              group.filters.forEach((filterItem) => {\n                const { field, value, condition_type, from, to } = filterItem;\n                if (field === \"price\" && (from || to)) {\n                  if (!gqlFilter.price) gqlFilter.price = {};\n                  if (from) gqlFilter.price.from = String(from);\n                  if (to) gqlFilter.price.to = String(to);\n                } else {\n                  if (!gqlFilter[field]) gqlFilter[field] = {};\n                  switch (condition_type) {\n                    case \"eq\": gqlFilter[field][\"eq\"] = value; break;\n                    case \"neq\": gqlFilter[field][\"neq\"] = value; break;\n                    case \"like\": gqlFilter[field][\"match\"] = value; break;\n                    case \"in\": gqlFilter[field][\"in\"] = Array.isArray(value) ? value : [value]; break;\n                    case \"nin\": gqlFilter[field][\"nin\"] = Array.isArray(value) ? value : [value]; break;\n                    case \"gt\": gqlFilter[field][\"gt\"] = value; break;\n                    case \"lt\": gqlFilter[field][\"lt\"] = value; break;\n                    case \"gteq\": gqlFilter[field][\"gteq\"] = value; break;\n                    case \"lteq\": gqlFilter[field][\"lteq\"] = value; break;\n                    default: gqlFilter[field][\"eq\"] = value;\n                  }\n                }\n              });\n            }\n          });\n        }\n\n        const { data } = await apolloClient.query({\n          query: gql`\n            query SearchProducts(\n              $searchTerm: String!\n              $pageSize: Int!\n              $currentPage: Int!\n              $sort: ProductAttributeSortInput\n              $filter: ProductAttributeFilterInput # Add filter variable\n            ) {\n              products(\n                search: $searchTerm\n                pageSize: $pageSize\n                currentPage: $currentPage\n                sort: $sort\n                filter: $filter # Use filter in the query\n              ) {\n                total_count\n                items {\n                  ...ProductBasicFields\n                  id\n                  sku\n                  name\n                  url_key\n                  stock_status\n                  price_range {\n                    minimum_price {\n                      regular_price {\n                        value\n                        currency\n                      }\n                      final_price {\n                        value\n                        currency\n                      }\n                      discount {\n                        amount_off\n                        percent_off\n                      }\n                    }\n                  }\n                  small_image {\n                    url\n                    label\n                  }\n                }\n                page_info {\n                  page_size\n                  current_page\n                  total_pages\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: {\n            searchTerm,\n            pageSize,\n            currentPage,\n            sort: sortInput,\n            filter: gqlFilter, // Pass the transformed filter\n          },\n          fetchPolicy: \"cache-first\",\n        });\n\n        return {\n          items: data.products.items || [],\n          total_count: data.products.total_count || 0,\n          search_criteria: { // Reflect the criteria used\n            search_term: searchTerm,\n            page_size: pageSize,\n            current_page: currentPage,\n            sort_orders: [{ field: sortField, direction: sortDirection }],\n            filter_groups: filterGroups, // Include original filter groups for context\n          },\n          page_info: data.products.page_info || {\n            page_size: pageSize,\n            current_page: currentPage,\n            total_pages: Math.ceil((data.products.total_count || 0) / pageSize),\n          },\n        };\n      } catch (error) {\n        console.error(\n          `Error searching products for term \"${searchTerm}\":`,\n          error\n        );\n        return { // Return a consistent structure on error\n          items: [],\n          total_count: 0,\n          search_criteria: {\n            search_term: searchTerm,\n            page_size: pageSize, // Use destructured pageSize\n            current_page: currentPage, // Use destructured currentPage\n            sort_orders: [{ field: sortField, direction: sortDirection.toUpperCase() }], // Use destructured sort\n            filter_groups: filterGroups, // Use destructured filterGroups\n          },\n          page_info: {\n            page_size: pageSize, // Use destructured pageSize\n            current_page: currentPage, // Use destructured currentPage\n            total_pages: 0,\n          },\n        };\n      }\n    },\n    \"PRODUCT_LIST\" // Consider a more specific cache type if needed, e.g., \"SEARCH_PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get featured products\n * @param {number} pageSize - Number of products to fetch\n * @returns {Promise} - Promise resolving to featured products\n */\n// export const getFeaturedProducts = async (pageSize = 10) => {\n//   return getCachedProductData(\n//     PRODUCT_CACHE_KEYS.FEATURED_PRODUCTS(pageSize),\n//     async () => {\n//       try {\n//         const { data } = await apolloClient.query({\n//           query: gql`\n//             query GetFeaturedProducts($pageSize: Int!) {\n//               products(\n//                 filter: { is_featured: { eq: \"1\" } }\n//                 pageSize: $pageSize\n//                 sort: { position: ASC }\n//               ) {\n//                 total_count\n//                 items {\n//                   ...ProductBasicFields\n//                 }\n//               }\n//             }\n//             ${PRODUCT_BASIC_FRAGMENT}\n//           `,\n//           variables: { pageSize },\n//           fetchPolicy: \"cache-first\",\n//         });\n\n//         return {\n//           items: data.products.items || [],\n//           total_count: data.products.total_count || 0,\n//         };\n//       } catch (error) {\n//         console.error(\"Error fetching featured products:\", error);\n//         return { items: [], total_count: 0 };\n//       }\n//     },\n//     \"PRODUCT_LIST\"\n//   );\n// };\n\n/**\n * Get new products\n * @param {number} pageSize - Number of products to fetch\n * @returns {Promise} - Promise resolving to new products\n */\n// export const getNewProducts = async (pageSize = 10) => {\n//   return getCachedProductData(\n//     PRODUCT_CACHE_KEYS.NEW_PRODUCTS(pageSize),\n//     async () => {\n//       try {\n//         const { data } = await apolloClient.query({\n//           query: gql`\n//             query GetNewProducts($pageSize: Int!) {\n//               products(\n//                 filter: { news_from_date: { lt: \"now\" } }\n//                 pageSize: $pageSize\n//                 sort: { created_at: DESC }\n//               ) {\n//                 total_count\n//                 items {\n//                   ...ProductBasicFields\n//                 }\n//               }\n//             }\n//             ${PRODUCT_BASIC_FRAGMENT}\n//           `,\n//           variables: { pageSize },\n//           fetchPolicy: \"cache-first\",\n//         });\n\n//         return {\n//           items: data.products.items || [],\n//           total_count: data.products.total_count || 0,\n//         };\n//       } catch (error) {\n//         console.error(\"Error fetching new products:\", error);\n//         return { items: [], total_count: 0 };\n//       }\n//     },\n//     \"PRODUCT_LIST\"\n//   );\n// };\n\n/**\n * Get products by category ID\n * @param {number} categoryId - Category ID\n * @param {Object} searchCriteria - Additional search criteria\n * @returns {Promise} - Promise resolving to products in category\n */\nexport const getProductsByCategory = async (\n  categoryId,\n  searchCriteria = {}\n) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCTS_BY_CATEGORY(categoryId, searchCriteria),\n    async () => {\n      try {\n        // Extract pagination and sorting from search criteria\n        const {\n          pageSize = 20,\n          currentPage = 1,\n          sortField = \"position\",\n          sortDirection = \"ASC\",\n          filterGroups = [],\n        } = searchCriteria;\n\n        // Ensure sort direction is uppercase for GraphQL enum\n        const normalizedSortDirection =\n          typeof sortDirection === \"string\"\n            ? sortDirection.toUpperCase()\n            : \"ASC\";\n        // Build additional filters from filterGroups\n        const additionalFilters = {};\n        if (Array.isArray(filterGroups)) {\n          filterGroups.forEach((group) => {\n            if (group && Array.isArray(group.filters)) {\n              group.filters.forEach((filterItem) => {\n                if (filterItem.field !== \"category_id\") {\n                  // Skip category_id as we're already filtering by it\n                  const { field, value, condition_type, from, to } = filterItem;\n\n                  if (field === \"price\" && (from || to)) {\n                    if (!additionalFilters.price) {\n                      additionalFilters.price = {};\n                    }\n                    if (from && from !== \"*\") {\n                      additionalFilters.price.from = String(from);\n                    }\n                    if (to && to !== \"*\") {\n                      additionalFilters.price.to = String(to);\n                    }\n                  } else {\n                    if (!additionalFilters[field]) {\n                      additionalFilters[field] = {};\n                    }\n                    // Map REST API condition types to GraphQL condition types\n                    switch (condition_type) {\n                      case \"eq\":\n                        additionalFilters[field][\"eq\"] = value;\n                        break;\n                      case \"neq\":\n                        additionalFilters[field][\"neq\"] = value;\n                        break;\n                      case \"like\":\n                        additionalFilters[field][\"match\"] = value;\n                        break;\n                      case \"in\":\n                        additionalFilters[field][\"in\"] = Array.isArray(value)\n                          ? value\n                          : [value];\n                        break;\n                      case \"nin\":\n                        additionalFilters[field][\"nin\"] = Array.isArray(value)\n                          ? value\n                          : [value];\n                        break;\n                      case \"gt\":\n                        additionalFilters[field][\"gt\"] = value;\n                        break;\n                      case \"lt\":\n                        additionalFilters[field][\"lt\"] = value;\n                        break;\n                      case \"gteq\":\n                        additionalFilters[field][\"gteq\"] = value;\n                        break;\n                      case \"lteq\":\n                        additionalFilters[field][\"lteq\"] = value;\n                        break;\n                      default:\n                        // Only apply 'eq' if condition_type is truly undefined and not handled by other logic\n                        if (typeof condition_type === 'undefined') {\n                           additionalFilters[field][\"eq\"] = value;\n                        }\n                    }\n                  }\n                }\n              });\n            }\n          });\n        }\n\n        // Build sort input - IMPORTANT: Ensure sort direction is uppercase for GraphQL enum\n        const sortInput = {};\n        sortInput[sortField] = normalizedSortDirection;\n        // Combine category filter with additional filters\n        const combinedFilter = {\n          category_id: { eq: String(categoryId) },\n          ...additionalFilters,\n        };\n\n        // Execute GraphQL query\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductsByCategory(\n              $filter: ProductAttributeFilterInput\n              $pageSize: Int!\n              $currentPage: Int!\n              $sort: ProductAttributeSortInput\n            ) {\n              products(\n                filter: $filter\n                pageSize: $pageSize\n                currentPage: $currentPage\n                sort: $sort\n              ) {\n                total_count\n                items {\n                  ...ProductBasicFields\n                  stock_status\n                  id\n                  sku\n                  name\n                  url_key\n\n                  price_range {\n                    minimum_price {\n                      regular_price {\n                        value\n                        currency\n                      }\n                      final_price {\n                        value\n                        currency\n                      }\n                      discount {\n                        amount_off\n                        percent_off\n                      }\n                    }\n                  }\n                  small_image {\n                    url\n                    label\n                  }\n                  rating_summary\n                  review_count\n                }\n                page_info {\n                  page_size\n                  current_page\n                  total_pages\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: {\n            filter: combinedFilter,\n            pageSize,\n            currentPage,\n            sort: sortInput,\n          },\n          fetchPolicy: \"cache-first\",\n        });\n\n        return {\n          items: data.products.items || [],\n          total_count: data.products.total_count || 0,\n          search_criteria: {\n            filter_groups: [\n              {\n                filters: [\n                  {\n                    field: \"category_id\",\n                    value: String(categoryId),\n                    condition_type: \"eq\",\n                  },\n                ],\n              },\n              ...filterGroups,\n            ],\n            page_size: pageSize,\n            current_page: currentPage,\n            sort_orders: [\n              {\n                field: sortField,\n                direction: normalizedSortDirection,\n              },\n            ],\n          },\n          page_info: data.products.page_info || {\n            page_size: pageSize,\n            current_page: currentPage,\n            total_pages: 0,\n          },\n        };\n      } catch (error) {\n        console.error(\n          `Error fetching products for category ${categoryId}:`,\n          error\n        );\n\n        // Return empty result set on error to prevent UI crashes\n        return {\n          items: [],\n          total_count: 0,\n          search_criteria: {\n            filter_groups: [\n              {\n                filters: [\n                  {\n                    field: \"category_id\",\n                    value: String(categoryId),\n                    condition_type: \"eq\",\n                  },\n                ],\n              },\n            ],\n            page_size: searchCriteria.pageSize || 20,\n            current_page: searchCriteria.currentPage || 1,\n            sort_orders: [\n              {\n                field: searchCriteria.sortField || \"position\",\n                direction: (\n                  searchCriteria.sortDirection || \"ASC\"\n                ).toUpperCase(),\n              },\n            ],\n          },\n          page_info: {\n            page_size: searchCriteria.pageSize || 20,\n            current_page: searchCriteria.currentPage || 1,\n            total_pages: 0,\n          },\n        };\n      }\n    },\n    \"PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get related products\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to related products\n */\nexport const getRelatedProducts = async (sku) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.RELATED_PRODUCTS(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetRelatedProducts($sku: String!) {\n              products(filter: { sku: { eq: $sku } }) {\n                items {\n                  related_products {\n                    ...ProductBasicFields\n                  }\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: { sku },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          return [];\n        }\n\n        return data.products.items[0].related_products || [];\n      } catch (error) {\n        console.error(`Error fetching related products for SKU ${sku}:`, error);\n        return [];\n      }\n    },\n    \"PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get cross-sell products\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to cross-sell products\n */\nexport const getCrossSellProducts = async (sku) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.CROSS_SELL(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetCrossSellProducts($sku: String!) {\n              products(filter: { sku: { eq: $sku } }) {\n                items {\n                  crosssell_products {\n                    ...ProductBasicFields\n                  }\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: { sku },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          return [];\n        }\n\n        return data.products.items[0].crosssell_products || [];\n      } catch (error) {\n        console.error(\n          `Error fetching cross-sell products for SKU ${sku}:`,\n          error\n        );\n        return [];\n      }\n    },\n    \"PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get up-sell products\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to up-sell products\n */\nexport const getUpSellProducts = async (sku) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.UP_SELL(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetUpSellProducts($sku: String!) {\n              products(filter: { sku: { eq: $sku } }) {\n                items {\n                  upsell_products {\n                    ...ProductBasicFields\n                  }\n                }\n              }\n            }\n            ${PRODUCT_BASIC_FRAGMENT}\n          `,\n          variables: { sku },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          return [];\n        }\n\n        return data.products.items[0].upsell_products || [];\n      } catch (error) {\n        console.error(`Error fetching up-sell products for SKU ${sku}:`, error);\n        return [];\n      }\n    },\n    \"PRODUCT_LIST\"\n  );\n};\n\n/**\n * Get product reviews\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to product reviews\n */\nexport const getProductReviews = async (sku) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_REVIEWS(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductReviews($sku: String!) {\n              products(filter: { sku: { eq: $sku } }) {\n                items {\n                  reviews {\n                    items {\n                      nickname\n                      summary\n                      text\n                      average_rating\n                      created_at\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: { sku },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products.items.length) {\n          return [];\n        }\n\n        return data.products.items[0].reviews?.items || [];\n      } catch (error) {\n        console.error(`Error fetching reviews for SKU ${sku}:`, error);\n        return [];\n      }\n    },\n    \"PRODUCT_REVIEWS\"\n  );\n};\n\n/**\n * Submit product review\n * @param {string} sku - Product SKU\n * @param {Object} reviewData - Review data\n * @returns {Promise} - Promise resolving to submission result\n */\nexport const submitProductReview = async (sku, reviewData) => {\n  try {\n    const { data } = await apolloClient.mutate({\n      mutation: gql`\n        mutation CreateProductReview(\n          $sku: String!\n          $nickname: String!\n          $summary: String!\n          $text: String!\n          $ratings: [ProductReviewRatingInput!]!\n        ) {\n          createProductReview(\n            input: {\n              sku: $sku\n              nickname: $nickname\n              summary: $summary\n              text: $text\n              ratings: $ratings\n            }\n          ) {\n            review {\n              nickname\n              summary\n              text\n              average_rating\n              created_at\n            }\n          }\n        }\n      `,\n      variables: {\n        sku,\n        nickname: reviewData.nickname,\n        summary: reviewData.summary,\n        text: reviewData.text,\n        ratings: reviewData.ratings.map((rating) => ({\n          id: rating.id,\n          value_id: rating.value_id,\n        })),\n      },\n    });\n\n    return data.createProductReview.review;\n  } catch (error) {\n    console.error(`Error submitting review for SKU ${sku}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get product attributes\n * @param {string} attributeCode - Attribute code\n * @returns {Promise} - Promise resolving to attribute data\n */\nexport const getProductAttributes = async (attributeCode) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_ATTRIBUTES(attributeCode),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductAttributes($attributeCode: String!) {\n              customAttributeMetadata(\n                attributes: [\n                  {\n                    attribute_code: $attributeCode\n                    entity_type: \"catalog_product\"\n                  }\n                ]\n              ) {\n                items {\n                  attribute_code\n                  attribute_type\n                  entity_type\n                  input_type\n                  attribute_options {\n                    value\n                    label\n                  }\n                }\n              }\n            }\n          `,\n          variables: { attributeCode },\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.customAttributeMetadata.items.length) {\n          throw new Error(`Attribute ${attributeCode} not found`);\n        }\n\n        return data.customAttributeMetadata.items[0];\n      } catch (error) {\n        console.error(`Error fetching attribute ${attributeCode}:`, error);\n        throw error;\n      }\n    },\n    \"PRODUCT_ATTRIBUTES\"\n  );\n};\n\n/**\n * Get product filters for category\n * @param {number} categoryId - Category ID\n * @returns {Promise} - Promise resolving to filter data\n */\nexport const getProductFilters = async (categoryId) => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_FILTERS(categoryId),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetProductFilters($categoryId: String!) {\n              products(filter: { category_id: { eq: $categoryId } }) {\n                aggregations {\n                  attribute_code\n                  count\n                  label\n                  options {\n                    label\n                    value\n                    count\n                  }\n                }\n              }\n            }\n          `,\n          variables: { categoryId: String(categoryId) },\n          fetchPolicy: \"cache-first\",\n        });\n\n        return data.products.aggregations || [];\n      } catch (error) {\n        console.error(\n          `Error fetching filters for category ${categoryId}:`,\n          error\n        );\n        return [];\n      }\n    },\n    \"PRODUCT_FILTERS\"\n  );\n};\n\n/**\n * Get best selling products\n * @param {number} pageSize - Number of products to fetch\n * @returns {Promise} - Promise resolving to best selling products\n */\n// export const getBestSellingProducts = async (pageSize = 10) => {\n//   return getCachedProductData(\n//     PRODUCT_CACHE_KEYS.BEST_SELLING(pageSize),\n//     async () => {\n//       try {\n//         const { data } = await apolloClient.query({\n//           query: gql`\n//             query GetBestSellingProducts($pageSize: Int!) {\n//               products(\n//                 filter: { bestseller: { eq: \"1\" } }\n//                 pageSize: $pageSize\n//                 sort: { position: ASC }\n//               ) {\n//                 total_count\n//                 items {\n//                   ...ProductBasicFields\n//                 }\n//               }\n//             }\n//             ${PRODUCT_BASIC_FRAGMENT}\n//           `,\n//           variables: { pageSize },\n//           fetchPolicy: \"cache-first\",\n//         });\n\n//         return {\n//           items: data.products.items || [],\n//           total_count: data.products.total_count || 0,\n//         };\n//       } catch (error) {\n//         console.error(\"Error fetching best selling products:\", error);\n//         return { items: [], total_count: 0 };\n//       }\n//     },\n//     \"PRODUCT_LIST\"\n//   );\n// };\n\n/**\n * Get product stock status\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to stock status\n */\n\n/**\n * Get product stock status\n * @param {string} sku - Product SKU\n * @returns {Promise} - Promise resolving to stock status\n */\nexport const getProductStockStatus = async (sku) => {\n  const PRODUCT_STOCK_QUERY = gql`\n    query GetProductStockStatus($sku: String!) {\n      products(filter: { sku: { eq: $sku } }) {\n        items {\n          sku\n          stock_status\n          only_x_left_in_stock\n          quantity_and_stock_status {\n            quantity\n            is_in_stock\n          }\n        }\n      }\n    }\n  `;\n\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.PRODUCT_STOCK(sku),\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: PRODUCT_STOCK_QUERY,\n          variables: { sku },\n          fetchPolicy: \"cache-first\", // Ensure we get fresh data\n        });\n\n        // Extract the stock information from the response\n        const product = data.products.items[0];\n        if (!product) {\n          throw new Error(`Product with SKU ${sku} not found`);\n        }\n\n        return {\n          sku: product.sku,\n          is_in_stock: product.quantity_and_stock_status.is_in_stock,\n          quantity: product.quantity_and_stock_status.quantity,\n          stock_status: product.stock_status,\n          only_x_left_in_stock: product.only_x_left_in_stock,\n        };\n      } catch (error) {\n        console.error(`Error fetching stock status for SKU ${sku}:`, error);\n        throw error;\n      }\n    },\n    \"PRODUCT_STOCK\"\n  );\n};\n\n/**\n * Get global product aggregations (filters)\n * @returns {Promise} - Promise resolving to global aggregations data\n */\nexport const getGlobalProductAggregations = async () => {\n  return getCachedProductData(\n    PRODUCT_CACHE_KEYS.GLOBAL_PRODUCT_AGGREGATIONS, // Assuming this key will be added to productCacheUtils.js\n    async () => {\n      try {\n        const { data } = await apolloClient.query({\n          query: gql`\n            query GetGlobalProductAggregations {\n              products(filter: {}) {\n                # Empty filter for global aggregations\n                aggregations {\n                  attribute_code\n                  label\n                  count # Total products for this aggregation\n                  options {\n                    label\n                    value\n                    count # Products matching this specific option\n                  }\n                }\n              }\n            }\n          `,\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (!data.products || !data.products.aggregations) {\n          console.warn(\"No aggregations found in global product data.\");\n          return [];\n        }\n        return data.products.aggregations;\n      } catch (error) {\n        console.error(\"Error fetching global product aggregations:\", error);\n        throw error; // Re-throw to be caught by context or calling function\n      }\n    },\n    \"GLOBAL_PRODUCT_AGGREGATIONS\" // Cache type\n  );\n};\n\n// Create the API object with all methods\nconst productApi = {\n  getProducts,\n  getProductById,\n  getProductBySku,\n  getProductByUrlKey,\n  searchProducts,\n  // getFeaturedProducts,\n  // getNewProducts,\n  getRelatedProducts,\n  getCrossSellProducts,\n  getUpSellProducts,\n  getProductReviews,\n  submitProductReview,\n  getProductAttributes,\n  getProductsByCategory,\n  getProductFilters,\n  getGlobalProductAggregations, // Added new function\n  // getBestSellingProducts,\n  getProductStockStatus,\n};\n\n// Export the API object\nexport default productApi;\n","import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport productApi from \"../api/product.jsx\";\n\n// Create the context\nconst ProductContext = createContext();\n\n// Custom hook to use the product context\nexport const useProducts = () => {\n  const context = useContext(ProductContext);\n  if (!context) {\n    throw new Error(\"useProducts must be used within a ProductProvider\");\n  }\n  return context;\n};\n\nexport const ProductProvider = ({ children }) => {\n  // State for different product collections\n  const [allProducts, setAllProducts] = useState([]);\n  const [featuredProducts, setFeaturedProducts] = useState([]);\n  const [newProducts, setNewProducts] = useState([]);\n  const [bestSellingProducts, setBestSellingProducts] = useState([]);\n  const [productsByCategory, setProductsByCategory] = useState({});\n  const [productDetails, setProductDetails] = useState({});\n  const [searchResults, setSearchResults] = useState({});\n  const [productFilters, setProductFilters] = useState({}); // For category-specific filters\n  const [globalProductAggregations, setGlobalProductAggregations] = useState(\n    []\n  ); // For global aggregations\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetched, setLastFetched] = useState(null);\n\n  // Initialize with basic product data\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch featured products\n        // const featured = await productApi.getFeaturedProducts(10);\n        // setFeaturedProducts(featured.items || []);\n\n        // Fetch new products\n        // const newProds = await productApi.getNewProducts(10);\n        // setNewProducts(newProds.items || []);\n\n        // Fetch best selling products\n        // const bestSelling = await productApi.getBestSellingProducts(10);\n        // setBestSellingProducts(bestSelling.items || []);\n\n        setLastFetched(new Date());\n        setError(null);\n      } catch (err) {\n        console.error(\"Error in ProductContext initialization:\", err);\n        setError(err.message || \"Failed to fetch initial product data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, []);\n\n  // Get all products with search criteria\n  const getProducts = useCallback(\n    async (searchCriteria = {}) => {\n      // Ensure cacheKey is consistent and includes searchTerm if present\n      const { searchTerm, ...otherCriteria } = searchCriteria;\n      const cacheKeyParts = [JSON.stringify(otherCriteria)];\n      if (searchTerm) {\n        cacheKeyParts.push(`searchTerm-${searchTerm}`);\n      }\n      const cacheKey = cacheKeyParts.join(\"-\");\n      setLoading(true); // Set loading true at the start\n      if (allProducts[cacheKey]) {\n        setLoading(false); // Set loading false if returning from cache\n        return allProducts[cacheKey];\n      }\n      try {\n        // setLoading(true); // Already set at the start\n        const products = await productApi.getProducts(searchCriteria);\n        setAllProducts( products);\n        return products;\n      } catch (err) {\n        console.error(\"Error fetching products:\", err);\n        setError(err.message || \"Failed to fetch products\");\n        return { items: [], total_count: 0 };\n      } finally {\n        setLoading(false);\n      }\n    },\n    [allProducts, setLoading, setAllProducts, setError]\n  );\n\n  // Get product by ID\n  const getProductById = useCallback(\n    async (id) => {\n      if (productDetails[`id-${id}`]) {\n        return productDetails[`id-${id}`];\n      }\n      try {\n        // setLoading(true); // Managed by useProduct hook locally\n        const product = await productApi.getProductById(id);\n        setProductDetails((prev) => ({ ...prev, [`id-${id}`]: product }));\n        return product;\n      } catch (err) {\n        console.error(`Error fetching product with ID ${id}:`, err);\n        // setError(err.message || `Failed to fetch product with ID ${id}`); // Managed by useProduct hook locally\n        throw err; // Re-throw for useProduct to catch and set its local error\n      } finally {\n        // setLoading(false); // Managed by useProduct hook locally\n      }\n    },\n    [setProductDetails]\n  );\n\n  // Get product by SKU\n  const getProductBySku = useCallback(\n    async (sku) => {\n      if (productDetails[`sku-${sku}`]) {\n        return productDetails[`sku-${sku}`];\n      }\n      try {\n        // setLoading(true); // Managed by useProduct hook locally\n        const product = await productApi.getProductBySku(sku);\n        setProductDetails((prev) => ({ ...prev, [`sku-${sku}`]: product }));\n        return product;\n      } catch (err) {\n        console.error(`Error fetching product with SKU ${sku}:`, err);\n        // setError(err.message || `Failed to fetch product with SKU ${sku}`); // Managed by useProduct hook locally\n        throw err; // Re-throw for useProduct to catch\n      } finally {\n        // setLoading(false); // Managed by useProduct hook locally\n      }\n    },\n    [setProductDetails]\n  );\n\n  // Get product by URL key\n  const getProductByUrlKey = useCallback(\n    async (urlKey) => {\n      if (productDetails[`url-${urlKey}`]) {\n        return productDetails[`url-${urlKey}`];\n      }\n      try {\n        // setLoading(true); // Managed by useProduct hook locally\n        const product = await productApi.getProductByUrlKey(urlKey);\n        setProductDetails((prev) => ({ ...prev, [`url-${urlKey}`]: product }));\n        return product;\n      } catch (err) {\n        console.error(`Error fetching product with URL key ${urlKey}:`, err);\n        // setError(err.message || `Failed to fetch product with URL key ${urlKey}`); // Managed by useProduct hook locally\n        throw err; // Re-throw for useProduct to catch\n      } finally {\n        // setLoading(false); // Managed by useProduct hook locally\n      }\n    },\n    [setProductDetails]\n  );\n\n  // Search products\n  const searchProducts = useCallback(\n    async (searchCriteria = {}) => {\n      const {\n        searchQuery, // This is the actual search term\n        currentPage,\n        pageSize,\n        sortField,\n        sortDirection,\n        filterGroups,\n        ...otherOptions // Collect any other potential options\n      } = searchCriteria;\n\n      // Construct a more robust cache key\n      const cacheKeyParts = [\n        `query-${searchQuery}`,\n        `page-${currentPage || 1}`,\n        `size-${pageSize || 20}`,\n        `sort-${sortField || 'relevance'}_${sortDirection || 'DESC'}`,\n      ];\n      if (filterGroups && filterGroups.length > 0) {\n        cacheKeyParts.push(`filters-${JSON.stringify(filterGroups)}`);\n      }\n      const cacheKey = cacheKeyParts.join('-');\n\n      setLoading(true);\n      if (searchResults[cacheKey]) {\n        setLoading(false);\n        return searchResults[cacheKey];\n      }\n      try {\n        // Prepare options for productApi.searchProducts\n        // Assuming productApi.searchProducts expects searchTerm and an options object\n        const apiOptions = {\n          currentPage,\n          pageSize,\n          sortField,\n          sortDirection,\n          filterGroups,\n          ...otherOptions, // Spread any other options\n        };\n        \n        const results = await productApi.searchProducts(searchQuery, apiOptions);\n        setSearchResults((prev) => ({ ...prev, [cacheKey]: results }));\n        return results;\n      } catch (err) {\n        console.error(\n          `Error searching products for term \"${searchQuery}\":`,\n          err\n        );\n        setError(\n          err.message || `Failed to search products for \"${searchQuery}\"`\n        );\n        return { items: [], total_count: 0 }; // Ensure consistent return on error\n      } finally {\n        setLoading(false);\n      }\n    },\n    [searchResults, setLoading, setSearchResults, setError]\n  );\n\n  // Get products by category\n  const getProductsByCategory = useCallback(\n    async (categoryId, searchCriteria = {}) => {\n      const cacheKey = `${categoryId}-${JSON.stringify(searchCriteria)}`;\n      setLoading(true); // Set loading true at the start\n      if (productsByCategory[cacheKey]) {\n        setLoading(false); // Set loading false if returning from cache\n        return productsByCategory[cacheKey];\n      }\n      try {\n        // setLoading(true); // Already set at the start\n        const products = await productApi.getProductsByCategory(\n          categoryId,\n          searchCriteria\n        );\n        setProductsByCategory((prev) => ({ ...prev, [cacheKey]: products }));\n        return products;\n      } catch (err) {\n        console.error(\n          `Error fetching products for category ${categoryId}:`,\n          err\n        );\n        setError(\n          err.message || `Failed to fetch products for category ${categoryId}`\n        );\n        return { items: [], total_count: 0 };\n      } finally {\n        setLoading(false);\n      }\n    },\n    [productsByCategory, setLoading, setProductsByCategory, setError]\n  );\n\n  // Get product filters for category\n  const getProductFilters = useCallback(\n    async (categoryId) => {\n      setLoading(true); // Set loading true at the start\n      if (productFilters[categoryId]) {\n        setLoading(false); // Set loading false if returning from cache\n        return productFilters[categoryId];\n      }\n      try {\n        // setLoading(true); // Already set at the start\n        const filters = await productApi.getProductFilters(categoryId);\n        setProductFilters((prev) => ({ ...prev, [categoryId]: filters }));\n        return filters;\n      } catch (err) {\n        console.error(\n          `Error fetching filters for category ${categoryId}:`,\n          err\n        );\n        setError(\n          err.message || `Failed to fetch filters for category ${categoryId}`\n        );\n        return [];\n      } finally {\n        setLoading(false);\n      }\n    },\n    [productFilters, setLoading, setProductFilters, setError]\n  );\n\n  // Get global product aggregations\n  const fetchGlobalProductAggregations = useCallback(async () => {\n    // Check if already fetched to avoid redundant calls, simple check for now\n    if (globalProductAggregations.length > 0) {\n      return globalProductAggregations;\n    }\n    try {\n      setLoading(true);\n      const aggregations = await productApi.getGlobalProductAggregations();\n      setGlobalProductAggregations(aggregations || []);\n      return aggregations || [];\n    } catch (err) {\n      console.error(\"Error fetching global product aggregations:\", err);\n      setError(err.message || \"Failed to fetch global product aggregations\");\n      return []; // Return empty array on error\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    globalProductAggregations,\n    setLoading,\n    setGlobalProductAggregations,\n    setError,\n  ]);\n\n  // Force refresh function to manually trigger a refetch of all data\n  const refreshAllProducts = useCallback(async () => {\n    try {\n      setLoading(true);\n      // const featured = await productApi.getFeaturedProducts(10);\n      // setFeaturedProducts(featured.items || []);\n      // const newProds = await productApi.getNewProducts(10);\n      // setNewProducts(newProds.items || []);\n      const bestSelling = await productApi.getBestSellingProducts(10);\n      setBestSellingProducts(bestSelling.items || []);\n      setAllProducts({});\n      setProductDetails({});\n      setProductsByCategory({});\n      setSearchResults({});\n      setProductFilters({});\n      setGlobalProductAggregations([]); // Clear global aggregations on refresh\n      setLastFetched(new Date());\n      setError(null);\n      return true;\n    } catch (err) {\n      console.error(\"Error refreshing products:\", err);\n      setError(err.message || \"Failed to refresh products\");\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    setLoading,\n    setFeaturedProducts,\n    setNewProducts,\n    setBestSellingProducts,\n    setAllProducts,\n    setProductDetails,\n    setProductsByCategory,\n    setSearchResults,\n    setProductFilters,\n    setGlobalProductAggregations,\n    setLastFetched,\n    setError,\n  ]);\n\n  // Get related products for a product\n  const getRelatedProducts = useCallback(async (sku) => {\n    try {\n      return await productApi.getRelatedProducts(sku);\n    } catch (err) {\n      console.error(`Error fetching related products for SKU ${sku}:`, err);\n      return [];\n    }\n  }, []);\n\n  // Get cross-sell products for a product\n  const getCrossSellProducts = useCallback(async (sku) => {\n    try {\n      return await productApi.getCrossSellProducts(sku);\n    } catch (err) {\n      console.error(`Error fetching cross-sell products for SKU ${sku}:`, err);\n      return [];\n    }\n  }, []);\n\n  // Get up-sell products for a product\n  const getUpSellProducts = useCallback(async (sku) => {\n    try {\n      return await productApi.getUpSellProducts(sku);\n    } catch (err) {\n      console.error(`Error fetching up-sell products for SKU ${sku}:`, err);\n      return [];\n    }\n  }, []);\n\n  // Get product reviews\n  const getProductReviews = useCallback(async (sku) => {\n    try {\n      return await productApi.getProductReviews(sku);\n    } catch (err) {\n      console.error(`Error fetching reviews for SKU ${sku}:`, err);\n      return [];\n    }\n  }, []);\n\n  // Submit product review\n  const submitProductReview = useCallback(async (sku, reviewData) => {\n    try {\n      return await productApi.submitProductReview(sku, reviewData);\n    } catch (err) {\n      console.error(`Error submitting review for SKU ${sku}:`, err);\n      throw err; // Re-throw to allow calling component to handle\n    }\n  }, []);\n\n  // Get product stock status\n  const getProductStockStatus = useCallback(async (sku) => {\n    try {\n      return await productApi.getProductStockStatus(sku);\n    } catch (err) {\n      console.error(`Error fetching stock status for SKU ${sku}:`, err);\n      throw err; // Re-throw to allow calling component to handle\n    }\n  }, []);\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(\n    () => ({\n      // Product collections\n      featuredProducts,\n      newProducts,\n      bestSellingProducts,\n      productFilters, // Category-specific filters\n      globalProductAggregations, // Global aggregations\n\n      // Loading and error states\n      loading,\n      error,\n      lastFetched,\n\n      // Methods to get products (now memoized)\n      getProducts,\n      getProductById,\n      getProductBySku,\n      getProductByUrlKey,\n      searchProducts,\n      getProductsByCategory,\n      getProductFilters, // For category filters\n      fetchGlobalProductAggregations, // For global aggregations\n\n      // Related product methods (now memoized)\n      getRelatedProducts,\n      getCrossSellProducts,\n      getUpSellProducts,\n\n      // Review methods (now memoized)\n      getProductReviews,\n      submitProductReview,\n\n      // Stock methods (now memoized)\n      getProductStockStatus,\n\n      // Refresh method (now memoized)\n      refreshAllProducts,\n    }),\n    [\n      featuredProducts,\n      newProducts,\n      bestSellingProducts,\n      productFilters,\n      globalProductAggregations,\n      loading,\n      error,\n      lastFetched,\n      getProducts,\n      getProductById,\n      getProductBySku,\n      getProductByUrlKey,\n      searchProducts,\n      getProductsByCategory,\n      getProductFilters,\n      fetchGlobalProductAggregations,\n      getRelatedProducts,\n      getCrossSellProducts,\n      getUpSellProducts,\n      getProductReviews,\n      submitProductReview,\n      getProductStockStatus,\n      refreshAllProducts,\n    ]\n  );\n\n  return (\n    <ProductContext.Provider value={contextValue}>\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\nexport default ProductContext;\n","import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport { getAddresses, addAddress, updateAddress, deleteAddress as apiDeleteAddress } from '../api/addressApi';\n\nconst AddressContext = createContext();\n\nexport const AddressProvider = ({ children }) => {\n  const [addresses, setAddresses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchAddresses = useCallback(async () => {\n    setLoading(true);\n    setError(null);  \n    try {\n      const data = await getAddresses();         \n      setAddresses(data?.addresses || []);\n    } catch (err) {\n      console.error(\"Failed to fetch addresses:\", err);\n      setError(err.message || 'Failed to fetch addresses');\n      setAddresses([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      fetchAddresses();\n    } else {\n      setAddresses([]);\n    }\n  }, [fetchAddresses]);\n\n  const handleAddAddress = async (addressData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const newAddress = await addAddress(addressData);\n      setAddresses(prev => [...prev, newAddress]);\n      return newAddress;\n    } catch (err) {\n      console.error(\"Failed to add address:\", err);\n      setError(err.message || 'Failed to add address');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateAddress = async (addressData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const updatedAddr = await updateAddress(addressData);\n      setAddresses(prev => prev.map(addr => (addr.id === updatedAddr.id ? updatedAddr : addr)));\n      return updatedAddr;\n    } catch (err) {\n      console.error(\"Failed to update address:\", err);\n      setError(err.message || 'Failed to update address');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteAddress = async (addressId) => {\n    setLoading(true);\n    setError(null);\n    try {\n      await apiDeleteAddress(addressId);\n      setAddresses(prev => prev.filter(addr => addr.id !== addressId));\n    } catch (err) {\n      console.error(\"Failed to delete address:\", err);\n      setError(err.message || 'Failed to delete address');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AddressContext.Provider\n      value={{\n        addresses,\n        loading,\n        error,\n        fetchAddresses,\n        addAddress: handleAddAddress,\n        updateAddress: handleUpdateAddress,\n        deleteAddress: handleDeleteAddress,\n      }}\n    >\n      {children}\n    </AddressContext.Provider>\n  );\n};\n\nexport const useAddress = () => {\n  const context = useContext(AddressContext);\n  if (context === undefined) {\n    throw new Error('useAddress must be used within an AddressProvider');\n  }\n  return context;\n};","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles/index.css\";\nimport AppRoutes from \"./routes/AppRoutes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AuthProvider } from \"./hooks/useAuth\";\nimport { CategoryProvider } from \"./context/CategoryContext\";\nimport { ProductProvider } from \"./context/ProductContext\";\nimport { CartProvider } from \"./hooks/useCart\";\nimport { AddressProvider } from \"./context/AddressContext\"; // Added import\nimport { WishlistProvider } from \"./context/WishlistContext\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Header from \"./components/layouts/Header\";\nimport Footer from \"./components/layouts/Footer\";\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <StrictMode>\n    <BrowserRouter basename=\"/pub/theme\">\n      <AuthProvider>\n        <CartProvider >\n          <WishlistProvider>\n            <CategoryProvider>\n              <AddressProvider>\n                <ProductProvider>\n                  <Header />\n                  <AppRoutes />\n                  <Footer />\n                </ProductProvider>\n              </AddressProvider>\n            </CategoryProvider>\n          </WishlistProvider>\n        </CartProvider>\n      </AuthProvider>\n    </BrowserRouter>\n    <ToastContainer />\n  </StrictMode>\n);\n"],"file":"assets/js/index-CvpdAI6N.js"}